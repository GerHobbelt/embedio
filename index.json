{
  "api/EmbedIO.Actions.ActionModule.html": {
    "href": "api/EmbedIO.Actions.ActionModule.html",
    "title": "Class ActionModule | EmbedIO",
    "keywords": "Class ActionModule A module that passes requests to a callback. Inheritance Object WebModuleBase ActionModule Implements IWebModuleImpl IWebModule Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Actions Syntax public class ActionModule : WebModuleBase, IWebModuleImpl, IWebModule Constructors ActionModule(RequestHandlerCallback) Initializes a new instance of the ActionModule class. Declaration public ActionModule(RequestHandlerCallback handler) Parameters Type Name Description RequestHandlerCallback handler The handler. ActionModule(String, HttpVerb, RequestHandlerCallback) Initializes a new instance of the ActionModule class. Declaration public ActionModule(string baseRoute, HttpVerb verb, RequestHandlerCallback handler) Parameters Type Name Description String baseRoute The base route. HttpVerb verb The HTTP verb that will be served by this module. RequestHandlerCallback handler The callback used to handle requests. See Also WebModuleBase(String) Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Methods OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) Implements IWebModuleImpl IWebModule See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Actions.html": {
    "href": "api/EmbedIO.Actions.html",
    "title": "Namespace EmbedIO.Actions | EmbedIO",
    "keywords": "Namespace EmbedIO.Actions Classes ActionModule A module that passes requests to a callback. RedirectModule A module that redirects requests. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Actions.RedirectModule.html": {
    "href": "api/EmbedIO.Actions.RedirectModule.html",
    "title": "Class RedirectModule | EmbedIO",
    "keywords": "Class RedirectModule A module that redirects requests. Inheritance Object WebModuleBase RedirectModule Implements IWebModuleImpl IWebModule Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Actions Syntax public class RedirectModule : WebModuleBase, IWebModuleImpl, IWebModule Constructors RedirectModule(String, String, HttpStatusCode) Initializes a new instance of the RedirectModule class that will redirect all served requests. Declaration public RedirectModule(string baseRoute, string location, HttpStatusCode statusCode = null) Parameters Type Name Description String baseRoute The base route. String location The redirect URL. HttpStatusCode statusCode The response status code; default is 302 - Found . See Also WebModuleBase(String) RedirectModule(String, String, Nullable<Func<IHttpContext, Boolean>>, HttpStatusCode) Initializes a new instance of the RedirectModule class that will redirect all requests for which the shouldRedirect callback returns true . Declaration public RedirectModule(string baseRoute, string location, Func<IHttpContext, bool>? shouldRedirect, HttpStatusCode statusCode = null) Parameters Type Name Description String baseRoute The base route. String location The redirect URL. Nullable < Func < IHttpContext , Boolean >> shouldRedirect A callback function that returns true if a request must be redirected. HttpStatusCode statusCode The response status code; default is 302 - Found . See Also WebModuleBase(String) Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Location Gets the redirect URL. Declaration public string Location { get; } Property Value Type Description String StatusCode Gets the response status code. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode Methods OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) Implements IWebModuleImpl IWebModule See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.Auth.html": {
    "href": "api/EmbedIO.Authentication.Auth.html",
    "title": "Class Auth | EmbedIO",
    "keywords": "Class Auth Provides useful authentication-related constants. Inheritance Object Auth Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Authentication Syntax public static class Auth Fields NoUser Gets an interface representing no user. To be used instead of null to initialize fields or properties of type . Declaration public static readonly IPrincipal NoUser Field Value Type Description IPrincipal Methods CreateUnauthenticatedPrincipal(String) Creates and returns an interface representing an unauthenticated user, with the given authentication type. Declaration public static IPrincipal CreateUnauthenticatedPrincipal(string authenticationType) Parameters Type Name Description String authenticationType The type of authentication used to identify the user. Returns Type Description IPrincipal An interface. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.AuthenticationHandler.html": {
    "href": "api/EmbedIO.Authentication.AuthenticationHandler.html",
    "title": "Class AuthenticationHandler | EmbedIO",
    "keywords": "Class AuthenticationHandler Provides standard handler callbacks for authentication modules. Inheritance Object AuthenticationHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Authentication Syntax public static class AuthenticationHandler Methods PassThrough(IHttpContext, AuthenticationModuleBase) Unconditionally passes a request down the module chain. In the case of authentication modules, this is accomplished simply by doing nothing, as the IsFinalHandler property of authentication modules is always set to false . Declaration public static Task PassThrough(IHttpContext context, AuthenticationModuleBase module) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. AuthenticationModuleBase module The authentication module that called the handler. Returns Type Description Task A completed . Unauthorized(IHttpContext, AuthenticationModuleBase) Throws a HttpException with a response code of 401 Unauthorized . Declaration public static Task Unauthorized(IHttpContext context, AuthenticationModuleBase module) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. AuthenticationModuleBase module The authentication module that called the handler. Returns Type Description Task This method never returns; it throws an exception instead.. Unauthorized(String, Object) Throws a HttpException with a response code of 401 Unauthorized and, optionally, a custom message and data. Declaration public static AuthenticationHandlerCallback Unauthorized(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description AuthenticationHandlerCallback This method never returns; it throws an exception instead.. See Also AuthenticationHandlerCallback Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.AuthenticationHandlerCallback.html": {
    "href": "api/EmbedIO.Authentication.AuthenticationHandlerCallback.html",
    "title": "Delegate AuthenticationHandlerCallback | EmbedIO",
    "keywords": "Delegate AuthenticationHandlerCallback A callback used to handle events in authentication modules. Namespace : EmbedIO.Authentication Syntax public delegate Task AuthenticationHandlerCallback(IHttpContext context, AuthenticationModuleBase module); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. AuthenticationModuleBase module The authentication module that called the handler. Returns Type Description Task A representing the ongoing operation. See Also OnInvalidCredentials Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.AuthenticationModuleBase.html": {
    "href": "api/EmbedIO.Authentication.AuthenticationModuleBase.html",
    "title": "Class AuthenticationModuleBase | EmbedIO",
    "keywords": "Class AuthenticationModuleBase Base class for authentication modules. Inheritance Object WebModuleBase AuthenticationModuleBase BasicAuthenticationModuleBase Implements IWebModuleImpl IWebModule Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Authentication Syntax public abstract class AuthenticationModuleBase : WebModuleBase, IWebModuleImpl, IWebModule Constructors AuthenticationModuleBase(String) Initializes a new instance of the AuthenticationModuleBase class. Declaration protected AuthenticationModuleBase(string baseRoute) Parameters Type Name Description String baseRoute The base route served by this module. Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override sealed bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks Authentication modules, i.e. modules derived from AuthenticationModuleBase , always have this property set to false . See Also IsHandled SetHandled () OnInvalidCredentials Gets or sets an AuthenticationHandlerCallback that is called if a request contains invalid credentials. The default is Unauthorized(IHttpContext, AuthenticationModuleBase) . Declaration public AuthenticationHandlerCallback OnInvalidCredentials { get; set; } Property Value Type Description AuthenticationHandlerCallback See Also AuthenticateAsync(IHttpContext) OnMissingCredentials AuthenticationHandler OnMissingCredentials Gets or sets an AuthenticationHandlerCallback that is called if authentication could not take place. For example, BasicAuthenticationModuleBase calls this handler if the request has no Authorization header. The default is Unauthorized(IHttpContext, AuthenticationModuleBase) . Declaration public AuthenticationHandlerCallback OnMissingCredentials { get; set; } Property Value Type Description AuthenticationHandlerCallback See Also AuthenticateAsync(IHttpContext) OnInvalidCredentials AuthenticationHandler Methods AuthenticateAsync(IHttpContext) Asynchronously authenticates a user, based on a request's contents, yielding an interface that will be assigned to the HTTP context's User property for use by other modules. Declaration protected abstract Task<IPrincipal> AuthenticateAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the request. Returns Type Description Task < IPrincipal > A whose result will be as follows: If authentication did not take place (for example, in the case of BasicAuthenticationModuleBase , when the request has no Authorization header) An interface, whose Identity property has both its Name and AuthenticationType properties set to the empty string. Returning NoUser is the fastest way in this case. If the request contains INVALID credentials An interface, whose Identity property has its Name property set to the empty string, and its AuthenticationType property set to a non-empty string. NoUser cannot be returned in this case. If the request contains VALID credentials An interface, whose Identity property has both its Name and AuthenticationType properties set to non-empty strings. Remarks this method will not be called if the property assigned to the User property of context has an Identity with a non-empty AuthenticationType . This way, two or more authentication modules may be added to a WebServer . The first one that succeeds in retrieving user credentials from the request, whether valid or not, will cause subsequent authentication modules to skip processing the HTTP context completely. OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override sealed Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) Implements IWebModuleImpl IWebModule Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.AuthenticationModuleBaseExtensions.html": {
    "href": "api/EmbedIO.Authentication.AuthenticationModuleBaseExtensions.html",
    "title": "Class AuthenticationModuleBaseExtensions | EmbedIO",
    "keywords": "Class AuthenticationModuleBaseExtensions Provides extension methods for classes derived from AuthenticationModuleBase . Inheritance Object AuthenticationModuleBaseExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Authentication Syntax public static class AuthenticationModuleBaseExtensions Methods HandleInvalidCredentials<TModule>(TModule, AuthenticationHandlerCallback) Sets an AuthenticationHandlerCallback that is called by an authentication module when a request contains invalid credentials. Declaration public static TModule HandleInvalidCredentials<TModule>(this TModule this, AuthenticationHandlerCallback callback) where TModule : AuthenticationModuleBase Parameters Type Name Description TModule this The module on which this method is called. AuthenticationHandlerCallback callback The method to call. Returns Type Description TModule this with its OnInvalidCredentials property set to callback . Type Parameters Name Description TModule The type of the module on which this method is called. HandleMissingCredentials<TModule>(TModule, AuthenticationHandlerCallback) Sets an AuthenticationHandlerCallback that is called by an authentication module when authentication could not take place. Declaration public static TModule HandleMissingCredentials<TModule>(this TModule this, AuthenticationHandlerCallback callback) where TModule : AuthenticationModuleBase Parameters Type Name Description TModule this The module on which this method is called. AuthenticationHandlerCallback callback The method to call. Returns Type Description TModule this with its OnMissingCredentials property set to callback . Type Parameters Name Description TModule The type of the module on which this method is called. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.BasicAuthenticationModule.html": {
    "href": "api/EmbedIO.Authentication.BasicAuthenticationModule.html",
    "title": "Class BasicAuthenticationModule | EmbedIO",
    "keywords": "Class BasicAuthenticationModule Simple HTTP basic authentication module that stores user names and passwords in a , and has no user roles. Inheritance Object WebModuleBase AuthenticationModuleBase BasicAuthenticationModuleBase BasicAuthenticationModule Implements IWebModuleImpl IWebModule Inherited Members BasicAuthenticationModuleBase.AuthenticationType BasicAuthenticationModuleBase.Realm BasicAuthenticationModuleBase.AuthenticateAsync(IHttpContext) AuthenticationModuleBase.IsFinalHandler AuthenticationModuleBase.OnMissingCredentials AuthenticationModuleBase.OnInvalidCredentials AuthenticationModuleBase.OnRequestAsync(IHttpContext) WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Authentication Syntax public class BasicAuthenticationModule : BasicAuthenticationModuleBase, IWebModuleImpl, IWebModule Constructors BasicAuthenticationModule(String, String) Initializes a new instance of the BasicAuthenticationModule class. Declaration public BasicAuthenticationModule(string baseRoute, string realm = null) Parameters Type Name Description String baseRoute The base route. String realm The authentication realm. Remarks If realm is null or the empty string, the Realm property will be set equal to BaseRoute . Properties Accounts Gets a dictionary of valid user names and passwords. Declaration public ConcurrentDictionary<string, string> Accounts { get; } Property Value Type Description ConcurrentDictionary < String , String > Methods VerifyCredentialsAsync(String, String, String, IList<String>, CancellationToken) Verifies the credentials given in the Authentication request header. Declaration protected override sealed Task<bool> VerifyCredentialsAsync(string path, string userName, string password, IList<string> roles, CancellationToken cancellationToken) Parameters Type Name Description String path The URL path requested by the client. Note that this is relative to the module's BaseRoute . String userName The user name. String password The password, or the empty string if none has been given. IList < String > roles A list to which the user's roles can be added. CancellationToken cancellationToken A use to cancel the operation. Returns Type Description Task < Boolean > A whose result will be true if the given credentials are valid, false if they are not. Overrides BasicAuthenticationModuleBase.VerifyCredentialsAsync(String, String, String, IList<String>, CancellationToken) Implements IWebModuleImpl IWebModule Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.BasicAuthenticationModuleBase.html": {
    "href": "api/EmbedIO.Authentication.BasicAuthenticationModuleBase.html",
    "title": "Class BasicAuthenticationModuleBase | EmbedIO",
    "keywords": "Class BasicAuthenticationModuleBase Base class for authentication modules using HTTP basic authentication . Inheritance Object WebModuleBase AuthenticationModuleBase BasicAuthenticationModuleBase BasicAuthenticationModule Implements IWebModuleImpl IWebModule Inherited Members AuthenticationModuleBase.IsFinalHandler AuthenticationModuleBase.OnMissingCredentials AuthenticationModuleBase.OnInvalidCredentials AuthenticationModuleBase.OnRequestAsync(IHttpContext) WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Authentication Syntax public abstract class BasicAuthenticationModuleBase : AuthenticationModuleBase, IWebModuleImpl, IWebModule Constructors BasicAuthenticationModuleBase(String, String) Initializes a new instance of the BasicAuthenticationModuleBase class. Declaration protected BasicAuthenticationModuleBase(string baseRoute, string realm) Parameters Type Name Description String baseRoute The base URL path. String realm The authentication realm. Remarks If realm is null or the empty string, the Realm property will be set equal to BaseRoute . Fields AuthenticationType The authentication type used by this module. Declaration public const string AuthenticationType = \"Basic\" Field Value Type Description String Properties Realm Gets the authentication realm. Declaration public string Realm { get; } Property Value Type Description String Methods AuthenticateAsync(IHttpContext) Asynchronously authenticates a user, based on a request's contents, yielding an interface that will be assigned to the HTTP context's User property for use by other modules. Declaration protected override sealed Task<IPrincipal> AuthenticateAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the request. Returns Type Description Task < IPrincipal > A whose result will be as follows: If authentication did not take place (for example, in the case of BasicAuthenticationModuleBase , when the request has no Authorization header) An interface, whose Identity property has both its Name and AuthenticationType properties set to the empty string. Returning NoUser is the fastest way in this case. If the request contains INVALID credentials An interface, whose Identity property has its Name property set to the empty string, and its AuthenticationType property set to a non-empty string. NoUser cannot be returned in this case. If the request contains VALID credentials An interface, whose Identity property has both its Name and AuthenticationType properties set to non-empty strings. Overrides AuthenticationModuleBase.AuthenticateAsync(IHttpContext) Remarks this method will not be called if the property assigned to the User property of context has an Identity with a non-empty AuthenticationType . This way, two or more authentication modules may be added to a WebServer . The first one that succeeds in retrieving user credentials from the request, whether valid or not, will cause subsequent authentication modules to skip processing the HTTP context completely. VerifyCredentialsAsync(String, String, String, IList<String>, CancellationToken) Verifies the credentials given in the Authentication request header. Declaration protected abstract Task<bool> VerifyCredentialsAsync(string path, string userName, string password, IList<string> roles, CancellationToken cancellationToken) Parameters Type Name Description String path The URL path requested by the client. Note that this is relative to the module's BaseRoute . String userName The user name. String password The password, or the empty string if none has been given. IList < String > roles A list to which the user's roles can be added. CancellationToken cancellationToken A use to cancel the operation. Returns Type Description Task < Boolean > A whose result will be true if the given credentials are valid, false if they are not. Implements IWebModuleImpl IWebModule Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.BasicAuthenticationModuleExtensions.html": {
    "href": "api/EmbedIO.Authentication.BasicAuthenticationModuleExtensions.html",
    "title": "Class BasicAuthenticationModuleExtensions | EmbedIO",
    "keywords": "Class BasicAuthenticationModuleExtensions Provides extension methods for BasicAuthenticationModule . Inheritance Object BasicAuthenticationModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Authentication Syntax public static class BasicAuthenticationModuleExtensions Methods WithAccount(BasicAuthenticationModule, String, String) Adds a user name and password to the Accounts dictionary of a BasicAuthenticationModule . Declaration public static BasicAuthenticationModule WithAccount(this BasicAuthenticationModule this, string userName, string password) Parameters Type Name Description BasicAuthenticationModule this The BasicAuthenticationModule on which this method is called. String userName The user name. String password The password. Returns Type Description BasicAuthenticationModule this , with the user name and password added to the Accounts dictionary. Remarks If a userName account already exists, its password is replaced with password . WithAccounts(BasicAuthenticationModule, IEnumerable<KeyValuePair<String, String>>) Adds a dictionary of user names and passwords to the Accounts dictionary of a BasicAuthenticationModule . Declaration public static BasicAuthenticationModule WithAccounts(this BasicAuthenticationModule this, IEnumerable<KeyValuePair<string, string>> accounts) Parameters Type Name Description BasicAuthenticationModule this The BasicAuthenticationModule on which this method is called. IEnumerable < KeyValuePair < String , String >> accounts An enumeration of key / value pairs representing the user names and passwords to add.. Returns Type Description BasicAuthenticationModule this , with the user names and passwords in accounts added to the Accounts dictionary. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Authentication.html": {
    "href": "api/EmbedIO.Authentication.html",
    "title": "Namespace EmbedIO.Authentication | EmbedIO",
    "keywords": "Namespace EmbedIO.Authentication Classes Auth Provides useful authentication-related constants. AuthenticationHandler Provides standard handler callbacks for authentication modules. AuthenticationModuleBase Base class for authentication modules. AuthenticationModuleBaseExtensions Provides extension methods for classes derived from AuthenticationModuleBase . BasicAuthenticationModule Simple HTTP basic authentication module that stores user names and passwords in a , and has no user roles. BasicAuthenticationModuleBase Base class for authentication modules using HTTP basic authentication . BasicAuthenticationModuleExtensions Provides extension methods for BasicAuthenticationModule . Delegates AuthenticationHandlerCallback A callback used to handle events in authentication modules. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.CompressionMethod.html": {
    "href": "api/EmbedIO.CompressionMethod.html",
    "title": "Enum CompressionMethod | EmbedIO",
    "keywords": "Enum CompressionMethod Specifies the compression method used to compress a message on the WebSocket connection. Namespace : EmbedIO Syntax public enum CompressionMethod : byte Remarks The compression methods that can be used are defined in Compression Extensions for WebSocket . Fields Name Description Deflate Specifies \"Deflate\" compression. Gzip Specifies GZip compression. None Specifies no compression. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.CompressionMethodNames.html": {
    "href": "api/EmbedIO.CompressionMethodNames.html",
    "title": "Class CompressionMethodNames | EmbedIO",
    "keywords": "Class CompressionMethodNames Exposes constants for possible values of the Content-Encoding HTTP header. Inheritance Object CompressionMethodNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class CompressionMethodNames Fields Deflate Specifies the \"Deflate\" compression method. Declaration public const string Deflate = \"deflate\" Field Value Type Description String Gzip Specifies the GZip compression method. Declaration public const string Gzip = \"gzip\" Field Value Type Description String None Specifies no compression. Declaration public const string None = \"identity\" Field Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Cors.CorsModule.html": {
    "href": "api/EmbedIO.Cors.CorsModule.html",
    "title": "Class CorsModule | EmbedIO",
    "keywords": "Class CorsModule Cross-origin resource sharing (CORS) control Module. CORS is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the resource originated. Inheritance Object WebModuleBase CorsModule Implements IWebModuleImpl IWebModule Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Cors Syntax public class CorsModule : WebModuleBase, IWebModuleImpl, IWebModule Constructors CorsModule(String, String, String, String) Initializes a new instance of the CorsModule class. Declaration public CorsModule(string baseRoute, string origins = \"*\", string headers = \"*\", string methods = \"*\") Parameters Type Name Description String baseRoute The base route. String origins The valid origins. The default is All ( * ). String headers The valid headers. The default is All ( * ). String methods The valid methods. The default is All ( * ). Fields All A string meaning \"All\" in CORS headers. Declaration public const string All = \"*\" Field Value Type Description String Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Methods OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) Implements IWebModuleImpl IWebModule Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Cors.html": {
    "href": "api/EmbedIO.Cors.html",
    "title": "Namespace EmbedIO.Cors | EmbedIO",
    "keywords": "Namespace EmbedIO.Cors Classes CorsModule Cross-origin resource sharing (CORS) control Module. CORS is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the resource originated. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ExceptionHandler.html": {
    "href": "api/EmbedIO.ExceptionHandler.html",
    "title": "Class ExceptionHandler | EmbedIO",
    "keywords": "Class ExceptionHandler Provides standard handlers for unhandled exceptions at both module and server level. Inheritance Object ExceptionHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class ExceptionHandler Fields Default The default handler used by WebServerBase<TOptions> . This is the same as HtmlResponse(IHttpContext, Exception) . Declaration public static readonly ExceptionHandlerCallback Default Field Value Type Description ExceptionHandlerCallback ExceptionMessageHeaderName The name of the response header used by the EmptyResponseWithHeaders(IHttpContext, Exception) handler to transmit the message of the exception to the client. Declaration public const string ExceptionMessageHeaderName = \"X-Exception-Message\" Field Value Type Description String ExceptionTypeHeaderName The name of the response header used by the EmptyResponseWithHeaders(IHttpContext, Exception) handler to transmit the type of the exception to the client. Declaration public const string ExceptionTypeHeaderName = \"X-Exception-Type\" Field Value Type Description String Properties ContactInformation Gets or sets the contact information to include in exception responses. Declaration public static string ContactInformation { get; set; } Property Value Type Description String IncludeStackTraces Gets or sets a value indicating whether to include stack traces in exception responses. Declaration public static bool IncludeStackTraces { get; set; } Property Value Type Description Boolean Methods EmptyResponse(IHttpContext, Exception) Sends an empty 500 Internal Server Error response. Declaration public static Task EmptyResponse(IHttpContext context, Exception exception) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. Exception exception The unhandled exception. This parameter is ignored, because there is no possible use for it in an empty response. Returns Type Description Task A representing the ongoing operation. EmptyResponseWithHeaders(IHttpContext, Exception) Sends an empty 500 Internal Server Error response, with the following additional headers: Header Value X-Exception-Type The name (without namespace) of the type of exception that was thrown. X-Exception-Message The Message property of the exception. The aforementioned header names are available as the ExceptionTypeHeaderName and ExceptionMessageHeaderName properties, respectively. Declaration public static Task EmptyResponseWithHeaders(IHttpContext context, Exception exception) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. Exception exception The unhandled exception. Returns Type Description Task A representing the ongoing operation. HtmlResponse(IHttpContext, Exception) Sends a 500 Internal Server Error response with a HTML payload briefly describing the error, including contact information and/or a stack trace if specified via the ContactInformation and IncludeStackTraces properties, respectively. Declaration public static Task HtmlResponse(IHttpContext context, Exception exception) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. Exception exception The unhandled exception. Returns Type Description Task A representing the ongoing operation. See Also OnUnhandledException OnUnhandledException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ExceptionHandlerCallback.html": {
    "href": "api/EmbedIO.ExceptionHandlerCallback.html",
    "title": "Delegate ExceptionHandlerCallback | EmbedIO",
    "keywords": "Delegate ExceptionHandlerCallback A callback used to provide information about an unhandled exception occurred while processing a request. Namespace : EmbedIO Syntax public delegate Task ExceptionHandlerCallback(IHttpContext context, Exception exception); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. Exception exception The unhandled exception. Returns Type Description Task A representing the ongoing operation. Remarks When this delegate is called, the response's status code has already been set to . Any exception thrown by a handler (even a HTTP exception) will go unhandled: the web server will not crash, but processing of the request will be aborted, and the response will be flushed as-is. In other words, it is not a good ides to throw HttpException.NotFound() (or similar) from a handler. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.DirectoryLister.html": {
    "href": "api/EmbedIO.Files.DirectoryLister.html",
    "title": "Class DirectoryLister | EmbedIO",
    "keywords": "Class DirectoryLister Provides standard directory listers for FileModule . Inheritance Object DirectoryLister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public static class DirectoryLister Properties Html Gets an IDirectoryLister interface that produces a HTML listing of a directory. The output of the returned directory lister is the same as a directory listing obtained by EmbedIO version 2. Declaration public static IDirectoryLister Html { get; } Property Value Type Description IDirectoryLister See Also IDirectoryLister Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileCache.html": {
    "href": "api/EmbedIO.Files.FileCache.html",
    "title": "Class FileCache | EmbedIO",
    "keywords": "Class FileCache A cache where one or more instances of FileModule can store hashes and file contents. Inheritance Object FileCache Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public sealed class FileCache Fields DefaultMaxFileSizeKb The default value for the MaxFileSizeKb property. Declaration public const int DefaultMaxFileSizeKb = 200 Field Value Type Description Int32 DefaultMaxSizeKb The default value for the MaxSizeKb property. Declaration public const int DefaultMaxSizeKb = 10240 Field Value Type Description Int32 Properties Default Gets the default FileCache instance used by FileModule . Declaration public static FileCache Default { get; } Property Value Type Description FileCache MaxFileSizeKb Gets or sets the maximum size of a single cached file in kilobytes (1 kilobyte = 1024 bytes). A single file's contents may be present in a cache more than once, if the file is requested with different Accept-Encoding request headers. This property acts as a threshold for the uncompressed size of a file. The default value for this property is stored in the DefaultMaxFileSizeKb constant field. Setting this property to a value lower than 0 has the same effect as setting it to 0, in fact completely disabling the caching of file contents for this cache. This property cannot be set to a value higher than 2097151; in other words, it is not possible to cache files bigger than two Gigabytes (1 Gigabyte = 1048576 kilobytes) minus 1 kilobyte. Declaration public int MaxFileSizeKb { get; set; } Property Value Type Description Int32 MaxSizeKb Gets or sets the maximum total size of cached data in kilobytes (1 kilobyte = 1024 bytes). The default value for this property is stored in the DefaultMaxSizeKb constant field. Setting this property to a value less lower han 1 has the same effect as setting it to 1. Declaration public int MaxSizeKb { get; set; } Property Value Type Description Int32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileModule.html": {
    "href": "api/EmbedIO.Files.FileModule.html",
    "title": "Class FileModule | EmbedIO",
    "keywords": "Class FileModule A module serving files and directory listings from an IFileProvider . Inheritance Object WebModuleBase FileModule Implements IWebModuleImpl IWebModule IDisposable IMimeTypeCustomizer IMimeTypeProvider Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Files Syntax public class FileModule : WebModuleBase, IWebModuleImpl, IWebModule, IDisposable, IMimeTypeCustomizer, IMimeTypeProvider Constructors FileModule(String, IFileProvider) Initializes a new instance of the FileModule class, using the specified cache. Declaration public FileModule(string baseRoute, IFileProvider provider) Parameters Type Name Description String baseRoute The base route. IFileProvider provider An IFileProvider interface that provides access to actual files and directories. Fields DefaultDocumentName Default value for DefaultDocument . Declaration public const string DefaultDocumentName = \"index.html\" Field Value Type Description String Properties Cache Gets or sets the FileCache used by this module to store hashes and, optionally, file contents and rendered directory listings. Declaration public FileCache Cache { get; set; } Property Value Type Description FileCache ContentCaching Gets or sets a value indicating whether this module caches the contents of files and directory listings. Note that the actual representations of files are stored in FileCache ; thus, for example, if a file is always requested with an Accept-Encoding of gzip , only the gzipped contents of the file will be cached. Declaration public bool ContentCaching { get; set; } Property Value Type Description Boolean DefaultDocument Gets or sets the name of the default document served, if it exists, instead of a directory listing when the path of a requested URL maps to a directory. The default value for this property is the DefaultDocumentName constant. Declaration public string DefaultDocument { get; set; } Property Value Type Description String DefaultExtension Gets or sets the default extension appended to requested URL paths that do not map to any file or directory. Defaults to null . Declaration public string DefaultExtension { get; set; } Property Value Type Description String DirectoryLister Gets or sets the IDirectoryLister interface used to generate directory listing in this module. A value of null (the default) disables the generation of directory listings. Declaration public IDirectoryLister DirectoryLister { get; set; } Property Value Type Description IDirectoryLister IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () OnDirectoryNotListable Gets or sets a FileRequestHandlerCallback that is called whenever the requested URL path has been mapped to a directory, but directory listing has been disabled by setting DirectoryLister to null . The default is ThrowUnauthorized(IHttpContext, MappedResourceInfo) . Declaration public FileRequestHandlerCallback OnDirectoryNotListable { get; set; } Property Value Type Description FileRequestHandlerCallback See Also FileRequestHandler OnMappingFailed Gets or sets a FileRequestHandlerCallback that is called whenever the requested URL path could not be mapped to any file or directory. The default is ThrowNotFound(IHttpContext, MappedResourceInfo) . Declaration public FileRequestHandlerCallback OnMappingFailed { get; set; } Property Value Type Description FileRequestHandlerCallback See Also FileRequestHandler OnMethodNotAllowed Gets or sets a FileRequestHandlerCallback that is called whenever the requested URL path has been mapped to a file or directory, but the request's HTTP method is neither GET nor HEAD . The default is ThrowMethodNotAllowed(IHttpContext, MappedResourceInfo) . Declaration public FileRequestHandlerCallback OnMethodNotAllowed { get; set; } Property Value Type Description FileRequestHandlerCallback See Also FileRequestHandler Provider Gets the IFileProvider interface that provides access to actual files and directories served by this module. Declaration public IFileProvider Provider { get; } Property Value Type Description IFileProvider Methods AddCustomMimeType(String, String) Adds a custom association between a file extension and a MIME type. Declaration public void AddCustomMimeType(string extension, string mimeType) Parameters Type Name Description String extension The file extension to associate to mimeType . String mimeType The MIME type to associate to extension . ClearCache() Clears the part of Cache used by this module. Declaration public void ClearCache() Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the FileModule class. Declaration protected void Finalize() GetMimeType(String) Gets the MIME type associated to a file extension. Declaration public string GetMimeType(string extension) Parameters Type Name Description String extension The file extension for which a corresponding MIME type is wanted. Returns Type Description String The MIME type corresponding to extension , if one is found; otherwise, null . OnBeforeLockConfiguration() Declaration protected override void OnBeforeLockConfiguration() OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) OnStart(CancellationToken) Called when a module is started, immediately before locking the module's configuration. Declaration protected override void OnStart(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Overrides WebModuleBase.OnStart(CancellationToken) PreferCompression(String, Boolean) Indicates whether to prefer compression when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public void PreferCompression(string mimeType, bool preferCompression) Parameters Type Name Description String mimeType The MIME type or media range. Boolean preferCompression true to prefer compression; otherwise, false . TryDetermineCompression(String, out Boolean) Attempts to determine whether compression should be preferred when negotiating content encoding for a response with the specified content type. Declaration public bool TryDetermineCompression(string mimeType, out bool preferCompression) Parameters Type Name Description String mimeType The MIME type to check. Boolean preferCompression When this method returns true , a value indicating whether compression should be preferred. This parameter is passed uninitialized. Returns Type Description Boolean true if a value is found for mimeType ; otherwise, false . Implements IWebModuleImpl IWebModule IDisposable IMimeTypeCustomizer IMimeTypeProvider See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileModuleExtensions.html": {
    "href": "api/EmbedIO.Files.FileModuleExtensions.html",
    "title": "Class FileModuleExtensions | EmbedIO",
    "keywords": "Class FileModuleExtensions Provides extension methods for FileModule and derived classes. Inheritance Object FileModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public static class FileModuleExtensions Methods HandleDirectoryNotListable<TModule>(TModule, FileRequestHandlerCallback) Sets a FileRequestHandlerCallback that is called by a module whenever the requested URL path has been mapped to a directory, but directory listing has been disabled. Declaration public static TModule HandleDirectoryNotListable<TModule>(this TModule this, FileRequestHandlerCallback callback) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. FileRequestHandlerCallback callback The method to call. Returns Type Description TModule this with its OnDirectoryNotListable property set to callback . Type Parameters Name Description TModule The type of the module on which this method is called. See Also OnDirectoryNotListable FileRequestHandler HandleMappingFailed<TModule>(TModule, FileRequestHandlerCallback) Sets a FileRequestHandlerCallback that is called by a module whenever the requested URL path could not be mapped to any file or directory. Declaration public static TModule HandleMappingFailed<TModule>(this TModule this, FileRequestHandlerCallback callback) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. FileRequestHandlerCallback callback The method to call. Returns Type Description TModule this with its OnMappingFailed property set to callback . Type Parameters Name Description TModule The type of the module on which this method is called. See Also OnMappingFailed FileRequestHandler HandleMethodNotAllowed<TModule>(TModule, FileRequestHandlerCallback) Sets a FileRequestHandlerCallback that is called by a module whenever the requested URL path has been mapped to a file or directory, but the request's HTTP method is neither GET nor HEAD . Declaration public static TModule HandleMethodNotAllowed<TModule>(this TModule this, FileRequestHandlerCallback callback) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. FileRequestHandlerCallback callback The method to call. Returns Type Description TModule this with its OnMethodNotAllowed property set to callback . Type Parameters Name Description TModule The type of the module on which this method is called. See Also OnMethodNotAllowed FileRequestHandler WithCache<TModule>(TModule, FileCache) Sets the FileCache used by a module to store hashes and, optionally, file contents and rendered directory listings. Declaration public static TModule WithCache<TModule>(this TModule this, FileCache value) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. FileCache value An instance of FileCache . Returns Type Description TModule this with its Cache property set to value . Type Parameters Name Description TModule The type of the module on which this method is called. See Also Cache WithContentCaching<TModule>(TModule) Enables caching of file contents and directory listings on a module. Declaration public static TModule WithContentCaching<TModule>(this TModule this) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Returns Type Description TModule this with its ContentCaching property set to true . Type Parameters Name Description TModule The type of the module on which this method is called. See Also ContentCaching WithContentCaching<TModule>(TModule, Boolean) Sets a value indicating whether a module caches the contents of files and directory listings. Declaration public static TModule WithContentCaching<TModule>(this TModule this, bool value) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Boolean value true to enable caching of contents; false to disable it. Returns Type Description TModule this with its ContentCaching property set to value . Type Parameters Name Description TModule The type of the module on which this method is called. See Also ContentCaching WithContentCaching<TModule>(TModule, Int32, Int32) Enables caching of file contents and directory listings on a module. Declaration public static TModule WithContentCaching<TModule>(this TModule this, int maxFileSizeKb, int maxSizeKb) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Int32 maxFileSizeKb true sets the maximum size of a single cached file in kilobytes Int32 maxSizeKb true sets the maximum total size of cached data in kilobytes Returns Type Description TModule this with its ContentCaching property set to true . Type Parameters Name Description TModule The type of the module on which this method is called. See Also ContentCaching WithDefaultDocument<TModule>(TModule, String) Sets the name of the default document served, if it exists, instead of a directory listing when the path of a requested URL maps to a directory. Declaration public static TModule WithDefaultDocument<TModule>(this TModule this, string value) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. String value The name of the default document. Returns Type Description TModule this with its DefaultDocument property set to value . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DefaultDocument WithDefaultExtension<TModule>(TModule, String) Sets the default extension appended to requested URL paths that do not map to any file or directory. Declaration public static TModule WithDefaultExtension<TModule>(this TModule this, string value) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. String value The default extension. Returns Type Description TModule this with its DefaultExtension property set to value . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DefaultExtension WithDirectoryLister<TModule>(TModule, IDirectoryLister) Sets the IDirectoryLister interface used to generate directory listing in a module. Declaration public static TModule WithDirectoryLister<TModule>(this TModule this, IDirectoryLister value) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. IDirectoryLister value An IDirectoryLister interface, or null to disable the generation of directory listings. Returns Type Description TModule this with its DirectoryLister property set to value . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DirectoryLister WithoutContentCaching<TModule>(TModule) Disables caching of file contents and directory listings on a module. Declaration public static TModule WithoutContentCaching<TModule>(this TModule this) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Returns Type Description TModule this with its ContentCaching property set to false . Type Parameters Name Description TModule The type of the module on which this method is called. See Also ContentCaching WithoutDefaultDocument<TModule>(TModule) Sets the name of the default document to null . Declaration public static TModule WithoutDefaultDocument<TModule>(this TModule this) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Returns Type Description TModule this with its DefaultDocument property set to null . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DefaultDocument WithoutDefaultExtension<TModule>(TModule) Sets the default extension to null . Declaration public static TModule WithoutDefaultExtension<TModule>(this TModule this) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Returns Type Description TModule this with its DefaultExtension property set to null . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DefaultExtension WithoutDirectoryLister<TModule>(TModule) Sets a module's DirectoryLister property to null , disabling the generation of directory listings. Declaration public static TModule WithoutDirectoryLister<TModule>(this TModule this) where TModule : FileModule Parameters Type Name Description TModule this The module on which this method is called. Returns Type Description TModule this with its DirectoryLister property set to null . Type Parameters Name Description TModule The type of the module on which this method is called. See Also DirectoryLister Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileRequestHandler.html": {
    "href": "api/EmbedIO.Files.FileRequestHandler.html",
    "title": "Class FileRequestHandler | EmbedIO",
    "keywords": "Class FileRequestHandler Provides standard handler callbacks for FileModule . Inheritance Object FileRequestHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public static class FileRequestHandler Methods PassThrough(IHttpContext, MappedResourceInfo) Unconditionally passes a request down the module chain. Declaration public static Task PassThrough(IHttpContext context, MappedResourceInfo info) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. MappedResourceInfo info If the requested path has been successfully mapped to a resource (file or directory), the result of the mapping; otherwise, null . Returns Type Description Task This method never returns; it throws an exception instead. ThrowMethodNotAllowed(IHttpContext, MappedResourceInfo) Unconditionally sends a 405 Method Not Allowed response. Declaration public static Task ThrowMethodNotAllowed(IHttpContext context, MappedResourceInfo info) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. MappedResourceInfo info If the requested path has been successfully mapped to a resource (file or directory), the result of the mapping; otherwise, null . Returns Type Description Task This method never returns; it throws a HttpException instead. ThrowNotFound(IHttpContext, MappedResourceInfo) Unconditionally sends a 404 Not Found response. Declaration public static Task ThrowNotFound(IHttpContext context, MappedResourceInfo info) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. MappedResourceInfo info If the requested path has been successfully mapped to a resource (file or directory), the result of the mapping; otherwise, null . Returns Type Description Task This method never returns; it throws a HttpException instead. ThrowUnauthorized(IHttpContext, MappedResourceInfo) Unconditionally sends a 403 Unauthorized response. Declaration public static Task ThrowUnauthorized(IHttpContext context, MappedResourceInfo info) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. MappedResourceInfo info If the requested path has been successfully mapped to a resource (file or directory), the result of the mapping; otherwise, null . Returns Type Description Task This method never returns; it throws a HttpException instead. See Also FileRequestHandlerCallback Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileRequestHandlerCallback.html": {
    "href": "api/EmbedIO.Files.FileRequestHandlerCallback.html",
    "title": "Delegate FileRequestHandlerCallback | EmbedIO",
    "keywords": "Delegate FileRequestHandlerCallback A callback used to handle a request in FileModule . Namespace : EmbedIO.Files Syntax public delegate Task FileRequestHandlerCallback(IHttpContext context, MappedResourceInfo info); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. MappedResourceInfo info If the requested path has been successfully mapped to a resource (file or directory), the result of the mapping; otherwise, null . Returns Type Description Task A representing the ongoing operation. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.FileSystemProvider.html": {
    "href": "api/EmbedIO.Files.FileSystemProvider.html",
    "title": "Class FileSystemProvider | EmbedIO",
    "keywords": "Class FileSystemProvider Provides access to the local file system to a FileModule . Inheritance Object FileSystemProvider Implements IFileProvider Namespace : EmbedIO.Files Syntax public class FileSystemProvider : IDisposable, IFileProvider Constructors FileSystemProvider(String, Boolean) Initializes a new instance of the FileSystemProvider class. Declaration public FileSystemProvider(string fileSystemPath, bool isImmutable) Parameters Type Name Description String fileSystemPath The file system path. Boolean isImmutable true if files and directories in fileSystemPath are not expected to change during a web server's lifetime; false otherwise. Remarks OSX doesn't support , the parameter isImmutable will be always true . Properties FileSystemPath Gets the file system path from which files are retrieved. Declaration public string FileSystemPath { get; } Property Value Type Description String IsImmutable Gets a value indicating whether the files and directories provided by this instance will never change. Declaration public bool IsImmutable { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the FileSystemProvider class. Declaration protected void Finalize() GetDirectoryEntries(String, IMimeTypeProvider) Returns an enumeration of the entries of a directory. Declaration public IEnumerable<MappedResourceInfo> GetDirectoryEntries(string providerPath, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String providerPath The provider-specific path for the directory. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of files. Returns Type Description IEnumerable < MappedResourceInfo > An enumeration of MappedResourceInfo objects identifying the entries in the directory identified by providerPath . MapUrlPath(String, IMimeTypeProvider) Maps a URL path to a provider-specific path. Declaration public MappedResourceInfo MapUrlPath(string path, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String path The URL path. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of a file. Returns Type Description MappedResourceInfo A provider-specific path identifying a file or directory, or null if this instance cannot provide a resource associated to path . OpenFile(String) Opens a file for reading. Declaration public Stream OpenFile(string providerPath) Parameters Type Name Description String providerPath The provider-specific path for the file. Returns Type Description Stream A readable of the file's contents. Start(CancellationToken) Signals a file provider that the web server is starting. Declaration public void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Events ResourceChanged Occurs when a file or directory provided by this instance is modified or removed. The event's parameter is the provider-specific path of the resource that changed. Declaration public event Action<string>? ResourceChanged Event Type Type Description Nullable < Action < String >> Implements IFileProvider See Also IFileProvider Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.html": {
    "href": "api/EmbedIO.Files.html",
    "title": "Namespace EmbedIO.Files | EmbedIO",
    "keywords": "Namespace EmbedIO.Files Classes DirectoryLister Provides standard directory listers for FileModule . FileCache A cache where one or more instances of FileModule can store hashes and file contents. FileModule A module serving files and directory listings from an IFileProvider . FileModuleExtensions Provides extension methods for FileModule and derived classes. FileRequestHandler Provides standard handler callbacks for FileModule . FileSystemProvider Provides access to the local file system to a FileModule . MappedResourceInfo Contains information about a resource served via an IFileProvider . ResourceFileProvider Provides access to embedded resources to a FileModule . ZipFileProvider Provides access to files contained in a .zip file to a FileModule . Interfaces IDirectoryLister Represents an object that can render a directory listing to a stream. IFileProvider Represents an object that can provide files and/or directories to be served by a FileModule . Delegates FileRequestHandlerCallback A callback used to handle a request in FileModule . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.IDirectoryLister.html": {
    "href": "api/EmbedIO.Files.IDirectoryLister.html",
    "title": "Interface IDirectoryLister | EmbedIO",
    "keywords": "Interface IDirectoryLister Represents an object that can render a directory listing to a stream. Namespace : EmbedIO.Files Syntax public interface IDirectoryLister Properties ContentType Gets the MIME type of generated directory listings. Declaration string ContentType { get; } Property Value Type Description String Methods ListDirectoryAsync(MappedResourceInfo, String, IEnumerable<MappedResourceInfo>, Stream, CancellationToken) Asynchronously generate a directory listing. Declaration Task ListDirectoryAsync(MappedResourceInfo info, string absolutePath, IEnumerable<MappedResourceInfo> entries, Stream stream, CancellationToken cancellationToken) Parameters Type Name Description MappedResourceInfo info A MappedResourceInfo containing information about the directory which is to be listed. String absolutePath The absolute URL path that was mapped to info . IEnumerable < MappedResourceInfo > entries An enumeration of the entries in the directory represented by info . Stream stream A to which the directory listing must be written. CancellationToken cancellationToken A used to cancel the operation. Returns Type Description Task A representing the ongoing operation. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.IFileProvider.html": {
    "href": "api/EmbedIO.Files.IFileProvider.html",
    "title": "Interface IFileProvider | EmbedIO",
    "keywords": "Interface IFileProvider Represents an object that can provide files and/or directories to be served by a FileModule . Namespace : EmbedIO.Files Syntax public interface IFileProvider Properties IsImmutable Gets a value indicating whether the files and directories provided by this instance will never change. Declaration bool IsImmutable { get; } Property Value Type Description Boolean Methods GetDirectoryEntries(String, IMimeTypeProvider) Returns an enumeration of the entries of a directory. Declaration IEnumerable<MappedResourceInfo> GetDirectoryEntries(string providerPath, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String providerPath The provider-specific path for the directory. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of files. Returns Type Description IEnumerable < MappedResourceInfo > An enumeration of MappedResourceInfo objects identifying the entries in the directory identified by providerPath . MapUrlPath(String, IMimeTypeProvider) Maps a URL path to a provider-specific path. Declaration MappedResourceInfo MapUrlPath(string path, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String path The URL path. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of a file. Returns Type Description MappedResourceInfo A provider-specific path identifying a file or directory, or null if this instance cannot provide a resource associated to path . OpenFile(String) Opens a file for reading. Declaration Stream OpenFile(string providerPath) Parameters Type Name Description String providerPath The provider-specific path for the file. Returns Type Description Stream A readable of the file's contents. Start(CancellationToken) Signals a file provider that the web server is starting. Declaration void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Events ResourceChanged Occurs when a file or directory provided by this instance is modified or removed. The event's parameter is the provider-specific path of the resource that changed. Declaration event Action<string>? ResourceChanged Event Type Type Description Nullable < Action < String >> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.MappedResourceInfo.html": {
    "href": "api/EmbedIO.Files.MappedResourceInfo.html",
    "title": "Class MappedResourceInfo | EmbedIO",
    "keywords": "Class MappedResourceInfo Contains information about a resource served via an IFileProvider . Inheritance Object MappedResourceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public sealed class MappedResourceInfo Properties ContentType If IsDirectory is false , gets a MIME type describing the kind of contents of the file. If IsDirectory is true , this property is always null . Declaration public string ContentType { get; } Property Value Type Description String IsDirectory Gets a value indicating whether this instance represents a directory. Declaration public bool IsDirectory { get; } Property Value Type Description Boolean IsFile Gets a value indicating whether this instance represents a file. Declaration public bool IsFile { get; } Property Value Type Description Boolean LastModifiedUtc Gets the UTC date and time of the last modification made to the resource. Declaration public DateTime LastModifiedUtc { get; } Property Value Type Description DateTime Length If IsDirectory is false , gets the length of the file, expressed in bytes. If IsDirectory is true , this property is always zero. Declaration public long Length { get; } Property Value Type Description Int64 Name Gets the name of the resource, as it would appear in a directory listing. Declaration public string Name { get; } Property Value Type Description String Path Gets a unique, provider-specific path for the resource. Declaration public string Path { get; } Property Value Type Description String Methods ForDirectory(String, String, DateTime) Creates and returns a new instance of the MappedResourceInfo class, representing a directory. Declaration public static MappedResourceInfo ForDirectory(string path, string name, DateTime lastModifiedUtc) Parameters Type Name Description String path A unique, provider-specific path for the directory. String name The name of the directory, as it would appear in a directory listing. DateTime lastModifiedUtc The UTC date and time of the last modification made to the directory. Returns Type Description MappedResourceInfo A newly-constructed instance of MappedResourceInfo . ForFile(String, String, DateTime, Int64, String) Creates and returns a new instance of the MappedResourceInfo class, representing a file. Declaration public static MappedResourceInfo ForFile(string path, string name, DateTime lastModifiedUtc, long size, string contentType) Parameters Type Name Description String path A unique, provider-specific path for the file. String name The name of the file, as it would appear in a directory listing. DateTime lastModifiedUtc The UTC date and time of the last modification made to the file. Int64 size The length of the file, expressed in bytes. String contentType A MIME type describing the kind of contents of the file. Returns Type Description MappedResourceInfo A newly-constructed instance of MappedResourceInfo . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.ResourceFileProvider.html": {
    "href": "api/EmbedIO.Files.ResourceFileProvider.html",
    "title": "Class ResourceFileProvider | EmbedIO",
    "keywords": "Class ResourceFileProvider Provides access to embedded resources to a FileModule . Inheritance Object ResourceFileProvider Implements IFileProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Files Syntax public class ResourceFileProvider : IFileProvider Constructors ResourceFileProvider(Assembly, String) Initializes a new instance of the ResourceFileProvider class. Declaration public ResourceFileProvider(Assembly assembly, string pathPrefix) Parameters Type Name Description Assembly assembly The assembly where served files are contained as embedded resources. String pathPrefix A string to prepend to provider-specific paths to form the name of a manifest resource in assembly . Properties Assembly Gets the assembly where served files are contained as embedded resources. Declaration public Assembly Assembly { get; } Property Value Type Description Assembly IsImmutable Gets a value indicating whether the files and directories provided by this instance will never change. Declaration public bool IsImmutable { get; } Property Value Type Description Boolean PathPrefix Gets a string that is prepended to provider-specific paths to form the name of a manifest resource in Assembly . Declaration public string PathPrefix { get; } Property Value Type Description String Methods GetDirectoryEntries(String, IMimeTypeProvider) Returns an enumeration of the entries of a directory. Declaration public IEnumerable<MappedResourceInfo> GetDirectoryEntries(string providerPath, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String providerPath The provider-specific path for the directory. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of files. Returns Type Description IEnumerable < MappedResourceInfo > An enumeration of MappedResourceInfo objects identifying the entries in the directory identified by providerPath . MapUrlPath(String, IMimeTypeProvider) Maps a URL path to a provider-specific path. Declaration public MappedResourceInfo MapUrlPath(string path, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String path The URL path. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of a file. Returns Type Description MappedResourceInfo A provider-specific path identifying a file or directory, or null if this instance cannot provide a resource associated to path . OpenFile(String) Opens a file for reading. Declaration public Stream OpenFile(string providerPath) Parameters Type Name Description String providerPath The provider-specific path for the file. Returns Type Description Stream A readable of the file's contents. Start(CancellationToken) Signals a file provider that the web server is starting. Declaration public void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Events ResourceChanged Occurs when a file or directory provided by this instance is modified or removed. The event's parameter is the provider-specific path of the resource that changed. Declaration public event Action<string>? ResourceChanged Event Type Type Description Nullable < Action < String >> Implements IFileProvider See Also IFileProvider Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Files.ZipFileProvider.html": {
    "href": "api/EmbedIO.Files.ZipFileProvider.html",
    "title": "Class ZipFileProvider | EmbedIO",
    "keywords": "Class ZipFileProvider Provides access to files contained in a .zip file to a FileModule . Inheritance Object ZipFileProvider Implements IFileProvider Namespace : EmbedIO.Files Syntax public class ZipFileProvider : IDisposable, IFileProvider Constructors ZipFileProvider(Stream, Boolean) Initializes a new instance of the ZipFileProvider class. Declaration public ZipFileProvider(Stream stream, bool leaveOpen = false) Parameters Type Name Description Stream stream The stream that contains the archive. Boolean leaveOpen true to leave the stream open after the web server is disposed; otherwise, false . ZipFileProvider(String) Initializes a new instance of the ZipFileProvider class. Declaration public ZipFileProvider(string zipFilePath) Parameters Type Name Description String zipFilePath The zip file path. Properties IsImmutable Gets a value indicating whether the files and directories provided by this instance will never change. Declaration public bool IsImmutable { get; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the ZipFileProvider class. Declaration protected void Finalize() GetDirectoryEntries(String, IMimeTypeProvider) Returns an enumeration of the entries of a directory. Declaration public IEnumerable<MappedResourceInfo> GetDirectoryEntries(string providerPath, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String providerPath The provider-specific path for the directory. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of files. Returns Type Description IEnumerable < MappedResourceInfo > An enumeration of MappedResourceInfo objects identifying the entries in the directory identified by providerPath . MapUrlPath(String, IMimeTypeProvider) Maps a URL path to a provider-specific path. Declaration public MappedResourceInfo MapUrlPath(string path, IMimeTypeProvider mimeTypeProvider) Parameters Type Name Description String path The URL path. IMimeTypeProvider mimeTypeProvider An IMimeTypeProvider interface to use for determining the MIME type of a file. Returns Type Description MappedResourceInfo A provider-specific path identifying a file or directory, or null if this instance cannot provide a resource associated to path . OpenFile(String) Opens a file for reading. Declaration public Stream OpenFile(string providerPath) Parameters Type Name Description String providerPath The provider-specific path for the file. Returns Type Description Stream A readable of the file's contents. Start(CancellationToken) Signals a file provider that the web server is starting. Declaration public void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Events ResourceChanged Occurs when a file or directory provided by this instance is modified or removed. The event's parameter is the provider-specific path of the resource that changed. Declaration public event Action<string>? ResourceChanged Event Type Type Description Nullable < Action < String >> Implements IFileProvider See Also IFileProvider Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.html": {
    "href": "api/EmbedIO.html",
    "title": "Namespace EmbedIO | EmbedIO",
    "keywords": "Namespace EmbedIO Classes CompressionMethodNames Exposes constants for possible values of the Content-Encoding HTTP header. ExceptionHandler Provides standard handlers for unhandled exceptions at both module and server level. HttpContextExtensions Provides extension methods for types implementing IHttpContext . HttpException When thrown, breaks the request handling control flow and sends an error response to the client. HttpExceptionHandler Provides standard handlers for HTTP exceptions at both module and server level. HttpHeaderNames Exposes known HTTP header names. HttpNotAcceptableException When thrown, breaks the request handling control flow and sends a redirection response to the client. HttpRangeNotSatisfiableException When thrown, breaks the request handling control flow and sends a redirection response to the client. HttpRedirectException When thrown, breaks the request handling control flow and sends a redirection response to the client. HttpRequestExtensions Provides extension methods for types implementing IHttpRequest . HttpResponseExtensions Provides extension methods for types implementing IHttpResponse . HttpStatusDescription Provides standard HTTP status descriptions. Data contained in this class comes from the following sources: RFC7231 Section 6 (HTTP/1.1 Semantics and Content) RFC6585 (Additional HTTP Status Codes) RFC2774 Section 7 (An HTTP Extension Framework) RFC7540 Section 9.1.2 (HTTP/2) RFC4918 Section 11 (WebDAV) RFC5842 Section 7 (Binding Extensions to WebDAV) RFC7538 Section 3 (HTTP Status Code 308) RFC3229 Section 10.4.1 (Delta encoding in HTTP) RFC8297 Section 2 (Early Hints) RFC7725 Section 3 (HTTP-status-451) RFC2295 Section 8.1 (Transparent Content Negotiation) MimeType Provides constants for commonly-used MIME types and association between file extensions and MIME types. MimeTypeCustomizerExtensions Provides extension methods for types implementing IMimeTypeCustomizer . ModuleGroup Groups modules under a common base URL path. The BaseRoute property of modules contained in a ModuleGroup is relative to the ModuleGroup 's BaseRoute property. For example, given the following code: new ModuleGroup(\"/download\") .WithStaticFilesAt(\"/docs\", \"/var/my/documents\"); files contained in the /var/my/documents folder will be available to clients under the /download/docs/ URL. RequestDeserializer Provides standard request deserialization callbacks. RequestHandler Provides standard request handler callbacks. ResponseSerializer Provides standard response serializer callbacks. WebModuleBase Base class to define web modules. Although it is not required that a module inherits from this class, it provides some useful features: validation and immutability of the BaseRoute property, which are of paramount importance for the correct functioning of a web server; support for configuration locking upon web server startup (see the property and the method); a basic implementation of the Start(CancellationToken) method for modules that do not need to do anything upon web server startup; implementation of the OnUnhandledException callback property. WebModuleContainer Provides useful constants for dealing with module containers. WebModuleContainerExtensions Contains extension methods for types implementing IWebModuleContainer . WebModuleExtensions Provides extension methods for types implementing IWebModule . WebServer EmbedIO's web server. This is the default implementation of IWebServer . This class also contains some useful constants related to EmbedIO's internal working. WebServerBase<TOptions> Base class for IWebServer implementations. WebServerExtensions Provides extension methods for types implementing IWebServer . WebServerOptions Contains options for configuring an instance of WebServer . WebServerOptionsBase Base class for web server options. WebServerOptionsBaseExtensions Provides extension methods for classes derived from WebServerOptionsBase . WebServerOptionsExtensions Provides extension methods for WebServerOptions . WebServerStateChangedEventArgs Represents event arguments whenever the state of a web server changes. Interfaces ICookieCollection Interface for Cookie Collection. IHttpContext Represents the context of a HTTP(s) request being handled by a web server. IHttpContextHandler Represents an object that can handle a HTTP context. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. IHttpContextImpl Represents a HTTP context implementation, i.e. a HTTP context as seen internally by EmbedIO. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in the implementation of EmbedIO plug-ins (e.g. modules). IHttpException Represents an exception that results in a particular HTTP response to be sent to the client. This interface is meant to be implemented by classes derived from . Either as message or a data object can be attached to the exception; which one, if any, is sent to the client will depend upon the handler used to send the response. IHttpListener Interface to create a HTTP Listener. IHttpMessage Represents a HTTP request or response. IHttpRequest Interface to create a HTTP Request. IHttpResponse Interface to create a HTTP Response. IMimeTypeCustomizer Represents an object that can set information about specific MIME types and media ranges, to be later retrieved via an IMimeTypeProvider interface. IMimeTypeProvider Represents an object that contains information on specific MIME types and media ranges. IWebModule Represents a module. IWebModuleContainer Represents an object that contains a collection of IWebModule interfaces. IWebModuleImpl Represents a module implementation, i.e. a module as seen internally by EmbedIO. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in the implementation of EmbedIO plug-ins (e.g. modules). IWebServer Represents a web server. The basic usage of a web server is as follows: add modules to the Modules collection; set a SessionManager if needed; call RunAsync(CancellationToken) to respond to incoming requests. Enums CompressionMethod Specifies the compression method used to compress a message on the WebSocket connection. HttpListenerMode Defines the HTTP listeners available for use in a WebServer . HttpVerb Enumerates the different HTTP Verbs. WebServerState Represents the state of a web server. Delegates ExceptionHandlerCallback A callback used to provide information about an unhandled exception occurred while processing a request. HttpExceptionHandlerCallback A callback used to build the contents of the response for an IHttpException . RequestDeserializerCallback<TData> A callback used to deserialize an HTTP request body. RequestHandlerCallback A callback used to handle a request. ResponseSerializerCallback A callback used to serialize data to a HTTP response. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpContextExtensions.html": {
    "href": "api/EmbedIO.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | EmbedIO",
    "keywords": "Class HttpContextExtensions Provides extension methods for types implementing IHttpContext . Inheritance Object HttpContextExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpContextExtensions Methods GetImplementation(IHttpContext) Gets the underlying IHttpContextImpl interface of an IHttpContext . This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to fulfill very specific needs in the development of plug-ins (modules, etc.) for EmbedIO. Declaration public static IHttpContextImpl GetImplementation(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. Returns Type Description IHttpContextImpl The underlying IHttpContextImpl interface representing the HTTP context implementation. GetItem<T>(IHttpContext, Object) Gets the item associated with the specified key. Declaration public static T GetItem<T>(this IHttpContext this, object key) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Object key The key whose value to get from the Items dictionary. Returns Type Description T The item associated with the specified key, if the key is found in Items and the associated value is of type T ; otherwise, the default value for T . Type Parameters Name Description T The desired type of the item. GetRequestBodyAsByteArrayAsync(IHttpContext) Asynchronously retrieves the request body as an array of langword_csharp_byte s. Declaration public static Task<byte[]> GetRequestBodyAsByteArrayAsync(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Task < Byte []> A Task , representing the ongoing operation, whose result will be an array of Byte s containing the request body. GetRequestBodyAsMemoryStreamAsync(IHttpContext) Asynchronously buffers the request body into a read-only . Declaration public static Task<MemoryStream> GetRequestBodyAsMemoryStreamAsync(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Task < MemoryStream > A Task , representing the ongoing operation, whose result will be a read-only containing the request body. GetRequestBodyAsStringAsync(IHttpContext) Asynchronously retrieves the request body as a string. Declaration public static Task<string> GetRequestBodyAsStringAsync(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Task < String > A Task , representing the ongoing operation, whose result will be a langword_csharp_string representation of the request body. GetRequestDataAsync<TData>(IHttpContext) Asynchronously deserializes a request body, using the default request deserializer. As of EmbedIO version 3.0, the default response serializer has the same behavior of JSON request parsing methods of version 2. Declaration public static Task<TData> GetRequestDataAsync<TData>(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Task <TData> A Task , representing the ongoing operation, whose result will be the deserialized data. Type Parameters Name Description TData The expected type of the deserialized data. GetRequestDataAsync<TData>(IHttpContext, RequestDeserializerCallback<TData>) Asynchronously deserializes a request body, using the specified request deserializer. Declaration public static Task<TData> GetRequestDataAsync<TData>(this IHttpContext this, RequestDeserializerCallback<TData> deserializer) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. RequestDeserializerCallback <TData> deserializer A RequestDeserializerCallback<TData> used to deserialize the request body. Returns Type Description Task <TData> A Task , representing the ongoing operation, whose result will be the deserialized data. Type Parameters Name Description TData The expected type of the deserialized data. GetRequestFormDataAsync(IHttpContext) Asynchronously parses a request body in application/x-www-form-urlencoded format. Declaration public static Task<NameValueCollection> GetRequestFormDataAsync(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Task < NameValueCollection > A Task , representing the ongoing operation, whose result will be a read-only of form field names and values. Remarks This method may safely be called more than once for the same IHttpContext : it will return the same collection instead of trying to parse the request body again. GetRequestQueryData(IHttpContext) Parses a request URL query. Note that this is different from getting the QueryString property, in that fields without an equal sign are treated as if they have an empty value, instead of their keys being grouped as values of the null key. Declaration public static NameValueCollection GetRequestQueryData(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description NameValueCollection A read-only . Remarks This method may safely be called more than once for the same IHttpContext : it will return the same collection instead of trying to parse the request body again. OpenRequestStream(IHttpContext) Wraps the request input stream and returns a that can be used directly. Decompression of compressed request bodies is implemented if specified in the web server's options. Declaration public static Stream OpenRequestStream(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description Stream A that can be used to write response data. This stream MUST be disposed when finished writing. See Also OpenRequestText(IHttpContext) SupportCompressedRequests OpenRequestText(IHttpContext) Wraps the request input stream and returns a that can be used directly. Decompression of compressed request bodies is implemented if specified in the web server's options. If the request does not specify a content encoding, UTF-8 is used by default. Declaration public static TextReader OpenRequestText(this IHttpContext this) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Returns Type Description TextReader A that can be used to read the request body as text. This reader MUST be disposed when finished reading. See Also OpenRequestStream(IHttpContext) SupportCompressedRequests OpenResponseStream(IHttpContext, Boolean, Boolean) Wraps the response output stream and returns a that can be used directly. Optional buffering is applied, so that the response may be sent as one (thereby properly setting the Content-Length header) instead of using chunked transfer. Proactive negotiation is performed to select the best compression method supported by the client. Declaration public static Stream OpenResponseStream(this IHttpContext this, bool buffered = false, bool preferCompression = true) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Boolean buffered If set to true , the data to send will be collected in memory and sent all at once when the returned is disposed, setting the Content-Length response header; if set to false (the default), chunked transfer will be used. Boolean preferCompression true if sending compressed data is preferred over sending non-compressed data; otherwise, false . Returns Type Description Stream A that can be used to write response data. This stream MUST be disposed when finished writing. See Also OpenResponseText(IHttpContext, Nullable<Encoding>, Boolean, Boolean) OpenResponseText(IHttpContext, Nullable<Encoding>, Boolean, Boolean) Wraps the response output stream and returns a that can be used directly. Optional buffering is applied, so that the response may be sent as one (thereby properly setting the Content-Length header) instead of using chunked transfer. Proactive negotiation is performed to select the best compression method supported by the client. Declaration public static TextWriter OpenResponseText(this IHttpContext this, Encoding? encoding = default(Encoding? ), bool buffered = false, bool preferCompression = true) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Nullable < Encoding > encoding The to use to convert text to data bytes. By default, UTF-8 is used. Boolean buffered If set to true , sent data is collected in a and sent all at once when the returned is disposed; if set to false (the default), chunked transfer will be used. Boolean preferCompression true if sending compressed data is preferred over sending non-compressed data; otherwise, false . Returns Type Description TextWriter A that can be used to write response data. This writer MUST be disposed when finished writing. See Also OpenResponseStream(IHttpContext, Boolean, Boolean) Redirect(IHttpContext, String, Int32) Sets a redirection status code and adds a Location header to the response. Declaration public static void Redirect(this IHttpContext this, string location, int statusCode = default(int)) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. String location The URL to which the user agent should be redirected. Int32 statusCode The status code to set on the response. SendDataAsync(IHttpContext, ResponseSerializerCallback, Object) Asynchronously sends serialized data as a response, using the specified response serializer. As of EmbedIO version 3.0, the default response serializer has the same behavior of JSON response methods of version 2. Declaration public static Task SendDataAsync(this IHttpContext this, ResponseSerializerCallback serializer, object data) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. ResponseSerializerCallback serializer A ResponseSerializerCallback used to prepare the response. Object data The data to serialize. Returns Type Description Task A representing the ongoing operation. See Also SendDataAsync(IHttpContext, ResponseSerializerCallback, Object) Default SendDataAsync(IHttpContext, Object) Asynchronously sends serialized data as a response, using the default response serializer. As of EmbedIO version 3.0, the default response serializer has the same behavior of JSON response methods of version 2. Declaration public static Task SendDataAsync(this IHttpContext this, object data) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. Object data The data to serialize. Returns Type Description Task A representing the ongoing operation. See Also SendDataAsync(IHttpContext, ResponseSerializerCallback, Object) Default SendStandardHtmlAsync(IHttpContext, Int32) Asynchronously sends a standard HTML response for the specified status code. Declaration public static Task SendStandardHtmlAsync(this IHttpContext this, int statusCode) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. Int32 statusCode The HTTP status code of the response. Returns Type Description Task A representing the ongoing operation. SendStandardHtmlAsync(IHttpContext, Int32, Nullable<Action<TextWriter>>) Asynchronously sends a standard HTML response for the specified status code. Declaration public static Task SendStandardHtmlAsync(this IHttpContext this, int statusCode, Action<TextWriter>? writeAdditionalHtml) Parameters Type Name Description IHttpContext this The IHttpContext interface on which this method is called. Int32 statusCode The HTTP status code of the response. Nullable < Action < TextWriter >> writeAdditionalHtml A callback function that may write additional HTML code to a representing the response output. If not null , the callback is called immediately before closing the HTML body tag. Returns Type Description Task A representing the ongoing operation. See Also SendStandardHtmlAsync(IHttpContext, Int32) SendStringAsync(IHttpContext, String, String, Encoding) Asynchronously sends a string as response. Declaration public static Task SendStringAsync(this IHttpContext this, string content, string contentType, Encoding encoding) Parameters Type Name Description IHttpContext this The IHttpResponse interface on which this method is called. String content The response content. String contentType The MIME type of the content. If null , the content type will not be set. Encoding encoding The to use. Returns Type Description Task A representing the ongoing operation. TryGetItem<T>(IHttpContext, Object, out T) Gets the item associated with the specified key. Declaration public static bool TryGetItem<T>(this IHttpContext this, object key, out T value) Parameters Type Name Description IHttpContext this The IHttpContext on which this method is called. Object key The key whose value to get from the Items dictionary. T value When this method returns, the item associated with the specified key, if the key is found in Items and the associated value is of type T ; otherwise, the default value for T . This parameter is passed uninitialized. Returns Type Description Boolean true if the item is found and is of type T ; otherwise, false . Type Parameters Name Description T The desired type of the item. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpException.html": {
    "href": "api/EmbedIO.HttpException.html",
    "title": "Class HttpException | EmbedIO",
    "keywords": "Class HttpException When thrown, breaks the request handling control flow and sends an error response to the client. Inheritance Object HttpException HttpNotAcceptableException HttpRangeNotSatisfiableException HttpRedirectException Implements IHttpException Namespace : EmbedIO Syntax public class HttpException : Exception, IHttpException Constructors HttpException(HttpStatusCode) Initializes a new instance of the HttpException class, with no message to include in the response. Declaration public HttpException(HttpStatusCode statusCode) Parameters Type Name Description HttpStatusCode statusCode The status code to set on the response. HttpException(HttpStatusCode, String) Initializes a new instance of the HttpException class, with a message to include in the response. Declaration public HttpException(HttpStatusCode statusCode, string message) Parameters Type Name Description HttpStatusCode statusCode The status code to set on the response. String message A message to include in the response as plain text. HttpException(HttpStatusCode, String, Object) Initializes a new instance of the HttpException class, with a message and a data object to include in the response. Declaration public HttpException(HttpStatusCode statusCode, string message, object data) Parameters Type Name Description HttpStatusCode statusCode The status code to set on the response. String message A message to include in the response as plain text. Object data The data object to include in the response. HttpException(Int32) Initializes a new instance of the HttpException class, with no message to include in the response. Declaration public HttpException(int statusCode) Parameters Type Name Description Int32 statusCode The status code to set on the response. HttpException(Int32, String) Initializes a new instance of the HttpException class, with a message to include in the response. Declaration public HttpException(int statusCode, string message) Parameters Type Name Description Int32 statusCode The status code to set on the response. String message A message to include in the response as plain text. HttpException(Int32, String, Object) Initializes a new instance of the HttpException class, with a message and a data object to include in the response. Declaration public HttpException(int statusCode, string message, object data) Parameters Type Name Description Int32 statusCode The status code to set on the response. String message A message to include in the response as plain text. Object data The data object to include in the response. Properties DataObject Gets an object that can be serialized and included in the response triggered by a HTTP exception. Whether the object is actually sent to the client will depend upon the handler used to send the response. Declaration public object DataObject { get; } Property Value Type Description Object StatusCode Gets the response status code for a HTTP exception. Declaration public int StatusCode { get; } Property Value Type Description Int32 Methods BadRequest(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 400 Bad Request response to the client. Declaration public static HttpException BadRequest(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . Forbidden(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 403 Forbidden response to the client. Declaration public static HttpException Forbidden(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . InternalServerError(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 500 Internal Server Error response to the client. Declaration public static HttpException InternalServerError(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . MethodNotAllowed(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 405 Method Not Allowed response to the client. Declaration public static HttpException MethodNotAllowed(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . NotAcceptable() Returns a new instance of HttpNotAcceptableException that, when thrown, will break the request handling control flow and send a 406 Not Acceptable response to the client. Declaration public static HttpNotAcceptableException NotAcceptable() Returns Type Description HttpNotAcceptableException A newly-created HttpNotAcceptableException . See Also HttpNotAcceptableException() NotAcceptable(String) Returns a new instance of HttpNotAcceptableException that, when thrown, will break the request handling control flow and send a 406 Not Acceptable response to the client. Declaration public static HttpNotAcceptableException NotAcceptable(string vary) Parameters Type Name Description String vary A value, or a comma-separated list of values, to set the response's Vary header to. Returns Type Description HttpNotAcceptableException A newly-created HttpNotAcceptableException . See Also HttpNotAcceptableException(String) NotFound(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 404 Not Found response to the client. Declaration public static HttpException NotFound(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . PrepareResponse(IHttpContext) Sets necessary headers, as required by the nature of the HTTP exception (e.g. Location for HttpRedirectException ). Declaration public virtual void PrepareResponse(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the response. Remarks This method does nothing; there is no need to call base.PrepareResponse in overrides of this method. RangeNotSatisfiable() Returns a new instance of HttpRangeNotSatisfiableException that, when thrown, will break the request handling control flow and send a 416 Range Not Satisfiable response to the client. Declaration public static HttpRangeNotSatisfiableException RangeNotSatisfiable() Returns Type Description HttpRangeNotSatisfiableException A newly-created HttpRangeNotSatisfiableException . See Also HttpRangeNotSatisfiableException() RangeNotSatisfiable(Nullable<Int64>) Returns a new instance of HttpRangeNotSatisfiableException that, when thrown, will break the request handling control flow and send a 416 Range Not Satisfiable response to the client. Declaration public static HttpRangeNotSatisfiableException RangeNotSatisfiable(long? contentLength) Parameters Type Name Description Nullable < Int64 > contentLength The total length of the requested resource, expressed in bytes, or null to omit the Content-Range header in the response. Returns Type Description HttpRangeNotSatisfiableException A newly-created HttpRangeNotSatisfiableException . See Also HttpRangeNotSatisfiableException() Redirect(String) Returns a new instance of HttpRedirectException that, when thrown, will break the request handling control flow and redirect the client to the specified location, using response status code 302. Declaration public static HttpRedirectException Redirect(string location) Parameters Type Name Description String location The redirection target. Returns Type Description HttpRedirectException A newly-created HttpRedirectException . Redirect(String, HttpStatusCode) Returns a new instance of HttpRedirectException that, when thrown, will break the request handling control flow and redirect the client to the specified location, using the specified response status code. Declaration public static HttpRedirectException Redirect(string location, HttpStatusCode statusCode) Parameters Type Name Description String location The redirection target. HttpStatusCode statusCode One of the redirection status codes, to be set on the response. Returns Type Description HttpRedirectException A newly-created HttpRedirectException . Redirect(String, Int32) Returns a new instance of HttpRedirectException that, when thrown, will break the request handling control flow and redirect the client to the specified location, using the specified response status code. Declaration public static HttpRedirectException Redirect(string location, int statusCode) Parameters Type Name Description String location The redirection target. Int32 statusCode The status code to set on the response, in the range from 300 to 399. Returns Type Description HttpRedirectException A newly-created HttpRedirectException . Unauthorized(String, Object) Returns a new instance of HttpException that, when thrown, will break the request handling control flow and send a 401 Unauthorized response to the client. Declaration public static HttpException Unauthorized(string message = null, object data = null) Parameters Type Name Description String message A message to include in the response. Object data The data object to include in the response. Returns Type Description HttpException A newly-created HttpException . Explicit Interface Implementations IHttpException.Message Gets a message that can be included in the response triggered by a HTTP exception. Whether the message is actually sent to the client will depend upon the handler used to send the response. Declaration string IHttpException.Message { get; } Returns Type Description String Remarks Do not rely on to implement this property if you want to support null messages, because a default message will be supplied by the CLR at throw time when is null . Implements IHttpException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpExceptionHandler.html": {
    "href": "api/EmbedIO.HttpExceptionHandler.html",
    "title": "Class HttpExceptionHandler | EmbedIO",
    "keywords": "Class HttpExceptionHandler Provides standard handlers for HTTP exceptions at both module and server level. Inheritance Object HttpExceptionHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpExceptionHandler Remarks Where applicable, HTTP exception handlers defined in this class use the ContactInformation and IncludeStackTraces properties to customize their behavior. Fields Default The default handler used by WebServerBase<TOptions> . This is the same as HtmlResponse(IHttpContext, IHttpException) . Declaration public static readonly HttpExceptionHandlerCallback Default Field Value Type Description HttpExceptionHandlerCallback Methods DataResponse(ResponseSerializerCallback) Gets a HttpExceptionHandlerCallback that will serialize a HTTP exception's DataObject property and send it as a JSON response. Declaration public static HttpExceptionHandlerCallback DataResponse(ResponseSerializerCallback serializerCallback) Parameters Type Name Description ResponseSerializerCallback serializerCallback A ResponseSerializerCallback used to serialize data and send it to the client. Returns Type Description HttpExceptionHandlerCallback A HttpExceptionHandlerCallback . EmptyResponse(IHttpContext, IHttpException) Sends an empty response. Declaration public static Task EmptyResponse(IHttpContext context, IHttpException httpException) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. IHttpException httpException The HTTP exception. This parameter is ignore, because there is no possible use for it in an empty response. Returns Type Description Task A representing the ongoing operation. FullDataResponse(ResponseSerializerCallback) Gets a HttpExceptionHandlerCallback that will serialize a HTTP exception's Message and DataObject properties and send them as a JSON response. The response will be a JSON object with a message property and a data property. Declaration public static HttpExceptionHandlerCallback FullDataResponse(ResponseSerializerCallback serializerCallback) Parameters Type Name Description ResponseSerializerCallback serializerCallback A ResponseSerializerCallback used to serialize data and send it to the client. Returns Type Description HttpExceptionHandlerCallback A HttpExceptionHandlerCallback . HtmlResponse(IHttpContext, IHttpException) Sends a response with a HTML payload briefly describing the error, including contact information and/or a stack trace if specified via the ContactInformation and IncludeStackTraces properties, respectively. This handler does not use the DataObject property. Declaration public static Task HtmlResponse(IHttpContext context, IHttpException httpException) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. IHttpException httpException The HTTP exception. Returns Type Description Task A representing the ongoing operation. PlainTextResponse(IHttpContext, IHttpException) Sends a HTTP exception's Message property as a plain text response. This handler does not use the DataObject property. Declaration public static Task PlainTextResponse(IHttpContext context, IHttpException httpException) Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. IHttpException httpException The HTTP exception. Returns Type Description Task A representing the ongoing operation. See Also OnHttpException OnHttpException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpExceptionHandlerCallback.html": {
    "href": "api/EmbedIO.HttpExceptionHandlerCallback.html",
    "title": "Delegate HttpExceptionHandlerCallback | EmbedIO",
    "keywords": "Delegate HttpExceptionHandlerCallback A callback used to build the contents of the response for an IHttpException . Namespace : EmbedIO Syntax public delegate Task HttpExceptionHandlerCallback(IHttpContext context, IHttpException httpException); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. IHttpException httpException An IHttpException interface. Returns Type Description Task A representing the ongoing operation. Remarks When this delegate is called, the response's status code has already been set and the PrepareResponse(IHttpContext) method has already been called. The only thing left to do is preparing the response's content, according to the Message property. Any exception thrown by a handler (even a HTTP exception) will go unhandled: the web server will not crash, but processing of the request will be aborted, and the response will be flushed as-is. In other words, it is not a good ides to throw HttpException.NotFound() (or similar) from a handler. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpHeaderNames.html": {
    "href": "api/EmbedIO.HttpHeaderNames.html",
    "title": "Class HttpHeaderNames | EmbedIO",
    "keywords": "Class HttpHeaderNames Exposes known HTTP header names. Inheritance Object HttpHeaderNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpHeaderNames Remarks The constants in this class have been extracted from a list of known HTTP header names. The presence of a header name in this class is not a guarantee that EmbedIO supports, or even recognizes, it. Refer to the documentation for each module for information about supported headers. Fields Accept The Accept HTTP header. Declaration public const string Accept = \"Accept\" Field Value Type Description String AcceptCharset The Accept-Charset HTTP header. Declaration public const string AcceptCharset = \"Accept-Charset\" Field Value Type Description String AcceptEncoding The Accept-Encoding HTTP header. Declaration public const string AcceptEncoding = \"Accept-Encoding\" Field Value Type Description String AcceptLanguage The Accept-Language HTTP header. Declaration public const string AcceptLanguage = \"Accept-Language\" Field Value Type Description String AcceptPatch The Accept-Patch HTTP header. Declaration public const string AcceptPatch = \"Accept-Patch\" Field Value Type Description String AcceptRanges The Accept-Ranges HTTP header. Declaration public const string AcceptRanges = \"Accept-Ranges\" Field Value Type Description String AccessControlAllowCredentials The Access-Control-Allow-Credentials HTTP header. Declaration public const string AccessControlAllowCredentials = \"Access-Control-Allow-Credentials\" Field Value Type Description String AccessControlAllowHeaders The Access-Control-Allow-Headers HTTP header. Declaration public const string AccessControlAllowHeaders = \"Access-Control-Allow-Headers\" Field Value Type Description String AccessControlAllowMethods The Access-Control-Allow-Methods HTTP header. Declaration public const string AccessControlAllowMethods = \"Access-Control-Allow-Methods\" Field Value Type Description String AccessControlAllowOrigin The Access-Control-Allow-Origin HTTP header. Declaration public const string AccessControlAllowOrigin = \"Access-Control-Allow-Origin\" Field Value Type Description String AccessControlExposeHeaders The Access-Control-Expose-Headers HTTP header. Declaration public const string AccessControlExposeHeaders = \"Access-Control-Expose-Headers\" Field Value Type Description String AccessControlMaxAge The Access-Control-Max-Age HTTP header. Declaration public const string AccessControlMaxAge = \"Access-Control-Max-Age\" Field Value Type Description String AccessControlRequestHeaders The Access-Control-Request-Headers HTTP header. Declaration public const string AccessControlRequestHeaders = \"Access-Control-Request-Headers\" Field Value Type Description String AccessControlRequestMethod The Access-Control-Request-Method HTTP header. Declaration public const string AccessControlRequestMethod = \"Access-Control-Request-Method\" Field Value Type Description String Age The Age HTTP header. Declaration public const string Age = \"Age\" Field Value Type Description String Allow The Allow HTTP header. Declaration public const string Allow = \"Allow\" Field Value Type Description String AltSvc The Alt-Svc HTTP header. Declaration public const string AltSvc = \"Alt-Svc\" Field Value Type Description String Authorization The Authorization HTTP header. Declaration public const string Authorization = \"Authorization\" Field Value Type Description String CacheControl The Cache-Control HTTP header. Declaration public const string CacheControl = \"Cache-Control\" Field Value Type Description String Connection The Connection HTTP header. Declaration public const string Connection = \"Connection\" Field Value Type Description String ContentDisposition The Content-Disposition HTTP header. Declaration public const string ContentDisposition = \"Content-Disposition\" Field Value Type Description String ContentEncoding The Content-Encoding HTTP header. Declaration public const string ContentEncoding = \"Content-Encoding\" Field Value Type Description String ContentLanguage The Content-Language HTTP header. Declaration public const string ContentLanguage = \"Content-Language\" Field Value Type Description String ContentLength The Content-Length HTTP header. Declaration public const string ContentLength = \"Content-Length\" Field Value Type Description String ContentLocation The Content-Location HTTP header. Declaration public const string ContentLocation = \"Content-Location\" Field Value Type Description String ContentMD5 The Content-MD5 HTTP header. Declaration public const string ContentMD5 = \"Content-MD5\" Field Value Type Description String ContentRange The Content-Range HTTP header. Declaration public const string ContentRange = \"Content-Range\" Field Value Type Description String ContentSecurityPolicy The Content-Security-Policy HTTP header. Declaration public const string ContentSecurityPolicy = \"Content-Security-Policy\" Field Value Type Description String ContentType The Content-Type HTTP header. Declaration public const string ContentType = \"Content-Type\" Field Value Type Description String Cookie The Cookie HTTP header. Declaration public const string Cookie = \"Cookie\" Field Value Type Description String Cookie2 The Cookie2 HTTP header. Declaration public const string Cookie2 = \"Cookie2\" Field Value Type Description String Date The Date HTTP header. Declaration public const string Date = \"Date\" Field Value Type Description String ETag The ETag HTTP header. Declaration public const string ETag = \"ETag\" Field Value Type Description String Expect The Expect HTTP header. Declaration public const string Expect = \"Expect\" Field Value Type Description String Expires The Expires HTTP header. Declaration public const string Expires = \"Expires\" Field Value Type Description String From The From HTTP header. Declaration public const string From = \"From\" Field Value Type Description String Host The Host HTTP header. Declaration public const string Host = \"Host\" Field Value Type Description String IfMatch The If-Match HTTP header. Declaration public const string IfMatch = \"If-Match\" Field Value Type Description String IfModifiedSince The If-Modified-Since HTTP header. Declaration public const string IfModifiedSince = \"If-Modified-Since\" Field Value Type Description String IfNoneMatch The If-None-Match HTTP header. Declaration public const string IfNoneMatch = \"If-None-Match\" Field Value Type Description String IfRange The If-Range HTTP header. Declaration public const string IfRange = \"If-Range\" Field Value Type Description String IfUnmodifiedSince The If-Unmodified-Since HTTP header. Declaration public const string IfUnmodifiedSince = \"If-Unmodified-Since\" Field Value Type Description String KeepAlive The Keep-Alive HTTP header. Declaration public const string KeepAlive = \"Keep-Alive\" Field Value Type Description String LastModified The Last-Modified HTTP header. Declaration public const string LastModified = \"Last-Modified\" Field Value Type Description String Link The Link HTTP header. Declaration public const string Link = \"Link\" Field Value Type Description String Location The Location HTTP header. Declaration public const string Location = \"Location\" Field Value Type Description String MaxForwards The Max-Forwards HTTP header. Declaration public const string MaxForwards = \"Max-Forwards\" Field Value Type Description String Origin The Origin HTTP header. Declaration public const string Origin = \"Origin\" Field Value Type Description String P3P The P3P HTTP header. Declaration public const string P3P = \"P3P\" Field Value Type Description String Pragma The Pragma HTTP header. Declaration public const string Pragma = \"Pragma\" Field Value Type Description String ProxyAuthenticate The Proxy-Authenticate HTTP header. Declaration public const string ProxyAuthenticate = \"Proxy-Authenticate\" Field Value Type Description String ProxyAuthorization The Proxy-Authorization HTTP header. Declaration public const string ProxyAuthorization = \"Proxy-Authorization\" Field Value Type Description String ProxyConnection The Proxy-Connection HTTP header. Declaration public const string ProxyConnection = \"Proxy-Connection\" Field Value Type Description String PublicKeyPins The Public-Key-Pins HTTP header. Declaration public const string PublicKeyPins = \"Public-Key-Pins\" Field Value Type Description String Range The Range HTTP header. Declaration public const string Range = \"Range\" Field Value Type Description String Referer The Referer HTTP header. Declaration public const string Referer = \"Referer\" Field Value Type Description String Remarks The incorrect spelling (\"Referer\" instead of \"Referrer\") is intentional and has historical reasons. See the \"Etymology\" section of the Wikipedia article on this header for more information. RetryAfter The Retry-After HTTP header. Declaration public const string RetryAfter = \"Retry-After\" Field Value Type Description String SecWebSocketAccept The Sec-WebSocket-Accept HTTP header. Declaration public const string SecWebSocketAccept = \"Sec-WebSocket-Accept\" Field Value Type Description String SecWebSocketExtensions The Sec-WebSocket-Extensions HTTP header. Declaration public const string SecWebSocketExtensions = \"Sec-WebSocket-Extensions\" Field Value Type Description String SecWebSocketKey The Sec-WebSocket-Key HTTP header. Declaration public const string SecWebSocketKey = \"Sec-WebSocket-Key\" Field Value Type Description String SecWebSocketProtocol The Sec-WebSocket-Protocol HTTP header. Declaration public const string SecWebSocketProtocol = \"Sec-WebSocket-Protocol\" Field Value Type Description String SecWebSocketVersion The Sec-WebSocket-Version HTTP header. Declaration public const string SecWebSocketVersion = \"Sec-WebSocket-Version\" Field Value Type Description String Server The Server HTTP header. Declaration public const string Server = \"Server\" Field Value Type Description String SetCookie The Set-Cookie HTTP header. Declaration public const string SetCookie = \"Set-Cookie\" Field Value Type Description String SetCookie2 The Set-Cookie2 HTTP header. Declaration public const string SetCookie2 = \"Set-Cookie2\" Field Value Type Description String StrictTransportSecurity The Strict-Transport-Security HTTP header. Declaration public const string StrictTransportSecurity = \"Strict-Transport-Security\" Field Value Type Description String TE The TE HTTP header. Declaration public const string TE = \"TE\" Field Value Type Description String Trailer The Trailer HTTP header. Declaration public const string Trailer = \"Trailer\" Field Value Type Description String TransferEncoding The Transfer-Encoding HTTP header. Declaration public const string TransferEncoding = \"Transfer-Encoding\" Field Value Type Description String TSV The TSV HTTP header. Declaration public const string TSV = \"TSV\" Field Value Type Description String Upgrade The Upgrade HTTP header. Declaration public const string Upgrade = \"Upgrade\" Field Value Type Description String UpgradeInsecureRequests The Upgrade-Insecure-Requests HTTP header. Declaration public const string UpgradeInsecureRequests = \"Upgrade-Insecure-Requests\" Field Value Type Description String UserAgent The User-Agent HTTP header. Declaration public const string UserAgent = \"User-Agent\" Field Value Type Description String Vary The Vary HTTP header. Declaration public const string Vary = \"Vary\" Field Value Type Description String Via The Via HTTP header. Declaration public const string Via = \"Via\" Field Value Type Description String Warning The Warning HTTP header. Declaration public const string Warning = \"Warning\" Field Value Type Description String WWWAuthenticate The WWW-Authenticate HTTP header. Declaration public const string WWWAuthenticate = \"WWW-Authenticate\" Field Value Type Description String XAspNetVersion The X-AspNet-Version HTTP header. Declaration public const string XAspNetVersion = \"X-AspNet-Version\" Field Value Type Description String XContentDuration The X-Content-Duration HTTP header. Declaration public const string XContentDuration = \"X-Content-Duration\" Field Value Type Description String XContentTypeOptions The X-Content-Type-Options HTTP header. Declaration public const string XContentTypeOptions = \"X-Content-Type-Options\" Field Value Type Description String XFrameOptions The X-Frame-Options HTTP header. Declaration public const string XFrameOptions = \"X-Frame-Options\" Field Value Type Description String XMSEdgeRef The X-MSEdge-Ref HTTP header. Declaration public const string XMSEdgeRef = \"X-MSEdge-Ref\" Field Value Type Description String XPoweredBy The X-Powered-By HTTP header. Declaration public const string XPoweredBy = \"X-Powered-By\" Field Value Type Description String XRequestID The X-Request-ID HTTP header. Declaration public const string XRequestID = \"X-Request-ID\" Field Value Type Description String XUACompatible The X-UA-Compatible HTTP header. Declaration public const string XUACompatible = \"X-UA-Compatible\" Field Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpListenerMode.html": {
    "href": "api/EmbedIO.HttpListenerMode.html",
    "title": "Enum HttpListenerMode | EmbedIO",
    "keywords": "Enum HttpListenerMode Defines the HTTP listeners available for use in a WebServer . Namespace : EmbedIO Syntax public enum HttpListenerMode Fields Name Description EmbedIO Use EmbedIO's internal HTTP listener implementation, based on Mono's System.Net.HttpListener . Microsoft Use the class provided by the .NET runtime in use. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpNotAcceptableException.html": {
    "href": "api/EmbedIO.HttpNotAcceptableException.html",
    "title": "Class HttpNotAcceptableException | EmbedIO",
    "keywords": "Class HttpNotAcceptableException When thrown, breaks the request handling control flow and sends a redirection response to the client. Inheritance Object HttpException HttpNotAcceptableException Implements IHttpException Inherited Members HttpException.InternalServerError(String, Object) HttpException.Unauthorized(String, Object) HttpException.Forbidden(String, Object) HttpException.BadRequest(String, Object) HttpException.NotFound(String, Object) HttpException.MethodNotAllowed(String, Object) HttpException.NotAcceptable() HttpException.NotAcceptable(String) HttpException.RangeNotSatisfiable() HttpException.RangeNotSatisfiable(Nullable<Int64>) HttpException.Redirect(String) HttpException.Redirect(String, Int32) HttpException.Redirect(String, HttpStatusCode) HttpException.StatusCode HttpException.DataObject HttpException.IHttpException.Message Namespace : EmbedIO Syntax public class HttpNotAcceptableException : HttpException, IHttpException Constructors HttpNotAcceptableException() Initializes a new instance of the HttpNotAcceptableException class, without specifying a value for the response's Vary header. Declaration public HttpNotAcceptableException() HttpNotAcceptableException(String) Initializes a new instance of the HttpNotAcceptableException class. Declaration public HttpNotAcceptableException(string vary) Parameters Type Name Description String vary A value, or a comma-separated list of values, to set the response's Vary header to. Although not specified in RFC7231 , this may help the client to understand why the request has been rejected. If this parameter is null or the empty string, the response's Vary header is not set. Properties Vary Gets the value, or comma-separated list of values, to be set on the response's Vary header. Declaration public string Vary { get; } Property Value Type Description String Remarks If the empty string has been passed to the HttpNotAcceptableException(String) constructor, the value of this property is null . Methods PrepareResponse(IHttpContext) Sets necessary headers, as required by the nature of the HTTP exception (e.g. Location for HttpRedirectException ). Declaration public override void PrepareResponse(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the response. Overrides HttpException.PrepareResponse(IHttpContext) Remarks This method does nothing; there is no need to call base.PrepareResponse in overrides of this method. Implements IHttpException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpRangeNotSatisfiableException.html": {
    "href": "api/EmbedIO.HttpRangeNotSatisfiableException.html",
    "title": "Class HttpRangeNotSatisfiableException | EmbedIO",
    "keywords": "Class HttpRangeNotSatisfiableException When thrown, breaks the request handling control flow and sends a redirection response to the client. Inheritance Object HttpException HttpRangeNotSatisfiableException Implements IHttpException Inherited Members HttpException.InternalServerError(String, Object) HttpException.Unauthorized(String, Object) HttpException.Forbidden(String, Object) HttpException.BadRequest(String, Object) HttpException.NotFound(String, Object) HttpException.MethodNotAllowed(String, Object) HttpException.NotAcceptable() HttpException.NotAcceptable(String) HttpException.RangeNotSatisfiable() HttpException.RangeNotSatisfiable(Nullable<Int64>) HttpException.Redirect(String) HttpException.Redirect(String, Int32) HttpException.Redirect(String, HttpStatusCode) HttpException.StatusCode HttpException.DataObject HttpException.IHttpException.Message Namespace : EmbedIO Syntax public class HttpRangeNotSatisfiableException : HttpException, IHttpException Constructors HttpRangeNotSatisfiableException() Initializes a new instance of the HttpRangeNotSatisfiableException class. without specifying a value for the response's Content-Range header. Declaration public HttpRangeNotSatisfiableException() HttpRangeNotSatisfiableException(Nullable<Int64>) Initializes a new instance of the HttpRangeNotSatisfiableException class. Declaration public HttpRangeNotSatisfiableException(long? contentLength) Parameters Type Name Description Nullable < Int64 > contentLength The total length of the requested resource, expressed in bytes, or null to omit the Content-Range header in the response. Properties ContentLength Gets the total content length to be specified on the response's Content-Range header. Declaration public long? ContentLength { get; } Property Value Type Description Nullable < Int64 > Methods PrepareResponse(IHttpContext) Sets necessary headers, as required by the nature of the HTTP exception (e.g. Location for HttpRedirectException ). Declaration public override void PrepareResponse(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the response. Overrides HttpException.PrepareResponse(IHttpContext) Remarks This method does nothing; there is no need to call base.PrepareResponse in overrides of this method. Implements IHttpException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpRedirectException.html": {
    "href": "api/EmbedIO.HttpRedirectException.html",
    "title": "Class HttpRedirectException | EmbedIO",
    "keywords": "Class HttpRedirectException When thrown, breaks the request handling control flow and sends a redirection response to the client. Inheritance Object HttpException HttpRedirectException Implements IHttpException Inherited Members HttpException.InternalServerError(String, Object) HttpException.Unauthorized(String, Object) HttpException.Forbidden(String, Object) HttpException.BadRequest(String, Object) HttpException.NotFound(String, Object) HttpException.MethodNotAllowed(String, Object) HttpException.NotAcceptable() HttpException.NotAcceptable(String) HttpException.RangeNotSatisfiable() HttpException.RangeNotSatisfiable(Nullable<Int64>) HttpException.Redirect(String) HttpException.Redirect(String, Int32) HttpException.Redirect(String, HttpStatusCode) HttpException.StatusCode HttpException.DataObject HttpException.IHttpException.Message Namespace : EmbedIO Syntax public class HttpRedirectException : HttpException, IHttpException Constructors HttpRedirectException(String, HttpStatusCode) Initializes a new instance of the HttpRedirectException class. Declaration public HttpRedirectException(string location, HttpStatusCode statusCode) Parameters Type Name Description String location The redirection target. HttpStatusCode statusCode One of the redirection status codes, to be set on the response. HttpRedirectException(String, Int32) Initializes a new instance of the HttpRedirectException class. Declaration public HttpRedirectException(string location, int statusCode = default(int)) Parameters Type Name Description String location The redirection target. Int32 statusCode The status code to set on the response, in the range from 300 to 399. By default, status code 302 ( Found ) is used. Properties Location Gets the URL where the client will be redirected. Declaration public string Location { get; } Property Value Type Description String Methods PrepareResponse(IHttpContext) Sets necessary headers, as required by the nature of the HTTP exception (e.g. Location for HttpRedirectException ). Declaration public override void PrepareResponse(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the response. Overrides HttpException.PrepareResponse(IHttpContext) Remarks This method does nothing; there is no need to call base.PrepareResponse in overrides of this method. Implements IHttpException Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpRequestExtensions.html": {
    "href": "api/EmbedIO.HttpRequestExtensions.html",
    "title": "Class HttpRequestExtensions | EmbedIO",
    "keywords": "Class HttpRequestExtensions Provides extension methods for types implementing IHttpRequest . Inheritance Object HttpRequestExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpRequestExtensions Methods CheckIfModifiedSince(IHttpRequest, DateTime, out Boolean) Checks whether an If-Modified-Since header exists in a request and, if so, whether its value is a date and time more recent or equal to a given . See RFC7232, Section 3.3 for a normative reference. Declaration public static bool CheckIfModifiedSince(this IHttpRequest this, DateTime lastModifiedUtc, out bool headerExists) Parameters Type Name Description IHttpRequest this The IHttpRequest on which this method is called. DateTime lastModifiedUtc A date and time value, in Coordinated Universal Time, expressing the last time a resource was modified. Boolean headerExists When this method returns, a value that indicates whether an If-Modified-Since header is present in this , regardless of the method's return value. This parameter is passed uninitialized. Returns Type Description Boolean true if an If-Modified-Since header is present in this and its value is a date and time more recent or equal to lastModifiedUtc ; false otherwise. CheckIfNoneMatch(IHttpRequest, String, out Boolean) Checks whether an If-None-Match header exists in a request and, if so, whether it contains a given entity tag. See RFC7232, Section 3.2 for a normative reference; however, see the Remarks section for more information about the RFC compliance of this method. Declaration public static bool CheckIfNoneMatch(this IHttpRequest this, string entityTag, out bool headerExists) Parameters Type Name Description IHttpRequest this The IHttpRequest on which this method is called. String entityTag The entity tag. Boolean headerExists When this method returns, a value that indicates whether an If-None-Match header is present in this , regardless of the method's return value. This parameter is passed uninitialized. Returns Type Description Boolean true if an If-None-Match header is present in this and one of the entity tags listed in it is equal to entityTag ; false otherwise. Remarks RFC7232, Section 3.2 states that a weak comparison function (as defined in RFC7232, Section 2.3.2 ) must be used for If-None-Match . That would mean parsing every entity tag, at least minimally, to determine whether it is a \"weak\" or \"strong\" tag. Since EmbedIO currently generates only \"strong\" tags, this method uses the default string comparer instead. The behavior of this method is thus not, strictly speaking, RFC7232-compliant; it works, though, with entity tags generated by EmbedIO. IsRangeRequest(IHttpRequest, Int64, String, DateTime, out Int64, out Int64) Checks whether a Range header exists in a request and, if so, determines whether it is possible to send a 206 Partial Content response. See RFC7233 for a normative reference; however, see the Remarks section for more information about the RFC compliance of this method. Declaration public static bool IsRangeRequest(this IHttpRequest this, long contentLength, string entityTag, DateTime lastModifiedUtc, out long start, out long upperBound) Parameters Type Name Description IHttpRequest this The IHttpRequest on which this method is called. Int64 contentLength The total length, in bytes, of the response entity, i.e. what would be sent in a 200 OK response. String entityTag An entity tag representing the response entity. This value is checked against the If-Range header, if it is present. DateTime lastModifiedUtc The date and time value, in Coordinated Universal Time, expressing the last modification time of the resource entity. This value is checked against the If-Range header, if it is present. Int64 start When this method returns true , the start of the requested byte range. This parameter is passed uninitialized. Int64 upperBound When this method returns true , the upper bound of the requested byte range. This parameter is passed uninitialized. Note that the upper bound of a range is NOT the sum of the range's start and length; for example, a range expressed as bytes=0-99 has a start of 0, an upper bound of 99, and a length of 100 bytes. Returns Type Description Boolean This method returns true if the following conditions are satisfied: >the request's HTTP method is GET ; >a Range header is present in the request; >either no If-Range header is present in the request, or it specifies an entity tag equal to entityTag , or a UTC date and time equal to lastModifiedUtc ; >the Range header specifies exactly one range; >the specified range is entirely contained in the range from 0 to contentLength - 1. If the last condition is not satisfied, i.e. the specified range start and/or upper bound are out of the range from 0 to contentLength - 1, this method does not return; it throws a HttpRangeNotSatisfiableException instead. If any of the other conditions are not satisfied, this method returns false . Remarks According to RFC7233, Section 3.1 , there are several conditions under which a server may ignore or reject a range request; therefore, clients are (or should be) prepared to receive a 200 OK response with the whole response entity instead of the requested range(s). For this reason, until the generation of multipart/byteranges responses is implemented in EmbedIO, this method will ignore range requests specifying more than one range, even if this behavior is not, strictly speaking, RFC7233-compliant. To make clients aware that range requests are accepted for a resource, every 200 OK (or 304 Not Modified ) response for the same resource should include an Accept-Ranges header with the string bytes as value. SafeGetRemoteEndpointStr(IHttpRequest) Returns a string representing the remote IP address and port of an IHttpRequest interface. This method can be called even on a null interface, or one that has no remote end point, or no remote address; it will always return a non- null , non-empty string. Declaration public static string SafeGetRemoteEndpointStr(this IHttpRequest this) Parameters Type Name Description IHttpRequest this The IHttpRequest on which this method is called. Returns Type Description String If this is null , or its RemoteEndPoint is null , the string \"<null> ; otherwise, the remote end point's Address (or the string \"<???>\" if it is null ) followed by a colon and the Port number. TryNegotiateContentEncoding(IHttpRequest, Boolean, out CompressionMethod, out Action<IHttpResponse>) Attempts to proactively negotiate a compression method for a response, based on a request's Accept-Encoding header (or lack of it). Declaration public static bool TryNegotiateContentEncoding(this IHttpRequest this, bool preferCompression, out CompressionMethod compressionMethod, out Action<IHttpResponse> prepareResponse) Parameters Type Name Description IHttpRequest this The IHttpRequest on which this method is called. Boolean preferCompression true if sending compressed data is preferred over sending non-compressed data; otherwise, false . CompressionMethod compressionMethod When this method returns, the compression method to use for the response, if content negotiation is successful. This parameter is passed uninitialized. Action < IHttpResponse > prepareResponse When this method returns, a callback that prepares data in an IHttpResponse according to the result of content negotiation. This parameter is passed uninitialized. Returns Type Description Boolean true if content negotiation is successful; otherwise, false . Remarks If this method returns true , the prepareResponse callback will set appropriate response headers to reflect the results of content negotiation. If this method returns false , the prepareResponse callback will throw a HttpNotAcceptableException to send a 406 Not Acceptable response with the Vary header set to Accept-Encoding , so that the client may know the reason why the request has been rejected. If this has no Accept-Encoding header, this method always returns true and sets compressionMethod to None . See Also HttpNotAcceptableException(String) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpResponseExtensions.html": {
    "href": "api/EmbedIO.HttpResponseExtensions.html",
    "title": "Class HttpResponseExtensions | EmbedIO",
    "keywords": "Class HttpResponseExtensions Provides extension methods for types implementing IHttpResponse . Inheritance Object HttpResponseExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpResponseExtensions Methods DisableCaching(IHttpResponse) Sets the necessary headers to disable caching of a response on the client side. Declaration public static void DisableCaching(this IHttpResponse this) Parameters Type Name Description IHttpResponse this The IHttpResponse interface on which this method is called. SetEmptyResponse(IHttpResponse, Int32) Prepares a standard response without a body for the specified status code. Declaration public static void SetEmptyResponse(this IHttpResponse this, int statusCode) Parameters Type Name Description IHttpResponse this The IHttpResponse interface on which this method is called. Int32 statusCode The HTTP status code of the response. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpStatusDescription.html": {
    "href": "api/EmbedIO.HttpStatusDescription.html",
    "title": "Class HttpStatusDescription | EmbedIO",
    "keywords": "Class HttpStatusDescription Provides standard HTTP status descriptions. Data contained in this class comes from the following sources: RFC7231 Section 6 (HTTP/1.1 Semantics and Content) RFC6585 (Additional HTTP Status Codes) RFC2774 Section 7 (An HTTP Extension Framework) RFC7540 Section 9.1.2 (HTTP/2) RFC4918 Section 11 (WebDAV) RFC5842 Section 7 (Binding Extensions to WebDAV) RFC7538 Section 3 (HTTP Status Code 308) RFC3229 Section 10.4.1 (Delta encoding in HTTP) RFC8297 Section 2 (Early Hints) RFC7725 Section 3 (HTTP-status-451) RFC2295 Section 8.1 (Transparent Content Negotiation) Inheritance Object HttpStatusDescription Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class HttpStatusDescription Methods Get(HttpStatusCode) Returns the standard status description for a . Declaration public static string Get(HttpStatusCode code) Parameters Type Name Description HttpStatusCode code The HTTP status code for which the standard description is to be retrieved. Returns Type Description String The standard HTTP status description for the specified code if it was found, or null if it was not found. Get(Int32) Returns the standard status description for a HTTP status code specified as an langword_csharp_int . Declaration public static string Get(int code) Parameters Type Name Description Int32 code The HTTP status code for which the standard description is to be retrieved. Returns Type Description String The standard HTTP status description for the specified code if it was found, or null if it was not found. TryGet(HttpStatusCode, out String) Attempts to get the standard status description for a . Declaration public static bool TryGet(HttpStatusCode code, out string description) Parameters Type Name Description HttpStatusCode code The HTTP status code for which the standard description is to be retrieved. String description When this method returns, the standard HTTP status description for the specified code if it was found, or null if it was not found. This parameter is passed uninitialized. Returns Type Description Boolean true if the specified code was found in the list of HTTP status codes for which the standard description is known; otherwise, false . See Also TryGet(Int32, out String) Get(HttpStatusCode) TryGet(Int32, out String) Attempts to get the standard status description for a HTTP status code specified as an langword_csharp_int . Declaration public static bool TryGet(int code, out string description) Parameters Type Name Description Int32 code The HTTP status code for which the standard description is to be retrieved. String description When this method returns, the standard HTTP status description for the specified code if it was found, or null if it was not found. This parameter is passed uninitialized. Returns Type Description Boolean true if the specified code was found in the list of HTTP status codes for which the standard description is known; otherwise, false . See Also TryGet(HttpStatusCode, out String) Get(Int32) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.HttpVerb.html": {
    "href": "api/EmbedIO.HttpVerb.html",
    "title": "Enum HttpVerb | EmbedIO",
    "keywords": "Enum HttpVerb Enumerates the different HTTP Verbs. Namespace : EmbedIO Syntax public enum HttpVerb Fields Name Description Any Wildcard Method Delete DELETE Method Get GET Method Head HEAD method Options OPTIONS method Patch PATCH method Post POST method Put PUT method Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ICookieCollection.html": {
    "href": "api/EmbedIO.ICookieCollection.html",
    "title": "Interface ICookieCollection | EmbedIO",
    "keywords": "Interface ICookieCollection Interface for Cookie Collection. Namespace : EmbedIO Syntax public interface ICookieCollection : IEnumerable<Cookie>, ICollection Properties Item[String] Gets the with the specified name. Declaration Cookie? this[string name] { get; } Parameters Type Name Description String name The name. Property Value Type Description Nullable < Cookie > The . Methods Add(Cookie) Adds the specified cookie. Declaration void Add(Cookie cookie) Parameters Type Name Description Cookie cookie The cookie. Contains(Cookie) Determines whether this ICookieCollection contains the specified . Declaration bool Contains(Cookie cookie) Parameters Type Name Description Cookie cookie The cookie to find in the ICookieCollection . Returns Type Description Boolean true if this ICookieCollection contains the specified cookie ; otherwise, false . CopyTo(Cookie[], Int32) Copies the elements of this ICookieCollection to a array starting at the specified index of the target array. Declaration void CopyTo(Cookie[] array, int index) Parameters Type Name Description Cookie [] array The target array to which the ICookieCollection will be copied. Int32 index The zero-based index in the target array where copying begins. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpContext.html": {
    "href": "api/EmbedIO.IHttpContext.html",
    "title": "Interface IHttpContext | EmbedIO",
    "keywords": "Interface IHttpContext Represents the context of a HTTP(s) request being handled by a web server. Inherited Members IMimeTypeProvider.GetMimeType(String) IMimeTypeProvider.TryDetermineCompression(String, Boolean) Namespace : EmbedIO Syntax public interface IHttpContext : IMimeTypeProvider Properties Age Gets the elapsed time, expressed in milliseconds, since the creation of this context. Declaration long Age { get; } Property Value Type Description Int64 CancellationToken Gets a CancellationToken used to stop processing of this context. Declaration CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Id Gets a unique identifier for a HTTP context. Declaration string Id { get; } Property Value Type Description String IsHandled Gets a value indicating whether this IHttpContext has been completely handled, so that no further processing is required. When a HTTP context is created, this property is false ; as soon as it is set to true , the context is not passed to any further module's handler for processing. Once it becomes true , this property is guaranteed to never become false again. Declaration bool IsHandled { get; } Property Value Type Description Boolean Remarks When a module's IsFinalHandler property is true , this property is set to true after the returned by the module's HandleRequestAsync(IHttpContext) method is completed. See Also SetHandled() IsFinalHandler Items Gets the dictionary of data to pass trough the EmbedIO pipeline. Declaration IDictionary<object, object> Items { get; } Property Value Type Description IDictionary < Object , Object > LocalEndPoint Gets the server IP address and port number to which the request is directed. Declaration IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint RemoteEndPoint Gets the client IP address and port number from which the request originated. Declaration IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint Request Gets the HTTP request. Declaration IHttpRequest Request { get; } Property Value Type Description IHttpRequest RequestedPath Gets the requested path, relative to the innermost module's base path. Declaration string RequestedPath { get; } Property Value Type Description String Remarks This property derives from the path specified in the requested URL, stripped of the BaseRoute of the handling module. This property is in itself a valid URL path, including an initial slash ( / ) character. Response Gets the HTTP response object. Declaration IHttpResponse Response { get; } Property Value Type Description IHttpResponse Route Gets the route matched by the requested URL path. Declaration RouteMatch Route { get; } Property Value Type Description RouteMatch Session Gets the session proxy associated with this context. Declaration ISessionProxy Session { get; } Property Value Type Description ISessionProxy SupportCompressedRequests Gets a value indicating whether compressed request bodies are supported. Declaration bool SupportCompressedRequests { get; } Property Value Type Description Boolean See Also SupportCompressedRequests User Gets the user. Declaration IPrincipal User { get; } Property Value Type Description IPrincipal Methods OnClose(Action<IHttpContext>) Registers a callback to be called when processing is finished on a context. Declaration void OnClose(Action<IHttpContext> callback) Parameters Type Name Description Action < IHttpContext > callback The callback. SetHandled() Marks this context as handled, so that it will not be processed by any further module. Declaration void SetHandled() Remarks Calling this method from the HandleRequestAsync(IHttpContext) or OnRequestAsync(IHttpContext) of a module whose IsFinalHandler property is true is redundant and has no effect. See Also IsHandled IsFinalHandler Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpContextHandler.html": {
    "href": "api/EmbedIO.IHttpContextHandler.html",
    "title": "Interface IHttpContextHandler | EmbedIO",
    "keywords": "Interface IHttpContextHandler Represents an object that can handle a HTTP context. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Namespace : EmbedIO Syntax public interface IHttpContextHandler Methods HandleContextAsync(IHttpContextImpl) Asynchronously handles a HTTP context, generating a suitable response for an incoming request. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration Task HandleContextAsync(IHttpContextImpl context) Parameters Type Name Description IHttpContextImpl context The HTTP context. Returns Type Description Task A representing the ongoing operation. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpContextImpl.html": {
    "href": "api/EmbedIO.IHttpContextImpl.html",
    "title": "Interface IHttpContextImpl | EmbedIO",
    "keywords": "Interface IHttpContextImpl Represents a HTTP context implementation, i.e. a HTTP context as seen internally by EmbedIO. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in the implementation of EmbedIO plug-ins (e.g. modules). Inherited Members IHttpContext.Id IHttpContext.LocalEndPoint IHttpContext.RemoteEndPoint IHttpContext.Request IHttpContext.RequestedPath IHttpContext.Response IHttpContext.Items IHttpContext.Age IHttpContext.IsHandled IHttpContext.SetHandled() IHttpContext.OnClose(Action<IHttpContext>) IMimeTypeProvider.GetMimeType(String) IMimeTypeProvider.TryDetermineCompression(String, Boolean) Namespace : EmbedIO Syntax public interface IHttpContextImpl : IHttpContext, IMimeTypeProvider Properties CancellationToken Gets or sets a CancellationToken used to stop processing of this context. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration CancellationToken CancellationToken { get; set; } Property Value Type Description CancellationToken MimeTypeProviders Gets the MIME type providers. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration MimeTypeProviderStack MimeTypeProviders { get; } Property Value Type Description MimeTypeProviderStack Route Gets or sets the route matched by the requested URL path. Declaration RouteMatch Route { get; set; } Property Value Type Description RouteMatch Session Gets or sets the session proxy associated with this context. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration ISessionProxy Session { get; set; } Property Value Type Description ISessionProxy An interface. SupportCompressedRequests Gets or sets a value indicating whether compressed request bodies are supported. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration bool SupportCompressedRequests { get; set; } Property Value Type Description Boolean See Also SupportCompressedRequests User Gets or sets the user. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration IPrincipal User { get; set; } Property Value Type Description IPrincipal Methods AcceptWebSocketAsync(IEnumerable<String>, String, Int32, TimeSpan, CancellationToken) Asynchronously handles a WebSockets opening handshake and returns a newly-created interface. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration Task<IWebSocketContext> AcceptWebSocketAsync(IEnumerable<string> requestedProtocols, string acceptedProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < String > requestedProtocols The requested WebSocket sub-protocols. String acceptedProtocol The accepted WebSocket sub-protocol, or the empty string is no sub-protocol has been agreed upon. Int32 receiveBufferSize Size of the receive buffer. TimeSpan keepAliveInterval The keep-alive interval. CancellationToken cancellationToken A CancellationToken used to stop the server. Returns Type Description Task < IWebSocketContext > An interface. Close() Flushes and closes the response stream, then calls any registered close callbacks. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration void Close() See Also OnClose ( Action < IHttpContext >) See Also IHttpContext Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpException.html": {
    "href": "api/EmbedIO.IHttpException.html",
    "title": "Interface IHttpException | EmbedIO",
    "keywords": "Interface IHttpException Represents an exception that results in a particular HTTP response to be sent to the client. This interface is meant to be implemented by classes derived from . Either as message or a data object can be attached to the exception; which one, if any, is sent to the client will depend upon the handler used to send the response. Namespace : EmbedIO Syntax public interface IHttpException Properties DataObject Gets an object that can be serialized and included in the response triggered by a HTTP exception. Whether the object is actually sent to the client will depend upon the handler used to send the response. Declaration object DataObject { get; } Property Value Type Description Object Message Gets a message that can be included in the response triggered by a HTTP exception. Whether the message is actually sent to the client will depend upon the handler used to send the response. Declaration string Message { get; } Property Value Type Description String Remarks Do not rely on to implement this property if you want to support null messages, because a default message will be supplied by the CLR at throw time when is null . StackTrace Gets the stack trace of a HTTP exception. Declaration string StackTrace { get; } Property Value Type Description String StatusCode Gets the response status code for a HTTP exception. Declaration int StatusCode { get; } Property Value Type Description Int32 Methods PrepareResponse(IHttpContext) Sets necessary headers, as required by the nature of the HTTP exception (e.g. Location for HttpRedirectException ). Declaration void PrepareResponse(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context of the response. See Also HttpExceptionHandlerCallback HttpExceptionHandler Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpListener.html": {
    "href": "api/EmbedIO.IHttpListener.html",
    "title": "Interface IHttpListener | EmbedIO",
    "keywords": "Interface IHttpListener Interface to create a HTTP Listener. Namespace : EmbedIO Syntax public interface IHttpListener : IDisposable Properties IgnoreWriteExceptions Gets or sets a value indicating whether the listener should ignore write exceptions. By default the flag is set on. Declaration bool IgnoreWriteExceptions { get; set; } Property Value Type Description Boolean true if [ignore write exceptions]; otherwise, false . IsListening Gets a value indicating whether this instance is listening. Declaration bool IsListening { get; } Property Value Type Description Boolean true if this instance is listening; otherwise, false . Name Gets or sets the name. Declaration string Name { get; } Property Value Type Description String The name. Prefixes Gets the prefixes. Declaration List<string> Prefixes { get; } Property Value Type Description List < String > The prefixes. Methods AddPrefix(String) Adds the prefix. Declaration void AddPrefix(string urlPrefix) Parameters Type Name Description String urlPrefix The URL prefix. GetContextAsync(CancellationToken) Gets the HTTP context asynchronous. Declaration Task<IHttpContextImpl> GetContextAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IHttpContextImpl > A task that represents the time delay for the HTTP Context. Start() Starts this listener. Declaration void Start() Stop() Stops this listener. Declaration void Stop() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpMessage.html": {
    "href": "api/EmbedIO.IHttpMessage.html",
    "title": "Interface IHttpMessage | EmbedIO",
    "keywords": "Interface IHttpMessage Represents a HTTP request or response. Namespace : EmbedIO Syntax public interface IHttpMessage Properties Cookies Gets the cookies. Declaration ICookieCollection Cookies { get; } Property Value Type Description ICookieCollection The cookies. ProtocolVersion Gets or sets the protocol version. Declaration Version ProtocolVersion { get; } Property Value Type Description Version The protocol version. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpRequest.html": {
    "href": "api/EmbedIO.IHttpRequest.html",
    "title": "Interface IHttpRequest | EmbedIO",
    "keywords": "Interface IHttpRequest Interface to create a HTTP Request. Inherited Members IHttpMessage.Cookies IHttpMessage.ProtocolVersion Namespace : EmbedIO Syntax public interface IHttpRequest : IHttpMessage Properties ContentEncoding Gets the content encoding. Declaration Encoding ContentEncoding { get; } Property Value Type Description Encoding ContentLength64 Gets the content length. Declaration long ContentLength64 { get; } Property Value Type Description Int64 ContentType Gets the type of the content. Declaration string ContentType { get; } Property Value Type Description String HasEntityBody Gets a value indicating whether this instance has entity body. Declaration bool HasEntityBody { get; } Property Value Type Description Boolean Headers Gets the request headers. Declaration NameValueCollection Headers { get; } Property Value Type Description NameValueCollection HttpMethod Gets the HTTP method. Declaration string HttpMethod { get; } Property Value Type Description String HttpVerb Gets a HttpVerb constant representing the HTTP method of the request. Declaration HttpVerb HttpVerb { get; } Property Value Type Description HttpVerb InputStream Gets the input stream. Declaration Stream InputStream { get; } Property Value Type Description Stream IsAuthenticated Gets a value indicating whether this instance is authenticated. Declaration bool IsAuthenticated { get; } Property Value Type Description Boolean IsLocal Gets a value indicating whether this instance is local. Declaration bool IsLocal { get; } Property Value Type Description Boolean IsSecureConnection Gets a value indicating whether this request has been received over a SSL connection. Declaration bool IsSecureConnection { get; } Property Value Type Description Boolean IsWebSocketRequest Gets a value indicating whether this instance is web socket request. Declaration bool IsWebSocketRequest { get; } Property Value Type Description Boolean KeepAlive Gets a value indicating whether [keep alive]. Declaration bool KeepAlive { get; } Property Value Type Description Boolean LocalEndPoint Gets the local end point. Declaration IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint QueryString Gets the query string. Declaration NameValueCollection QueryString { get; } Property Value Type Description NameValueCollection RawUrl Gets the raw URL. Declaration string RawUrl { get; } Property Value Type Description String RemoteEndPoint Gets the remote end point. Declaration IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint Url Gets the requested URL. Declaration Uri Url { get; } Property Value Type Description Uri UrlReferrer Gets the URL referrer. Declaration Uri? UrlReferrer { get; } Property Value Type Description Nullable < Uri > UserAgent Gets the user agent. Declaration string UserAgent { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IHttpResponse.html": {
    "href": "api/EmbedIO.IHttpResponse.html",
    "title": "Interface IHttpResponse | EmbedIO",
    "keywords": "Interface IHttpResponse Interface to create a HTTP Response. Inherited Members IHttpMessage.Cookies IHttpMessage.ProtocolVersion Namespace : EmbedIO Syntax public interface IHttpResponse : IHttpMessage Properties ContentEncoding Gets or sets the content encoding. Declaration Encoding? ContentEncoding { get; set; } Property Value Type Description Nullable < Encoding > ContentLength64 Gets or sets the content length. Declaration long ContentLength64 { get; set; } Property Value Type Description Int64 ContentType Gets or sets the type of the content. Declaration string ContentType { get; set; } Property Value Type Description String Headers Gets the response headers. Declaration WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection KeepAlive Gets or sets a value indicating whether [keep alive]. Declaration bool KeepAlive { get; set; } Property Value Type Description Boolean OutputStream Gets the output stream. Declaration Stream OutputStream { get; } Property Value Type Description Stream SendChunked Gets or sets a value indicating whether the response uses chunked transfer encoding. Declaration bool SendChunked { get; set; } Property Value Type Description Boolean StatusCode Gets or sets the status code. Declaration int StatusCode { get; set; } Property Value Type Description Int32 StatusDescription Gets or sets a text description of the HTTP status code. Declaration string StatusDescription { get; set; } Property Value Type Description String Methods Close() Closes this instance and dispose the resources. Declaration void Close() SetCookie(Cookie) Sets the cookie. Declaration void SetCookie(Cookie cookie) Parameters Type Name Description Cookie cookie The session cookie. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IMimeTypeCustomizer.html": {
    "href": "api/EmbedIO.IMimeTypeCustomizer.html",
    "title": "Interface IMimeTypeCustomizer | EmbedIO",
    "keywords": "Interface IMimeTypeCustomizer Represents an object that can set information about specific MIME types and media ranges, to be later retrieved via an IMimeTypeProvider interface. Inherited Members IMimeTypeProvider.GetMimeType(String) IMimeTypeProvider.TryDetermineCompression(String, Boolean) Namespace : EmbedIO Syntax public interface IMimeTypeCustomizer : IMimeTypeProvider Methods AddCustomMimeType(String, String) Adds a custom association between a file extension and a MIME type. Declaration void AddCustomMimeType(string extension, string mimeType) Parameters Type Name Description String extension The file extension to associate to mimeType . String mimeType The MIME type to associate to extension . PreferCompression(String, Boolean) Indicates whether to prefer compression when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration void PreferCompression(string mimeType, bool preferCompression) Parameters Type Name Description String mimeType The MIME type or media range. Boolean preferCompression true to prefer compression; otherwise, false . See Also IMimeTypeProvider Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IMimeTypeProvider.html": {
    "href": "api/EmbedIO.IMimeTypeProvider.html",
    "title": "Interface IMimeTypeProvider | EmbedIO",
    "keywords": "Interface IMimeTypeProvider Represents an object that contains information on specific MIME types and media ranges. Namespace : EmbedIO Syntax public interface IMimeTypeProvider Methods GetMimeType(String) Gets the MIME type associated to a file extension. Declaration string GetMimeType(string extension) Parameters Type Name Description String extension The file extension for which a corresponding MIME type is wanted. Returns Type Description String The MIME type corresponding to extension , if one is found; otherwise, null . TryDetermineCompression(String, out Boolean) Attempts to determine whether compression should be preferred when negotiating content encoding for a response with the specified content type. Declaration bool TryDetermineCompression(string mimeType, out bool preferCompression) Parameters Type Name Description String mimeType The MIME type to check. Boolean preferCompression When this method returns true , a value indicating whether compression should be preferred. This parameter is passed uninitialized. Returns Type Description Boolean true if a value is found for mimeType ; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Internal.html": {
    "href": "api/EmbedIO.Internal.html",
    "title": "Namespace EmbedIO.Internal | EmbedIO",
    "keywords": "Namespace EmbedIO.Internal Classes TimeKeeper Represents a wrapper around Stopwatch. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Internal.TimeKeeper.html": {
    "href": "api/EmbedIO.Internal.TimeKeeper.html",
    "title": "Class TimeKeeper | EmbedIO",
    "keywords": "Class TimeKeeper Represents a wrapper around Stopwatch. Inheritance Object TimeKeeper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Internal Syntax public sealed class TimeKeeper Constructors TimeKeeper() Initializes a new instance of the TimeKeeper class. Declaration public TimeKeeper() Properties ElapsedTime Gets the elapsed time since the class was initialized. Declaration public long ElapsedTime { get; } Property Value Type Description Int64 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IWebModule.html": {
    "href": "api/EmbedIO.IWebModule.html",
    "title": "Interface IWebModule | EmbedIO",
    "keywords": "Interface IWebModule Represents a module. Namespace : EmbedIO Syntax public interface IWebModule Properties BaseRoute Gets the base route of a module. Declaration string BaseRoute { get; } Property Value Type Description String The base route. Remarks A base route is either \"/\" (the root path), or a prefix starting and ending with a '/' character. Container Gets the container of this module. Declaration IWebModuleContainer Container { get; } Property Value Type Description IWebModuleContainer See Also IWebModuleContainer IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration bool IsFinalHandler { get; } Property Value Type Description Boolean Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () OnHttpException Gets or sets a callback that is called every time a HTTP exception is thrown during the processing of a request. If this property is null (the default), the exception will be handled by the web server, or by the containing ModuleGroup . Declaration HttpExceptionHandlerCallback OnHttpException { get; set; } Property Value Type Description HttpExceptionHandlerCallback See Also HttpExceptionHandler OnUnhandledException Gets or sets a callback that is called every time an unhandled exception occurs during the processing of a request. If this property is null (the default), the exception will be handled by the web server, or by the containing ModuleGroup . Declaration ExceptionHandlerCallback OnUnhandledException { get; set; } Property Value Type Description ExceptionHandlerCallback See Also ExceptionHandler Methods HandleRequestAsync(IHttpContext) Handles a request from a client. Declaration Task HandleRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. MatchUrlPath(String) Matches the specified URL path against a module's BaseRoute , extracting values for the route's parameters and a sub-path. Declaration RouteMatch MatchUrlPath(string path) Parameters Type Name Description String path The URL path to match. Returns Type Description RouteMatch If the match is successful, a object; otherwise, null . Start(CancellationToken) Signals a module that the web server is starting. Declaration void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IWebModuleContainer.html": {
    "href": "api/EmbedIO.IWebModuleContainer.html",
    "title": "Interface IWebModuleContainer | EmbedIO",
    "keywords": "Interface IWebModuleContainer Represents an object that contains a collection of IWebModule interfaces. Namespace : EmbedIO Syntax public interface IWebModuleContainer Properties Modules Gets the modules. Declaration IComponentCollection<IWebModule> Modules { get; } Property Value Type Description IComponentCollection < IWebModule > The modules. SharedItems Gets a dictionary of data shared among the modules in a container. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in module development. Declaration ConcurrentDictionary<object, object> SharedItems { get; } Property Value Type Description ConcurrentDictionary < Object , Object > Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IWebModuleImpl.html": {
    "href": "api/EmbedIO.IWebModuleImpl.html",
    "title": "Interface IWebModuleImpl | EmbedIO",
    "keywords": "Interface IWebModuleImpl Represents a module implementation, i.e. a module as seen internally by EmbedIO. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in the implementation of EmbedIO plug-ins (e.g. modules). Inherited Members IWebModule.Container IWebModule.BaseRoute IWebModule.IsFinalHandler IWebModule.OnUnhandledException IWebModule.OnHttpException IWebModule.Start(CancellationToken) IWebModule.MatchUrlPath(String) IWebModule.HandleRequestAsync(IHttpContext) Namespace : EmbedIO Syntax public interface IWebModuleImpl : IWebModule Methods SetContainer(IWebModuleContainer) Sets the container of this module. This API supports the EmbedIO infrastructure; it is not intended to be used directly from your code. Declaration void SetContainer(IWebModuleContainer value) Parameters Type Name Description IWebModuleContainer value The container to associate this module with. See Also Container IWebModuleContainer Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.IWebServer.html": {
    "href": "api/EmbedIO.IWebServer.html",
    "title": "Interface IWebServer | EmbedIO",
    "keywords": "Interface IWebServer Represents a web server. The basic usage of a web server is as follows: add modules to the Modules collection; set a SessionManager if needed; call RunAsync(CancellationToken) to respond to incoming requests. Inherited Members IWebModuleContainer.Modules IWebModuleContainer.SharedItems IMimeTypeCustomizer.AddCustomMimeType(String, String) IMimeTypeCustomizer.PreferCompression(String, Boolean) IMimeTypeProvider.GetMimeType(String) IMimeTypeProvider.TryDetermineCompression(String, Boolean) Namespace : EmbedIO Syntax public interface IWebServer : IDisposable, IWebModuleContainer, IMimeTypeCustomizer, IMimeTypeProvider Properties OnHttpException Gets or sets a callback that is called every time a HTTP exception is thrown during the processing of a request. This property can never be null . Declaration HttpExceptionHandlerCallback OnHttpException { get; set; } Property Value Type Description HttpExceptionHandlerCallback See Also HttpExceptionHandler OnUnhandledException Gets or sets a callback that is called every time an unhandled exception occurs during the processing of a request. This property can never be null . If it is still Declaration ExceptionHandlerCallback OnUnhandledException { get; set; } Property Value Type Description ExceptionHandlerCallback See Also ExceptionHandler SessionManager Gets or sets the registered session ID manager, if any. A session ID manager is an implementation of . Note that this property can only be set before starting the web server. Declaration ISessionManager? SessionManager { get; set; } Property Value Type Description Nullable < ISessionManager > The session manager, or null if no session manager is present. State Gets the state of the web server. Declaration WebServerState State { get; } Property Value Type Description WebServerState The state. See Also WebServerState Methods RunAsync(CancellationToken) Starts the listener and the registered modules. Declaration Task RunAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token; when cancelled, the server cancels all pending requests and stops. Returns Type Description Task Returns the task that the HTTP listener is running inside of, so that it can be waited upon after it's been canceled. Events StateChanged Occurs when the State property changes. Declaration event EventHandler<WebServerStateChangedEventArgs> StateChanged Event Type Type Description EventHandler < WebServerStateChangedEventArgs > Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.MimeType.html": {
    "href": "api/EmbedIO.MimeType.html",
    "title": "Class MimeType | EmbedIO",
    "keywords": "Class MimeType Provides constants for commonly-used MIME types and association between file extensions and MIME types. Inheritance Object MimeType Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class MimeType Fields Default The default MIME type for data whose type is unknown, i.e. application/octet-stream . Declaration public const string Default = \"application/octet-stream\" Field Value Type Description String Html The MIME type for HTML, i.e. text/html . Declaration public const string Html = \"text/html\" Field Value Type Description String Json The MIME type for JSON, i.e. application/json . Declaration public const string Json = \"application/json\" Field Value Type Description String PlainText The MIME type for plain text, i.e. text/plain . Declaration public const string PlainText = \"text/plain\" Field Value Type Description String Properties Associations Associates file extensions to MIME types. Declaration public static IReadOnlyDictionary<string, string> Associations { get; } Property Value Type Description IReadOnlyDictionary < String , String > Remarks The list of MIME types has been copied from Samuel Neff's MIME Type Map on February 14th, 2020. Copyright (c) 2014 Samuel Neff. Redistributed under MIT license . Methods IsInRange(String, String) Matches the specified MIME type to a media range. Declaration public static bool IsInRange(string mimeType, string mediaRange) Parameters Type Name Description String mimeType The MIME type to match. String mediaRange The media range. Returns Type Description Boolean true if mediaRange is either the same as mimeType , or has the same type and a subtype of \" \" , or is \"/*\" . IsMimeType(String, Boolean) Determines whether the specified string is a valid MIME type or media range. Declaration public static bool IsMimeType(string value, bool acceptMediaRange) Parameters Type Name Description String value The value. Boolean acceptMediaRange If set to true , both media ranges (e.g. \"text/ \" , \"/*\" ) and specific MIME types (e.g. \"text/html\" ) are considered valid; if set to false , only specific MIME types are considered valid. Returns Type Description Boolean true if value is valid, according to the value of acceptMediaRange ; otherwise, false . Split(String) Splits the specified MIME type or media range into type and subtype. Declaration public static (string Type, string Subtype) Split(string mimeType) Parameters Type Name Description String mimeType The MIME type or media range to split. Returns Type Description ValueTuple < String , String > A tuple of type and subtype. StripParameters(String) Strips parameters, if present (e.g. ; encoding=UTF-8 ), from a MIME type. Declaration public static string StripParameters(string value) Parameters Type Name Description String value The MIME type. Returns Type Description String value without parameters. Remarks This method does not validate value : if it is not a valid MIME type or media range, it is just returned unchanged. See Also Associations Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.MimeTypeCustomizerExtensions.html": {
    "href": "api/EmbedIO.MimeTypeCustomizerExtensions.html",
    "title": "Class MimeTypeCustomizerExtensions | EmbedIO",
    "keywords": "Class MimeTypeCustomizerExtensions Provides extension methods for types implementing IMimeTypeCustomizer . Inheritance Object MimeTypeCustomizerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class MimeTypeCustomizerExtensions Methods PreferCompressionFor<T>(T, String) Indicates that compression should be preferred when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public static T PreferCompressionFor<T>(this T this, string mimeType) where T : IMimeTypeCustomizer Parameters Type Name Description T this The object to which this method is applied. String mimeType The MIME type or media range. Returns Type Description T this with the specified preference added. Type Parameters Name Description T The type of the object to which this method is applied. PreferCompressionFor<T>(T, String, Boolean) Indicates whether to prefer compression when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public static T PreferCompressionFor<T>(this T this, string mimeType, bool preferCompression) where T : IMimeTypeCustomizer Parameters Type Name Description T this The object to which this method is applied. String mimeType The MIME type or media range. Boolean preferCompression true to prefer compression; otherwise, false . Returns Type Description T this with the specified preference added. Type Parameters Name Description T The type of the object to which this method is applied. PreferNoCompressionFor<T>(T, String) Indicates that no compression should be preferred when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public static T PreferNoCompressionFor<T>(this T this, string mimeType) where T : IMimeTypeCustomizer Parameters Type Name Description T this The object to which this method is applied. String mimeType The MIME type or media range. Returns Type Description T this with the specified preference added. Type Parameters Name Description T The type of the object to which this method is applied. WithCustomMimeType<T>(T, String, String) Adds a custom association between a file extension and a MIME type. Declaration public static T WithCustomMimeType<T>(this T this, string extension, string mimeType) where T : IMimeTypeCustomizer Parameters Type Name Description T this The object to which this method is applied. String extension The file extension to associate to mimeType . String mimeType The MIME type to associate to extension . Returns Type Description T this with the custom association added. Type Parameters Name Description T The type of the object to which this method is applied. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ModuleGroup.html": {
    "href": "api/EmbedIO.ModuleGroup.html",
    "title": "Class ModuleGroup | EmbedIO",
    "keywords": "Class ModuleGroup Groups modules under a common base URL path. The BaseRoute property of modules contained in a ModuleGroup is relative to the ModuleGroup 's BaseRoute property. For example, given the following code: new ModuleGroup(\"/download\") .WithStaticFilesAt(\"/docs\", \"/var/my/documents\"); files contained in the /var/my/documents folder will be available to clients under the /download/docs/ URL. Inheritance Object WebModuleBase ModuleGroup Implements IWebModuleImpl IWebModule IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO Syntax public class ModuleGroup : WebModuleBase, IWebModuleImpl, IWebModule, IDisposable, IWebModuleContainer, IMimeTypeCustomizer, IMimeTypeProvider Constructors ModuleGroup(String, Boolean) Initializes a new instance of the ModuleGroup class. Declaration public ModuleGroup(string baseRoute, bool isFinalHandler) Parameters Type Name Description String baseRoute The base route served by this module. Boolean isFinalHandler The value to set the IsFinalHandler property to. See the help for the property for more information. See Also BaseRoute IsFinalHandler Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override sealed bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Modules Gets the modules. Declaration public IComponentCollection<IWebModule> Modules { get; } Property Value Type Description IComponentCollection < IWebModule > The modules. SharedItems Gets a dictionary of data shared among the modules in a container. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in module development. Declaration public ConcurrentDictionary<object, object> SharedItems { get; } Property Value Type Description ConcurrentDictionary < Object , Object > Methods AddCustomMimeType(String, String) Adds a custom association between a file extension and a MIME type. Declaration public void AddCustomMimeType(string extension, string mimeType) Parameters Type Name Description String extension The file extension to associate to mimeType . String mimeType The MIME type to associate to extension . Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the ModuleGroup class. Declaration protected void Finalize() GetMimeType(String) Gets the MIME type associated to a file extension. Declaration public string GetMimeType(string extension) Parameters Type Name Description String extension The file extension for which a corresponding MIME type is wanted. Returns Type Description String The MIME type corresponding to extension , if one is found; otherwise, null . OnBeforeLockConfiguration() Declaration protected override void OnBeforeLockConfiguration() OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) OnStart(CancellationToken) Called when a module is started, immediately before locking the module's configuration. Declaration protected override void OnStart(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Overrides WebModuleBase.OnStart(CancellationToken) PreferCompression(String, Boolean) Indicates whether to prefer compression when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public void PreferCompression(string mimeType, bool preferCompression) Parameters Type Name Description String mimeType The MIME type or media range. Boolean preferCompression true to prefer compression; otherwise, false . TryDetermineCompression(String, out Boolean) Attempts to determine whether compression should be preferred when negotiating content encoding for a response with the specified content type. Declaration public bool TryDetermineCompression(string mimeType, out bool preferCompression) Parameters Type Name Description String mimeType The MIME type to check. Boolean preferCompression When this method returns true , a value indicating whether compression should be preferred. This parameter is passed uninitialized. Returns Type Description Boolean true if a value is found for mimeType ; otherwise, false . Implements IWebModuleImpl IWebModule IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider See Also WebModuleBase IWebModuleContainer Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.CookieList.html": {
    "href": "api/EmbedIO.Net.CookieList.html",
    "title": "Class CookieList | EmbedIO",
    "keywords": "Class CookieList Provides a collection container for instances of . This class is meant to be used internally by EmbedIO; you don't need to use this class directly. Inheritance Object CookieList Implements ICookieCollection IEnumerable < Cookie > ICollection Namespace : EmbedIO.Net Syntax public sealed class CookieList : List<Cookie>, ICookieCollection, IEnumerable<Cookie>, ICollection Properties IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean Item[String] Gets the with the specified name. Declaration public Cookie? this[string name] { get; } Parameters Type Name Description String name The name. Property Value Type Description Nullable < Cookie > The . Methods Add(Cookie) Adds the specified cookie. Declaration public void Add(Cookie cookie) Parameters Type Name Description Cookie cookie The cookie. CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index Parse(String) Creates a CookieList by parsing the value of one or more Cookie or Set-Cookie headers. Declaration public static CookieList Parse(string headerValue) Parameters Type Name Description String headerValue The value, or comma-separated list of values, of the header or headers. Returns Type Description CookieList A newly-created instance of CookieList . Implements ICookieCollection IEnumerable<> ICollection Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.EndPointManager.html": {
    "href": "api/EmbedIO.Net.EndPointManager.html",
    "title": "Class EndPointManager | EmbedIO",
    "keywords": "Class EndPointManager Represents the EndPoint Manager. Inheritance Object EndPointManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Net Syntax public static class EndPointManager Properties UseIpv6 Gets or sets a value indicating whether [use IPv6]. By default, this flag is set. Declaration public static bool UseIpv6 { get; set; } Property Value Type Description Boolean true if [use IPv6]; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.html": {
    "href": "api/EmbedIO.Net.html",
    "title": "Namespace EmbedIO.Net | EmbedIO",
    "keywords": "Namespace EmbedIO.Net Classes CookieList Provides a collection container for instances of . This class is meant to be used internally by EmbedIO; you don't need to use this class directly. EndPointManager Represents the EndPoint Manager. HttpListener The EmbedIO implementation of the standard HTTP Listener class. Based on MONO HttpListener class. ResponseHeaderCollection Contains protocol headers associated with an HTTP response. Unlike , that supports a variety of scenarios, this class is only meant to be used for the Headers property of the IHttpResponse interface. Therefore, some header names are restricted and cannot be read or set through an instance of this class. The restricted headers are the following: Header name Rationale Connection Content-Encoding Content-Length Date Keep-Alive Sec-Web-Socket-Accept Sec-Web-Socket-Extensions Sec-Web-Socket-Protocol Sec-Web-Socket-Version Server Trailer Transfer-Encoding These headers are automatically managed by EmbedIO. Set-Cookie Set-Cookie2 Cookies are set through the Cookies property. Accept Accept-Charset Accept-Encoding Accept-Language Accept-Patch Accept-Ranges Access-Control-Request-Headers Access-Control-Request-Method Authorization Cookie Cookie2 Expect From Host If-Match If-Modified-Since If-None-Match If-Range If-Unmodified-Since Origin Proxy-Authorization Range Referer Sec-Web-Socket-Key TE Upgrade Upgrade-Insecure-Requests User-Agent These headers are only meant to be included in HTTP requests, not in responses. Age Proxy-Authentication Proxy-Connection Via These headers are only meant to be sent by proxies, not servers. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.HttpListener.html": {
    "href": "api/EmbedIO.Net.HttpListener.html",
    "title": "Class HttpListener | EmbedIO",
    "keywords": "Class HttpListener The EmbedIO implementation of the standard HTTP Listener class. Based on MONO HttpListener class. Inheritance Object HttpListener Implements IHttpListener IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Net Syntax public sealed class HttpListener : IHttpListener, IDisposable Constructors HttpListener(Nullable<X509Certificate>) Initializes a new instance of the HttpListener class. Declaration public HttpListener(X509Certificate? certificate = default(X509Certificate? )) Parameters Type Name Description Nullable < X509Certificate > certificate The certificate. Properties IgnoreWriteExceptions Gets or sets a value indicating whether the listener should ignore write exceptions. By default the flag is set on. Declaration public bool IgnoreWriteExceptions { get; set; } Property Value Type Description Boolean true if [ignore write exceptions]; otherwise, false . IsListening Gets a value indicating whether this instance is listening. Declaration public bool IsListening { get; } Property Value Type Description Boolean true if this instance is listening; otherwise, false . Name Gets or sets the name. Declaration public string Name { get; } Property Value Type Description String The name. Prefixes Gets the prefixes. Declaration public List<string> Prefixes { get; } Property Value Type Description List < String > The prefixes. Methods AddPrefix(String) Adds the prefix. Declaration public void AddPrefix(string urlPrefix) Parameters Type Name Description String urlPrefix The URL prefix. Dispose() Declaration public void Dispose() GetContextAsync(CancellationToken) Gets the HTTP context asynchronous. Declaration public Task<IHttpContextImpl> GetContextAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task < IHttpContextImpl > A task that represents the time delay for the HTTP Context. Start() Starts this listener. Declaration public void Start() Stop() Stops this listener. Declaration public void Stop() Implements IHttpListener IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.Internal.html": {
    "href": "api/EmbedIO.Net.Internal.html",
    "title": "Namespace EmbedIO.Net.Internal | EmbedIO",
    "keywords": "Namespace EmbedIO.Net.Internal Classes SystemHttpRequest Represents a wrapper for HttpListenerContext.Request. SystemHttpResponse Represents a wrapper for HttpListenerContext.Response. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.Internal.SystemHttpRequest.html": {
    "href": "api/EmbedIO.Net.Internal.SystemHttpRequest.html",
    "title": "Class SystemHttpRequest | EmbedIO",
    "keywords": "Class SystemHttpRequest Represents a wrapper for HttpListenerContext.Request. Inheritance Object SystemHttpRequest Implements IHttpRequest IHttpMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Net.Internal Syntax public class SystemHttpRequest : IHttpRequest, IHttpMessage Constructors SystemHttpRequest(Net.HttpListenerContext) Initializes a new instance of the SystemHttpRequest class. Declaration public SystemHttpRequest(Net.HttpListenerContext context) Parameters Type Name Description Net.HttpListenerContext context The context. Properties ContentEncoding Gets the content encoding. Declaration public Encoding ContentEncoding { get; } Property Value Type Description Encoding ContentLength64 Gets the content length. Declaration public long ContentLength64 { get; } Property Value Type Description Int64 ContentType Gets the type of the content. Declaration public string ContentType { get; } Property Value Type Description String Cookies Gets the cookies. Declaration public ICookieCollection Cookies { get; } Property Value Type Description ICookieCollection The cookies. HasEntityBody Gets a value indicating whether this instance has entity body. Declaration public bool HasEntityBody { get; } Property Value Type Description Boolean Headers Gets the request headers. Declaration public NameValueCollection Headers { get; } Property Value Type Description NameValueCollection HttpMethod Gets the HTTP method. Declaration public string HttpMethod { get; } Property Value Type Description String HttpVerb Gets a HttpVerb constant representing the HTTP method of the request. Declaration public HttpVerb HttpVerb { get; } Property Value Type Description HttpVerb InputStream Gets the input stream. Declaration public Stream InputStream { get; } Property Value Type Description Stream IsAuthenticated Gets a value indicating whether this instance is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean IsLocal Gets a value indicating whether this instance is local. Declaration public bool IsLocal { get; } Property Value Type Description Boolean IsSecureConnection Gets a value indicating whether this request has been received over a SSL connection. Declaration public bool IsSecureConnection { get; } Property Value Type Description Boolean IsWebSocketRequest Gets a value indicating whether this instance is web socket request. Declaration public bool IsWebSocketRequest { get; } Property Value Type Description Boolean KeepAlive Gets a value indicating whether [keep alive]. Declaration public bool KeepAlive { get; } Property Value Type Description Boolean LocalEndPoint Gets the local end point. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint ProtocolVersion Gets or sets the protocol version. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version The protocol version. QueryString Gets the query string. Declaration public NameValueCollection QueryString { get; } Property Value Type Description NameValueCollection RawUrl Gets the raw URL. Declaration public string RawUrl { get; } Property Value Type Description String RemoteEndPoint Gets the remote end point. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint Url Gets the requested URL. Declaration public Uri Url { get; } Property Value Type Description Uri UrlReferrer Declaration public Uri UrlReferrer { get; } Property Value Type Description Uri UserAgent Gets the user agent. Declaration public string UserAgent { get; } Property Value Type Description String Implements IHttpRequest IHttpMessage See Also IHttpRequest Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.Internal.SystemHttpResponse.html": {
    "href": "api/EmbedIO.Net.Internal.SystemHttpResponse.html",
    "title": "Class SystemHttpResponse | EmbedIO",
    "keywords": "Class SystemHttpResponse Represents a wrapper for HttpListenerContext.Response. Inheritance Object SystemHttpResponse Implements IHttpResponse IHttpMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Net.Internal Syntax public class SystemHttpResponse : IHttpResponse, IHttpMessage Constructors SystemHttpResponse(Net.HttpListenerContext) Initializes a new instance of the SystemHttpResponse class. Declaration public SystemHttpResponse(Net.HttpListenerContext context) Parameters Type Name Description Net.HttpListenerContext context The context. Properties ContentEncoding Gets or sets the content encoding. Declaration public Encoding? ContentEncoding { get; set; } Property Value Type Description Nullable < Encoding > ContentLength64 Gets or sets the content length. Declaration public long ContentLength64 { get; set; } Property Value Type Description Int64 ContentType Gets or sets the type of the content. Declaration public string ContentType { get; set; } Property Value Type Description String Cookies Gets the cookies. Declaration public ICookieCollection Cookies { get; } Property Value Type Description ICookieCollection The cookies. Headers Gets the response headers. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection KeepAlive Gets or sets a value indicating whether [keep alive]. Declaration public bool KeepAlive { get; set; } Property Value Type Description Boolean OutputStream Gets the output stream. Declaration public Stream OutputStream { get; } Property Value Type Description Stream ProtocolVersion Gets or sets the protocol version. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version The protocol version. SendChunked Gets or sets a value indicating whether the response uses chunked transfer encoding. Declaration public bool SendChunked { get; set; } Property Value Type Description Boolean StatusCode Gets or sets the status code. Declaration public int StatusCode { get; set; } Property Value Type Description Int32 StatusDescription Gets or sets a text description of the HTTP status code. Declaration public string StatusDescription { get; set; } Property Value Type Description String Methods Close() Closes this instance and dispose the resources. Declaration public void Close() SetCookie(Cookie) Sets the cookie. Declaration public void SetCookie(Cookie cookie) Parameters Type Name Description Cookie cookie The session cookie. Implements IHttpResponse IHttpMessage See Also IHttpResponse Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Net.ResponseHeaderCollection.html": {
    "href": "api/EmbedIO.Net.ResponseHeaderCollection.html",
    "title": "Class ResponseHeaderCollection | EmbedIO",
    "keywords": "Class ResponseHeaderCollection Contains protocol headers associated with an HTTP response. Unlike , that supports a variety of scenarios, this class is only meant to be used for the Headers property of the IHttpResponse interface. Therefore, some header names are restricted and cannot be read or set through an instance of this class. The restricted headers are the following: Header name Rationale Connection Content-Encoding Content-Length Date Keep-Alive Sec-Web-Socket-Accept Sec-Web-Socket-Extensions Sec-Web-Socket-Protocol Sec-Web-Socket-Version Server Trailer Transfer-Encoding These headers are automatically managed by EmbedIO. Set-Cookie Set-Cookie2 Cookies are set through the Cookies property. Accept Accept-Charset Accept-Encoding Accept-Language Accept-Patch Accept-Ranges Access-Control-Request-Headers Access-Control-Request-Method Authorization Cookie Cookie2 Expect From Host If-Match If-Modified-Since If-None-Match If-Range If-Unmodified-Since Origin Proxy-Authorization Range Referer Sec-Web-Socket-Key TE Upgrade Upgrade-Insecure-Requests User-Agent These headers are only meant to be included in HTTP requests, not in responses. Age Proxy-Authentication Proxy-Connection Via These headers are only meant to be sent by proxies, not servers. Inheritance Object ResponseHeaderCollection Namespace : EmbedIO.Net Syntax public sealed class ResponseHeaderCollection : NameValueCollection Properties AllKeys Declaration public override string[] AllKeys { get; } Property Value Type Description String [] Count Declaration public override int Count { get; } Property Value Type Description Int32 Keys Declaration public override KeysCollection Keys { get; } Property Value Type Description KeysCollection Methods Add(String, String) Declaration public override void Add(string name, string value) Parameters Type Name Description String name String value Clear() Declaration public override void Clear() Get(Int32) Declaration public override string Get(int index) Parameters Type Name Description Int32 index Returns Type Description String Get(String) Declaration public override string Get(string name) Parameters Type Name Description String name Returns Type Description String GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description IEnumerator GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 GetKey(Int32) Declaration public override string GetKey(int index) Parameters Type Name Description Int32 index Returns Type Description String GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context GetValues(Int32) Declaration public override string[] GetValues(int index) Parameters Type Name Description Int32 index Returns Type Description String [] GetValues(String) Declaration public override string[] GetValues(string name) Parameters Type Name Description String name Returns Type Description String [] IsRestrictedName(String) Determines whether a specified header name is restricted, i.e. its value cannot be read or set through a ResponseHeaderCollection . See the documentation for ResponseHeaderCollection for a list of restricted header names. Declaration public static bool IsRestrictedName(string name) Parameters Type Name Description String name The header name to test. Returns Type Description Boolean true if name is a restricted header name; otherwise, false . OnDeserialization(Object) Declaration public override void OnDeserialization(object sender) Parameters Type Name Description Object sender Remove(String) Declaration public override void Remove(string name) Parameters Type Name Description String name Set(String, String) Declaration public override void Set(string name, string value) Parameters Type Name Description String name String value ToString() Declaration public override string ToString() Returns Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.RequestDeserializer.html": {
    "href": "api/EmbedIO.RequestDeserializer.html",
    "title": "Class RequestDeserializer | EmbedIO",
    "keywords": "Class RequestDeserializer Provides standard request deserialization callbacks. Inheritance Object RequestDeserializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class RequestDeserializer Methods Default<TData>(IHttpContext) The default request deserializer used by EmbedIO. Equivalent to Json<TData>(IHttpContext) . Declaration public static Task<TData> Default<TData>(IHttpContext context) Parameters Type Name Description IHttpContext context The IHttpContext whose request body is to be deserialized. Returns Type Description Task <TData> A Task , representing the ongoing operation, whose result will be the deserialized data. Type Parameters Name Description TData The expected type of the deserialized data. Json<TData>(IHttpContext) Asynchronously deserializes a request body in JSON format. Declaration public static Task<TData> Json<TData>(IHttpContext context) Parameters Type Name Description IHttpContext context The IHttpContext whose request body is to be deserialized. Returns Type Description Task <TData> A Task , representing the ongoing operation, whose result will be the deserialized data. Type Parameters Name Description TData The expected type of the deserialized data. Json<TData>(JsonSerializerCase) Returns a RequestDeserializerCallback<TData> that will deserialize an HTTP request body in JSON format, using the specified property name casing. Declaration public static RequestDeserializerCallback<TData> Json<TData>(JsonSerializerCase jsonSerializerCase) Parameters Type Name Description JsonSerializerCase jsonSerializerCase The to use. Returns Type Description RequestDeserializerCallback <TData> A RequestDeserializerCallback<TData> that can be used to deserialize a JSON request body. Type Parameters Name Description TData The expected type of the deserialized data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.RequestDeserializerCallback-1.html": {
    "href": "api/EmbedIO.RequestDeserializerCallback-1.html",
    "title": "Delegate RequestDeserializerCallback<TData> | EmbedIO",
    "keywords": "Delegate RequestDeserializerCallback<TData> A callback used to deserialize an HTTP request body. Namespace : EmbedIO Syntax public delegate Task<TData> RequestDeserializerCallback<TData>(IHttpContext context); Parameters Type Name Description IHttpContext context The IHttpContext whose request body is to be deserialized. Returns Type Description Task <TData> A Task , representing the ongoing operation, whose result will be the deserialized data. Type Parameters Name Description TData The expected type of the deserialized data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.RequestHandler.html": {
    "href": "api/EmbedIO.RequestHandler.html",
    "title": "Class RequestHandler | EmbedIO",
    "keywords": "Class RequestHandler Provides standard request handler callbacks. Inheritance Object RequestHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class RequestHandler Methods PassThrough() Returns an exception object that, when thrown from a module's HandleRequestAsync(IHttpContext) method, will cause the HTTP context to be passed down along the module chain, regardless of the value of the module's IsFinalHandler property. Declaration public static Exception PassThrough() Returns Type Description Exception A newly-created . ThrowBadRequest(String) Returns a RequestHandlerCallback that unconditionally sends a 400 Bad Request response. Declaration public static RequestHandlerCallback ThrowBadRequest(string message = null) Parameters Type Name Description String message A message to include in the response. Returns Type Description RequestHandlerCallback A RequestHandlerCallback . ThrowForbidden(String) Returns a RequestHandlerCallback that unconditionally sends a 403 Forbidden response. Declaration public static RequestHandlerCallback ThrowForbidden(string message = null) Parameters Type Name Description String message A message to include in the response. Returns Type Description RequestHandlerCallback A RequestHandlerCallback . ThrowMethodNotAllowed(String) Returns a RequestHandlerCallback that unconditionally sends a 405 Method Not Allowed response. Declaration public static RequestHandlerCallback ThrowMethodNotAllowed(string message = null) Parameters Type Name Description String message A message to include in the response. Returns Type Description RequestHandlerCallback A RequestHandlerCallback . ThrowNotFound(String) Returns a RequestHandlerCallback that unconditionally sends a 404 Not Found response. Declaration public static RequestHandlerCallback ThrowNotFound(string message = null) Parameters Type Name Description String message A message to include in the response. Returns Type Description RequestHandlerCallback A RequestHandlerCallback . ThrowUnauthorized(String) Returns a RequestHandlerCallback that unconditionally sends a 401 Unauthorized response. Declaration public static RequestHandlerCallback ThrowUnauthorized(string message = null) Parameters Type Name Description String message A message to include in the response. Returns Type Description RequestHandlerCallback A RequestHandlerCallback . See Also RequestHandlerCallback Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.RequestHandlerCallback.html": {
    "href": "api/EmbedIO.RequestHandlerCallback.html",
    "title": "Delegate RequestHandlerCallback | EmbedIO",
    "keywords": "Delegate RequestHandlerCallback A callback used to handle a request. Namespace : EmbedIO Syntax public delegate Task RequestHandlerCallback(IHttpContext context); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. Returns Type Description Task A representing the ongoing operation. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ResponseSerializer.html": {
    "href": "api/EmbedIO.ResponseSerializer.html",
    "title": "Class ResponseSerializer | EmbedIO",
    "keywords": "Class ResponseSerializer Provides standard response serializer callbacks. Inheritance Object ResponseSerializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class ResponseSerializer Fields Default The default response serializer callback used by EmbedIO. Equivalent to Json(IHttpContext, Object) . Declaration public static readonly ResponseSerializerCallback Default Field Value Type Description ResponseSerializerCallback Methods Json(IHttpContext, Object) Serializes data in JSON format to a HTTP response, using the utility class. Declaration public static Task Json(IHttpContext context, object data) Parameters Type Name Description IHttpContext context The HTTP context of the request. Object data The data to serialize. Returns Type Description Task A representing the ongoing operation. Json(JsonSerializerCase) Serializes data in JSON format with the specified jsonSerializerCase to a HTTP response, using the utility class. Declaration public static ResponseSerializerCallback Json(JsonSerializerCase jsonSerializerCase) Parameters Type Name Description JsonSerializerCase jsonSerializerCase The JSON serializer case. Returns Type Description ResponseSerializerCallback A ResponseSerializerCallback that can be used to serialize data to a HTTP response. Json(SerializerOptions) Serializes data in JSON format with the specified serializerOptions to a HTTP response, using the utility class. Declaration public static ResponseSerializerCallback Json(SerializerOptions serializerOptions) Parameters Type Name Description SerializerOptions serializerOptions The JSON serializer options. Returns Type Description ResponseSerializerCallback A ResponseSerializerCallback that can be used to serialize data to a HTTP response. See Also ResponseSerializerCallback Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.ResponseSerializerCallback.html": {
    "href": "api/EmbedIO.ResponseSerializerCallback.html",
    "title": "Delegate ResponseSerializerCallback | EmbedIO",
    "keywords": "Delegate ResponseSerializerCallback A callback used to serialize data to a HTTP response. Namespace : EmbedIO Syntax public delegate Task ResponseSerializerCallback(IHttpContext context, object data); Parameters Type Name Description IHttpContext context The HTTP context of the request. Object data The data to serialize. Returns Type Description Task A representing the ongoing operation. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.BaseRouteAttribute.html": {
    "href": "api/EmbedIO.Routing.BaseRouteAttribute.html",
    "title": "Class BaseRouteAttribute | EmbedIO",
    "keywords": "Class BaseRouteAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. Inheritance Object RouteAttribute BaseRouteAttribute Inherited Members RouteAttribute.Verb RouteAttribute.Matcher RouteAttribute.Route RouteAttribute.IsBaseRoute Namespace : EmbedIO.Routing Syntax public class BaseRouteAttribute : RouteAttribute Constructors BaseRouteAttribute(HttpVerb, String) Initializes a new instance of the BaseRouteAttribute class. Declaration public BaseRouteAttribute(HttpVerb verb, string route) Parameters Type Name Description HttpVerb verb The verb. String route The route. See Also IsValid(String, Boolean) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.html": {
    "href": "api/EmbedIO.Routing.html",
    "title": "Namespace EmbedIO.Routing | EmbedIO",
    "keywords": "Namespace EmbedIO.Routing Classes BaseRouteAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. Route Provides utility methods to work with routes. RouteAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. RouteMatch Represents a route resolved by a RouteResolverBase<TData> . This class may be used both as a dictionary of route parameter names and values, and a list of the values. Because of its double nature, this class cannot be enumerated directly. However, you may use the Pairs property to iterate over name / value pairs, and the Values property to iterate over values. When enumerated in a non-generic fashion via the interface, this class iterates over name / value pairs. RouteMatcher Matches URL paths against a route. RouteResolverBase<TData> Implements the logic for resolving the requested path of a HTTP context against a route, possibly handling different contexts via different handlers. RouteResolverCollectionBase<TData, TResolver> Implements the logic for resolving a context and a URL path against a list of routes, possibly handling different HTTP methods via different handlers. RouteVerbResolver Handles a HTTP request by matching it against a route, possibly handling different HTTP methods via different handlers. RouteVerbResolverCollection Handles a HTTP request by matching it against a list of routes, possibly handling different HTTP methods via different handlers. RoutingModule A module that handles requests by resolving route / method pairs associated with handlers. RoutingModuleBase Base class for modules that handle requests by resolving route / method pairs associated with handlers. RoutingModuleExtensions Provides extension methods for RoutingModule . Enums RouteResolutionResult Represents the outcome of resolving a context and a path against a route. Delegates RouteHandlerCallback Base class for callbacks used to handle routed requests. SyncRouteHandlerCallback Base class for callbacks used to handle routed requests synchronously. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.Route.html": {
    "href": "api/EmbedIO.Routing.Route.html",
    "title": "Class Route | EmbedIO",
    "keywords": "Class Route Provides utility methods to work with routes. Inheritance Object Route Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Routing Syntax public static class Route Methods IsValid(String, Boolean) Determines whether a string is a valid route. To be considered a valid route, the specified string: must not be null ; must not be the empty string; must start with a slash ( '/' ) character; if a base route, must end with a slash ( '/' ) character; if not a base route, must not end with a slash ( '/' ) character, unless it is the only character in the string; must not contain consecutive runs of two or more slash ( '/' ) characters; may contain one or more parameter specifications. Each parameter specification must be enclosed in curly brackets ( '{' and '}' . No whitespace is allowed inside a parameter specification. Two parameter specifications must be separated by literal text. A parameter specification consists of a valid parameter name, optionally followed by a '?' character to signify that it will also match an empty string. If '?' is not present, a parameter by default will NOT match an empty string. See IsValidParameterName(String) for the definition of a valid parameter name. To include a literal open curly bracket in the route, it must be doubled ( \"{{\" ). A literal closed curly bracket ( '}' ) may be included in the route as-is. A segment of a base route cannot consist only of an optional parameter. Declaration public static bool IsValid(string route, bool isBaseRoute) Parameters Type Name Description String route The route to check. Boolean isBaseRoute true if checking for a base route; otherwise, false . Returns Type Description Boolean true if route is a valid route; otherwise, false . IsValidParameterName(String) Determines whether a string is a valid route parameter name. To be considered a valid route parameter name, the specified string: must not be null ; must not be the empty string; must consist entirely of decimal digits, upper- or lower-case letters of the English alphabet, or underscore ( '_' ) characters; must not start with a decimal digit. Declaration public static bool IsValidParameterName(string value) Parameters Type Name Description String value The value. Returns Type Description Boolean true if value is a valid route parameter; otherwise, false . See Also RouteAttribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteAttribute.html": {
    "href": "api/EmbedIO.Routing.RouteAttribute.html",
    "title": "Class RouteAttribute | EmbedIO",
    "keywords": "Class RouteAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. Inheritance Object RouteAttribute BaseRouteAttribute Namespace : EmbedIO.Routing Syntax public class RouteAttribute : Attribute Constructors RouteAttribute(HttpVerb, String, Boolean) Initializes a new instance of the RouteAttribute class. Declaration public RouteAttribute(HttpVerb verb, string route, bool isBaseRoute = false) Parameters Type Name Description HttpVerb verb The verb. String route The route. Boolean isBaseRoute true if this attribute represents a base route; false (the default) if it represents a terminal (non-base) route. See Also IsValid(String, Boolean) Properties IsBaseRoute Gets a value indicating whether this attribute represents a base route. Declaration public bool IsBaseRoute { get; } Property Value Type Description Boolean Matcher Gets a RouteMatcher that will match URLs against this attribute's data. Declaration public RouteMatcher Matcher { get; } Property Value Type Description RouteMatcher Route Gets the route handled by a method with this attribute. Declaration public string Route { get; } Property Value Type Description String Verb Gets the HTTP verb handled by a method with this attribute. Declaration public HttpVerb Verb { get; } Property Value Type Description HttpVerb Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteHandlerCallback.html": {
    "href": "api/EmbedIO.Routing.RouteHandlerCallback.html",
    "title": "Delegate RouteHandlerCallback | EmbedIO",
    "keywords": "Delegate RouteHandlerCallback Base class for callbacks used to handle routed requests. Namespace : EmbedIO.Routing Syntax public delegate Task RouteHandlerCallback(IHttpContext context, RouteMatch route); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. RouteMatch route The matched route. Returns Type Description Task A representing the ongoing operation. See Also RouteMatch Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteMatch.html": {
    "href": "api/EmbedIO.Routing.RouteMatch.html",
    "title": "Class RouteMatch | EmbedIO",
    "keywords": "Class RouteMatch Represents a route resolved by a RouteResolverBase<TData> . This class may be used both as a dictionary of route parameter names and values, and a list of the values. Because of its double nature, this class cannot be enumerated directly. However, you may use the Pairs property to iterate over name / value pairs, and the Values property to iterate over values. When enumerated in a non-generic fashion via the interface, this class iterates over name / value pairs. Inheritance Object RouteMatch Implements IReadOnlyDictionary < String , String > Namespace : EmbedIO.Routing Syntax public sealed class RouteMatch : IReadOnlyList<string>, IReadOnlyDictionary<string, string> Fields None A RouteMatch instance that represents no match. Declaration public static readonly RouteMatch None Field Value Type Description RouteMatch Remarks The RouteMatch instance returned by this property has the following specifications: its IsMatch property is the false ; its Path property is the empty string; it has no parameters; its SubPath property is the empty string. This instance can be used to initialize a non-nullable field or property of type RouteMatch Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsMatch Gets a value indicating whether this instance actually represents a match. Declaration public bool IsMatch { get; } Property Value Type Description Boolean Item[Int32] Declaration public string this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description String Item[String] Declaration public string this[string key] { get; } Parameters Type Name Description String key Property Value Type Description String Keys Declaration public IEnumerable<string> Keys { get; } Property Value Type Description IEnumerable < String > Names Gets a list of the names of the route's parameters. Declaration public IReadOnlyList<string> Names { get; } Property Value Type Description IReadOnlyList < String > Pairs Gets an interface that can be used to iterate over name / value pairs. Declaration public IEnumerable<KeyValuePair<string, string>> Pairs { get; } Property Value Type Description IEnumerable < KeyValuePair < String , String >> Path Gets the URL path that was successfully matched against the route. Declaration public string Path { get; } Property Value Type Description String SubPath Gets the part of Path that follows the matched route, prefixed by / . For a non-base route, this property is always / . Declaration public string SubPath { get; } Property Value Type Description String Values Declaration public IEnumerable<string> Values { get; } Property Value Type Description IEnumerable < String > Methods ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description String key Returns Type Description Boolean IndexOf(String) Returns the index of the parameter with the specified name. Declaration public int IndexOf(string name) Parameters Type Name Description String name The parameter name. Returns Type Description Int32 The index of the parameter, or -1 if none of the route parameters have the specified name. TryGetValue(String, out String) Declaration public bool TryGetValue(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean UnsafeFromBasePath(String, String) Returns a RouteMatch object equal to the one that would result by matching the specified URL path against the specified parameterless base route. Declaration public static RouteMatch UnsafeFromBasePath(string basePath, string path) Parameters Type Name Description String basePath The base route to match path against. String path The URL path to match. Returns Type Description RouteMatch A newly-constructed RouteMatch . Remarks This method assumes that basePath is a valid base URL path, and path is a valid, non-base URL path or route. Otherwise, the behavior of this method is unspecified. Ensure that you validate both parameters before calling this method, using either or . UnsafeFromRoot(String) Returns a RouteMatch object equal to the one that would result by matching the specified URL path against a base route of \"/\" . Declaration public static RouteMatch UnsafeFromRoot(string path) Parameters Type Name Description String path The URL path to match. Returns Type Description RouteMatch A newly-constructed RouteMatch . Remarks This method assumes that path is a valid, non-base URL path or route. Otherwise, the behavior of this method is unspecified. Ensure that you validate path before calling this method, using either or . Implements IReadOnlyDictionary<, > Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteMatcher.html": {
    "href": "api/EmbedIO.Routing.RouteMatcher.html",
    "title": "Class RouteMatcher | EmbedIO",
    "keywords": "Class RouteMatcher Matches URL paths against a route. Inheritance Object RouteMatcher Namespace : EmbedIO.Routing Syntax public sealed class RouteMatcher : IEquatable<RouteMatcher> Properties IsBaseRoute Gets a value indicating whether the Route property is a base route. Declaration public bool IsBaseRoute { get; } Property Value Type Description Boolean ParameterNames Gets the names of the route's parameters. Declaration public IReadOnlyList<string> ParameterNames { get; } Property Value Type Description IReadOnlyList < String > Route Gets the route this instance matches URL paths against. Declaration public string Route { get; } Property Value Type Description String Methods ClearCache() Clears RouteMatcher 's internal instance cache. Declaration public static void ClearCache() See Also Parse(String, Boolean) TryParse(String, Boolean, out RouteMatcher) Equals(RouteMatcher) Indicates whether this instance is equal to another instance of RouteMatcher . Declaration public bool Equals(RouteMatcher other) Parameters Type Name Description RouteMatcher other A RouteMatcher to compare with this instance. Returns Type Description Boolean true if this instance is equal to other ; otherwise, false . Equals(Object) Determines whether the specified Object is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with this instance. Returns Type Description Boolean true if obj is equal to this instance; otherwise, false . GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Match(String) Matches the specified URL path against Route and extracts values for the route's parameters. Declaration public RouteMatch Match(string path) Parameters Type Name Description String path The URL path to match. Returns Type Description RouteMatch If the match is successful, a RouteMatch object; otherwise, null . Parse(String, Boolean) Constructs an instance of RouteMatcher by parsing the specified route. If the same route was previously parsed and the ClearCache() method has not been called since, this method obtains an instance from a static cache. Declaration public static RouteMatcher Parse(string route, bool isBaseRoute) Parameters Type Name Description String route The route to parse. Boolean isBaseRoute true if the route to parse is a base route; otherwise, false . Returns Type Description RouteMatcher A newly-constructed instance of RouteMatcher that will match URL paths against route . See Also TryParse(String, Boolean, out RouteMatcher) ClearCache() TryParse(String, Boolean, out RouteMatcher) Attempts to obtain an instance of RouteMatcher by parsing the specified route. If the same route was previously parsed and the ClearCache() method has not been called since, this method obtains an instance from a static cache. Declaration public static bool TryParse(string route, bool isBaseRoute, out RouteMatcher result) Parameters Type Name Description String route The route to parse. Boolean isBaseRoute true if the route to parse is a base route; otherwise, false . RouteMatcher result When this method returns true , a newly-constructed instance of RouteMatcher that will match URL paths against route ; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if parsing was successful; otherwise, false . See Also Parse(String, Boolean) ClearCache() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteResolutionResult.html": {
    "href": "api/EmbedIO.Routing.RouteResolutionResult.html",
    "title": "Enum RouteResolutionResult | EmbedIO",
    "keywords": "Enum RouteResolutionResult Represents the outcome of resolving a context and a path against a route. Namespace : EmbedIO.Routing Syntax public enum RouteResolutionResult Fields Name Description NoHandlerSelected The route did match, but no registered handler was suitable for the context. NoHandlerSuccessful The route matched and one or more suitable handlers were found, but none of them returned true . RouteNotMatched The route didn't match. Success The route has been resolved. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteResolverBase-1.html": {
    "href": "api/EmbedIO.Routing.RouteResolverBase-1.html",
    "title": "Class RouteResolverBase<TData> | EmbedIO",
    "keywords": "Class RouteResolverBase<TData> Implements the logic for resolving the requested path of a HTTP context against a route, possibly handling different contexts via different handlers. Inheritance Object RouteResolverBase<TData> RouteVerbResolver Namespace : EmbedIO.Routing Syntax public abstract class RouteResolverBase<TData> : ConfiguredObject Type Parameters Name Description TData The type of the data used to select a suitable handler for the context. Constructors RouteResolverBase(RouteMatcher) Initializes a new instance of the RouteResolverBase<TData> class. Declaration protected RouteResolverBase(RouteMatcher matcher) Parameters Type Name Description RouteMatcher matcher The RouteMatcher to match URL paths against. Properties IsBaseRoute Gets a value indicating whether Route is a base route. Declaration public bool IsBaseRoute { get; } Property Value Type Description Boolean Matcher Gets the RouteMatcher used to match routes. Declaration public RouteMatcher Matcher { get; } Property Value Type Description RouteMatcher Route Gets the route this resolver matches URL paths against. Declaration public string Route { get; } Property Value Type Description String Methods Add(TData, RouteHandlerCallback) Associates some data to a handler. The ResolveAsync(IHttpContext) method calls GetContextData(IHttpContext) to extract data from the context; then, for each registered data / handler pair, MatchContextData(TData, TData) is called to determine whether handler should be called. Declaration public void Add(TData data, RouteHandlerCallback handler) Parameters Type Name Description TData data Data used to determine which contexts are suitable to be handled by handler . RouteHandlerCallback handler A callback used to handle matching contexts. See Also RouteHandlerCallback ResolveAsync(IHttpContext) GetContextData(IHttpContext) MatchContextData(TData, TData) Add(TData, SyncRouteHandlerCallback) Associates some data to a synchronous handler. The ResolveAsync(IHttpContext) method calls GetContextData(IHttpContext) to extract data from the context; then, for each registered data / handler pair, MatchContextData(TData, TData) is called to determine whether handler should be called. Declaration public void Add(TData data, SyncRouteHandlerCallback handler) Parameters Type Name Description TData data Data used to determine which contexts are suitable to be handled by handler . SyncRouteHandlerCallback handler A callback used to handle matching contexts. See Also RouteHandlerCallback ResolveAsync(IHttpContext) GetContextData(IHttpContext) MatchContextData(TData, TData) GetContextData(IHttpContext) Called by ResolveAsync(IHttpContext) to extract data from a context. The extracted data are then used to select which handlers are suitable to handle the context. Declaration protected abstract TData GetContextData(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context to extract data from. Returns Type Description TData The extracted data. See Also ResolveAsync(IHttpContext) MatchContextData(TData, TData) Lock() Locks this instance, preventing further handler additions. Declaration public void Lock() MatchContextData(TData, TData) Called by ResolveAsync(IHttpContext) to match data extracted from a context against data associated with a handler. Declaration protected abstract bool MatchContextData(TData contextData, TData handlerData) Parameters Type Name Description TData contextData The data extracted from the context. TData handlerData The data associated with the handler. Returns Type Description Boolean true if the handler should be called to handle the context; otherwise, false . ResolveAsync(IHttpContext) Asynchronously matches a URL path against Route ; if the match is successful, tries to handle the specified context using handlers selected according to data extracted from the context. Registered data / handler pairs are tried in the same order they were added. Declaration public Task<RouteResolutionResult> ResolveAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context to handle. Returns Type Description Task < RouteResolutionResult > A , representing the ongoing operation, that will return a result in the form of one of the RouteResolutionResult constants. See Also Add(TData, RouteHandlerCallback) Add(TData, SyncRouteHandlerCallback) GetContextData(IHttpContext) MatchContextData(TData, TData) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteResolverCollectionBase-2.html": {
    "href": "api/EmbedIO.Routing.RouteResolverCollectionBase-2.html",
    "title": "Class RouteResolverCollectionBase<TData, TResolver> | EmbedIO",
    "keywords": "Class RouteResolverCollectionBase<TData, TResolver> Implements the logic for resolving a context and a URL path against a list of routes, possibly handling different HTTP methods via different handlers. Inheritance Object RouteResolverCollectionBase<TData, TResolver> RouteVerbResolverCollection Namespace : EmbedIO.Routing Syntax public abstract class RouteResolverCollectionBase<TData, TResolver> : ConfiguredObject where TResolver : RouteResolverBase<TData> Type Parameters Name Description TData The type of the data used to select a suitable handler for a context. TResolver The type of the route resolver. Methods Add(TData, RouteMatcher, RouteHandlerCallback) Associates some data and a route to a handler. Declaration public void Add(TData data, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description TData data Data used to determine which contexts are suitable to be handled by handler . RouteMatcher matcher The RouteMatcher to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. See Also ResolveAsync(IHttpContext) Add(TData, RouteMatcher, SyncRouteHandlerCallback) Add (TData, RouteHandlerCallback ) Add(TData, RouteMatcher, SyncRouteHandlerCallback) Associates some data and a route to a synchronous handler. Declaration public void Add(TData data, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description TData data Data used to determine which contexts are suitable to be handled by handler . RouteMatcher matcher The RouteMatcher to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. See Also ResolveAsync(IHttpContext) Add(TData, RouteMatcher, RouteHandlerCallback) Add (TData, SyncRouteHandlerCallback ) CreateResolver(RouteMatcher) Called by Add(TData, RouteMatcher, RouteHandlerCallback) and Add(TData, RouteMatcher, SyncRouteHandlerCallback) to create an instance of TResolver that can resolve the specified route. If this method returns null , an is thrown by the calling method. Declaration protected abstract TResolver CreateResolver(RouteMatcher matcher) Parameters Type Name Description RouteMatcher matcher The RouteMatcher to match URL paths against. Returns Type Description TResolver A newly-constructed instance of TResolver . Lock() Locks this collection, preventing further additions. Declaration public void Lock() OnBeforeLockConfiguration() Declaration protected override void OnBeforeLockConfiguration() OnResolverCalled(IHttpContext, TResolver, RouteResolutionResult) Called by ResolveAsync(IHttpContext) when a resolver's ResolveAsync(IHttpContext) method has been called to resolve a context. This callback method may be used e.g. for logging or testing. Declaration protected virtual void OnResolverCalled(IHttpContext context, TResolver resolver, RouteResolutionResult result) Parameters Type Name Description IHttpContext context The context to handle. TResolver resolver The resolver just called. RouteResolutionResult result The result returned by resolver . ResolveAsync(IHttpContext) . ResolveAsync(IHttpContext) Asynchronously matches a URL path against Route ; if the match is successful, tries to handle the specified context using handlers selected according to data extracted from the context. Registered resolvers are tried in the same order they were added by calling . Declaration public Task<RouteResolutionResult> ResolveAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context to handle. Returns Type Description Task < RouteResolutionResult > A , representing the ongoing operation, that will return a result in the form of one of the RouteResolutionResult constants. See Also ResolveAsync ( IHttpContext ) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteVerbResolver.html": {
    "href": "api/EmbedIO.Routing.RouteVerbResolver.html",
    "title": "Class RouteVerbResolver | EmbedIO",
    "keywords": "Class RouteVerbResolver Handles a HTTP request by matching it against a route, possibly handling different HTTP methods via different handlers. Inheritance Object RouteResolverBase < HttpVerb > RouteVerbResolver Inherited Members RouteResolverBase<HttpVerb>.Matcher RouteResolverBase<HttpVerb>.Route RouteResolverBase<HttpVerb>.IsBaseRoute RouteResolverBase<HttpVerb>.Add(HttpVerb, RouteHandlerCallback) RouteResolverBase<HttpVerb>.Add(HttpVerb, SyncRouteHandlerCallback) RouteResolverBase<HttpVerb>.Lock() RouteResolverBase<HttpVerb>.ResolveAsync(IHttpContext) Namespace : EmbedIO.Routing Syntax public sealed class RouteVerbResolver : RouteResolverBase<HttpVerb> Constructors RouteVerbResolver(RouteMatcher) Initializes a new instance of the RouteVerbResolver class. Declaration public RouteVerbResolver(RouteMatcher matcher) Parameters Type Name Description RouteMatcher matcher The RouteMatcher to match URL paths against. Methods GetContextData(IHttpContext) Called by ResolveAsync(IHttpContext) to extract data from a context. The extracted data are then used to select which handlers are suitable to handle the context. Declaration protected override HttpVerb GetContextData(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context to extract data from. Returns Type Description HttpVerb The extracted data. Overrides EmbedIO.Routing.RouteResolverBase<EmbedIO.HttpVerb>.GetContextData(EmbedIO.IHttpContext) See Also ResolveAsync ( IHttpContext ) MatchContextData (TData, TData) MatchContextData(HttpVerb, HttpVerb) Called by ResolveAsync(IHttpContext) to match data extracted from a context against data associated with a handler. Declaration protected override bool MatchContextData(HttpVerb contextData, HttpVerb handlerData) Parameters Type Name Description HttpVerb contextData HttpVerb handlerData Returns Type Description Boolean true if the handler should be called to handle the context; otherwise, false . Overrides EmbedIO.Routing.RouteResolverBase<EmbedIO.HttpVerb>.MatchContextData(EmbedIO.HttpVerb, EmbedIO.HttpVerb) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RouteVerbResolverCollection.html": {
    "href": "api/EmbedIO.Routing.RouteVerbResolverCollection.html",
    "title": "Class RouteVerbResolverCollection | EmbedIO",
    "keywords": "Class RouteVerbResolverCollection Handles a HTTP request by matching it against a list of routes, possibly handling different HTTP methods via different handlers. Inheritance Object RouteResolverCollectionBase < HttpVerb , RouteVerbResolver > RouteVerbResolverCollection Inherited Members RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.Add(HttpVerb, RouteMatcher, RouteHandlerCallback) RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.Add(HttpVerb, RouteMatcher, SyncRouteHandlerCallback) RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.ResolveAsync(IHttpContext) RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.Lock() RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.OnBeforeLockConfiguration() RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.CreateResolver(RouteMatcher) RouteResolverCollectionBase<HttpVerb, RouteVerbResolver>.OnResolverCalled(IHttpContext, RouteVerbResolver, RouteResolutionResult) Namespace : EmbedIO.Routing Syntax public sealed class RouteVerbResolverCollection : RouteResolverCollectionBase<HttpVerb, RouteVerbResolver> Methods AddFrom(Object) Adds handlers, associating them with HTTP method / route pairs by means of RouteAttribute attributes. A compatible handler is a static or instance method that takes 2 parameters having the following types, in order: IHttpContext RouteMatch The return type of a compatible handler may be either langword_csharp_void or . A compatible handler, in order to be added to a RouteVerbResolverCollection , must have one or more RouteAttribute attributes. The same handler will be added once for each such attribute, either declared on the handler, or inherited (if the handler is a virtual method). This method behaves according to the type of the target parameter: if target is a , all public static methods of the type (either declared on the same type or inherited) that are compatible handlers will be added to the collection; if target is an , all public static methods of each exported type of the assembly (either declared on the same type or inherited) that are compatible handlers will be added to the collection; if target is a referring to a compatible handler, it will be added to the collection; if target is a langword_csharp_delegate whose Method refers to a compatible handler, that method will be added to the collection; if target is none of the above, all public instance methods of its type (either declared on the same type or inherited) that are compatible handlers will be bound to target and added to the collection. Declaration public int AddFrom(object target) Parameters Type Name Description Object target Where to look for compatible handlers. See the Summary section for more information. Returns Type Description Int32 The number of handlers that were added to the collection. Note that methods with multiple RouteAttribute attributes will count as one for each attribute. CreateResolver(RouteMatcher) Called by Add(TData, RouteMatcher, RouteHandlerCallback) and Add(TData, RouteMatcher, SyncRouteHandlerCallback) to create an instance of TResolver that can resolve the specified route. If this method returns null , an is thrown by the calling method. Declaration protected override RouteVerbResolver CreateResolver(RouteMatcher matcher) Parameters Type Name Description RouteMatcher matcher The RouteMatcher to match URL paths against. Returns Type Description RouteVerbResolver A newly-constructed instance of TResolver . Overrides EmbedIO.Routing.RouteResolverCollectionBase<EmbedIO.HttpVerb, EmbedIO.Routing.RouteVerbResolver>.CreateResolver(EmbedIO.Routing.RouteMatcher) OnResolverCalled(IHttpContext, RouteVerbResolver, RouteResolutionResult) Called by ResolveAsync(IHttpContext) when a resolver's ResolveAsync(IHttpContext) method has been called to resolve a context. This callback method may be used e.g. for logging or testing. Declaration protected override void OnResolverCalled(IHttpContext context, RouteVerbResolver resolver, RouteResolutionResult result) Parameters Type Name Description IHttpContext context The context to handle. RouteVerbResolver resolver RouteResolutionResult result The result returned by resolver . ResolveAsync(IHttpContext) . Overrides EmbedIO.Routing.RouteResolverCollectionBase<EmbedIO.HttpVerb, EmbedIO.Routing.RouteVerbResolver>.OnResolverCalled(EmbedIO.IHttpContext, EmbedIO.Routing.RouteVerbResolver, EmbedIO.Routing.RouteResolutionResult) See Also RouteResolverBase <TData> RouteVerbResolver Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RoutingModule.html": {
    "href": "api/EmbedIO.Routing.RoutingModule.html",
    "title": "Class RoutingModule | EmbedIO",
    "keywords": "Class RoutingModule A module that handles requests by resolving route / method pairs associated with handlers. Inheritance Object WebModuleBase RoutingModuleBase RoutingModule Implements IWebModuleImpl IWebModule Inherited Members RoutingModuleBase.IsFinalHandler RoutingModuleBase.OnRequestAsync(IHttpContext) RoutingModuleBase.AddHandler(HttpVerb, RouteMatcher, RouteHandlerCallback) RoutingModuleBase.AddHandler(HttpVerb, RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.AddHandlersFrom(Object) RoutingModuleBase.OnAny(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnAny(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnDelete(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnDelete(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnGet(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnGet(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnHead(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnHead(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnOptions(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnOptions(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnPatch(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnPatch(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnPost(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnPost(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnPut(RouteMatcher, RouteHandlerCallback) RoutingModuleBase.OnPut(RouteMatcher, SyncRouteHandlerCallback) RoutingModuleBase.OnPathNotFoundAsync(IHttpContext) RoutingModuleBase.OnMethodNotAllowedAsync(IHttpContext) WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Routing Syntax public class RoutingModule : RoutingModuleBase, IWebModuleImpl, IWebModule Constructors RoutingModule(String) Initializes a new instance of the RoutingModule class. Declaration public RoutingModule(string baseRoute) Parameters Type Name Description String baseRoute The base route served by this module. See Also BaseRoute Methods Add(HttpVerb, RouteMatcher, RouteHandlerCallback) Associates a HTTP method and a route to a handler. Declaration public void Add(HttpVerb verb, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Add(HttpVerb, RouteMatcher, SyncRouteHandlerCallback) Associates a HTTP method and a route to a synchronous handler. Declaration public void Add(HttpVerb verb, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. AddFrom(Object) Adds handlers, associating them with HTTP method / route pairs by means of RouteAttribute attributes. See AddFrom(Object) for further information. Declaration public int AddFrom(object target) Parameters Type Name Description Object target Where to look for compatible handlers. Returns Type Description Int32 The number of handlers that were added. Implements IWebModuleImpl IWebModule See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RoutingModuleBase.html": {
    "href": "api/EmbedIO.Routing.RoutingModuleBase.html",
    "title": "Class RoutingModuleBase | EmbedIO",
    "keywords": "Class RoutingModuleBase Base class for modules that handle requests by resolving route / method pairs associated with handlers. Inheritance Object WebModuleBase RoutingModuleBase RoutingModule Implements IWebModuleImpl IWebModule Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.OnStart(CancellationToken) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Routing Syntax public abstract class RoutingModuleBase : WebModuleBase, IWebModuleImpl, IWebModule Constructors RoutingModuleBase(String) Initializes a new instance of the RoutingModuleBase class. Declaration protected RoutingModuleBase(string baseRoute) Parameters Type Name Description String baseRoute The base route served by this module. See Also BaseRoute Properties IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Methods AddHandler(HttpVerb, RouteMatcher, RouteHandlerCallback) Associates a HTTP method and a route to a handler. Declaration protected void AddHandler(HttpVerb verb, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. AddHandler(HttpVerb, RouteMatcher, SyncRouteHandlerCallback) Associates a HTTP method and a route to a synchronous handler. Declaration protected void AddHandler(HttpVerb verb, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. AddHandlersFrom(Object) Adds handlers, associating them with HTTP method / route pairs by means of RouteAttribute attributes. See AddFrom(Object) for further information. Declaration protected int AddHandlersFrom(object target) Parameters Type Name Description Object target Where to look for compatible handlers. Returns Type Description Int32 The number of handlers that were added. OnAny(RouteMatcher, RouteHandlerCallback) Associates all requests matching a route to a handler. Declaration protected void OnAny(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnAny(RouteMatcher, SyncRouteHandlerCallback) Associates all requests matching a route to a synchronous handler. Declaration protected void OnAny(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnDelete(RouteMatcher, RouteHandlerCallback) Associates DELETE requests matching a route to a handler. Declaration protected void OnDelete(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnDelete(RouteMatcher, SyncRouteHandlerCallback) Associates DELETE requests matching a route to a synchronous handler. Declaration protected void OnDelete(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnGet(RouteMatcher, RouteHandlerCallback) Associates GET requests matching a route to a handler. Declaration protected void OnGet(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnGet(RouteMatcher, SyncRouteHandlerCallback) Associates GET requests matching a route to a synchronous handler. Declaration protected void OnGet(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnHead(RouteMatcher, RouteHandlerCallback) Associates HEAD requests matching a route to a handler. Declaration protected void OnHead(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnHead(RouteMatcher, SyncRouteHandlerCallback) Associates HEAD requests matching a route to a synchronous handler. Declaration protected void OnHead(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnMethodNotAllowedAsync(IHttpContext) Called when at least one route is matched for the requested URL path, but none of them is associated with the HTTP method of the request. The default behavior is to send an empty 405 Method Not Allowed response. Declaration protected virtual Task OnMethodNotAllowedAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. OnOptions(RouteMatcher, RouteHandlerCallback) Associates OPTIONS requests matching a route to a handler. Declaration protected void OnOptions(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnOptions(RouteMatcher, SyncRouteHandlerCallback) Associates OPTIONS requests matching a route to a synchronous handler. Declaration protected void OnOptions(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnPatch(RouteMatcher, RouteHandlerCallback) Associates PATCH requests matching a route to a handler. Declaration protected void OnPatch(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnPatch(RouteMatcher, SyncRouteHandlerCallback) Associates PATCH requests matching a route to a synchronous handler. Declaration protected void OnPatch(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnPathNotFoundAsync(IHttpContext) Called when no route is matched for the requested URL path. The default behavior is to send an empty 404 Not Found response. Declaration protected virtual Task OnPathNotFoundAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. OnPost(RouteMatcher, RouteHandlerCallback) Associates POST requests matching a route to a handler. Declaration protected void OnPost(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnPost(RouteMatcher, SyncRouteHandlerCallback) Associates POST requests matching a route to a synchronous handler. Declaration protected void OnPost(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnPut(RouteMatcher, RouteHandlerCallback) Associates PUT requests matching a route to a handler. Declaration protected void OnPut(RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. OnPut(RouteMatcher, SyncRouteHandlerCallback) Associates PUT requests matching a route to a synchronous handler. Declaration protected void OnPut(RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) Implements IWebModuleImpl IWebModule See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.RoutingModuleExtensions.html": {
    "href": "api/EmbedIO.Routing.RoutingModuleExtensions.html",
    "title": "Class RoutingModuleExtensions | EmbedIO",
    "keywords": "Class RoutingModuleExtensions Provides extension methods for RoutingModule . Inheritance Object RoutingModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Routing Syntax public static class RoutingModuleExtensions Methods Handle(RoutingModule, HttpVerb, RouteMatcher, RouteHandlerCallback) Adds a handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, RouteHandlerCallback) Handle(RoutingModule, HttpVerb, RouteMatcher, SyncRouteHandlerCallback) Adds a synchronous handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, SyncRouteHandlerCallback) Handle(RoutingModule, HttpVerb, String, RouteHandlerCallback) Adds a handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, RouteHandlerCallback) Handle(RoutingModule, HttpVerb, String, SyncRouteHandlerCallback) Adds a synchronous handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, RouteHandlerCallback) Handle(RoutingModule, HttpVerb, String, Boolean, RouteHandlerCallback) Adds a handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, RouteHandlerCallback) Handle(RoutingModule, HttpVerb, String, Boolean, SyncRouteHandlerCallback) Adds a synchronous handler to a RoutingModule . Declaration public static RoutingModule Handle(this RoutingModule this, HttpVerb verb, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. HttpVerb verb A HttpVerb constant representing the HTTP method to associate with handler , or Any if handler can handle all HTTP methods. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. See Also Add(HttpVerb, RouteMatcher, RouteHandlerCallback) OnAny(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates all requests matching a route to a handler. Declaration public static RoutingModule OnAny(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnAny(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates all requests matching a route to a synchronous handler. Declaration public static RoutingModule OnAny(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnAny(RoutingModule, String, RouteHandlerCallback) Associates all requests matching a route to a handler. Declaration public static RoutingModule OnAny(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnAny(RoutingModule, String, SyncRouteHandlerCallback) Associates all requests matching a route to a synchronous handler. Declaration public static RoutingModule OnAny(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnAny(RoutingModule, String, Boolean, RouteHandlerCallback) Associates all requests matching a route to a handler. Declaration public static RoutingModule OnAny(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnAny(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates all requests matching a route to a synchronous handler. Declaration public static RoutingModule OnAny(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates DELETE requests matching a route to a handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates DELETE requests matching a route to a synchronous handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, String, RouteHandlerCallback) Associates DELETE requests matching a route to a handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, String, SyncRouteHandlerCallback) Associates DELETE requests matching a route to a synchronous handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, String, Boolean, RouteHandlerCallback) Associates DELETE requests matching a route to a handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnDelete(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates DELETE requests matching a route to a synchronous handler. Declaration public static RoutingModule OnDelete(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates GET requests matching a route to a handler. Declaration public static RoutingModule OnGet(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates GET requests matching a route to a synchronous handler. Declaration public static RoutingModule OnGet(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, String, RouteHandlerCallback) Associates GET requests matching a route to a handler. Declaration public static RoutingModule OnGet(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, String, SyncRouteHandlerCallback) Associates GET requests matching a route to a synchronous handler. Declaration public static RoutingModule OnGet(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, String, Boolean, RouteHandlerCallback) Associates GET requests matching a route to a handler. Declaration public static RoutingModule OnGet(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnGet(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates GET requests matching a route to a synchronous handler. Declaration public static RoutingModule OnGet(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates HEAD requests matching a route to a handler. Declaration public static RoutingModule OnHead(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates HEAD requests matching a route to a synchronous handler. Declaration public static RoutingModule OnHead(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, String, RouteHandlerCallback) Associates HEAD requests matching a route to a handler. Declaration public static RoutingModule OnHead(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, String, SyncRouteHandlerCallback) Associates HEAD requests matching a route to a synchronous handler. Declaration public static RoutingModule OnHead(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, String, Boolean, RouteHandlerCallback) Associates HEAD requests matching a route to a handler. Declaration public static RoutingModule OnHead(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnHead(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates HEAD requests matching a route to a synchronous handler. Declaration public static RoutingModule OnHead(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates OPTIONS requests matching a route to a handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates OPTIONS requests matching a route to a synchronous handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, String, RouteHandlerCallback) Associates OPTIONS requests matching a route to a handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, String, SyncRouteHandlerCallback) Associates OPTIONS requests matching a route to a synchronous handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, String, Boolean, RouteHandlerCallback) Associates OPTIONS requests matching a route to a handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnOptions(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates OPTIONS requests matching a route to a synchronous handler. Declaration public static RoutingModule OnOptions(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates PATCH requests matching a route to a handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates PATCH requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, String, RouteHandlerCallback) Associates PATCH requests matching a route to a handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, String, SyncRouteHandlerCallback) Associates PATCH requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, String, Boolean, RouteHandlerCallback) Associates PATCH requests matching a route to a handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPatch(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates PATCH requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPatch(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates POST requests matching a route to a handler. Declaration public static RoutingModule OnPost(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates POST requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPost(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, String, RouteHandlerCallback) Associates POST requests matching a route to a handler. Declaration public static RoutingModule OnPost(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, String, SyncRouteHandlerCallback) Associates POST requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPost(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, String, Boolean, RouteHandlerCallback) Associates POST requests matching a route to a handler. Declaration public static RoutingModule OnPost(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPost(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates POST requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPost(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, RouteMatcher, RouteHandlerCallback) Associates PUT requests matching a route to a handler. Declaration public static RoutingModule OnPut(this RoutingModule this, RouteMatcher matcher, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, RouteMatcher, SyncRouteHandlerCallback) Associates PUT requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPut(this RoutingModule this, RouteMatcher matcher, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. RouteMatcher matcher The RouteMatcher used to match URL paths. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, String, RouteHandlerCallback) Associates PUT requests matching a route to a handler. Declaration public static RoutingModule OnPut(this RoutingModule this, string route, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, String, SyncRouteHandlerCallback) Associates PUT requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPut(this RoutingModule this, string route, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, String, Boolean, RouteHandlerCallback) Associates PUT requests matching a route to a handler. Declaration public static RoutingModule OnPut(this RoutingModule this, string route, bool isBaseRoute, RouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. RouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. OnPut(RoutingModule, String, Boolean, SyncRouteHandlerCallback) Associates PUT requests matching a route to a synchronous handler. Declaration public static RoutingModule OnPut(this RoutingModule this, string route, bool isBaseRoute, SyncRouteHandlerCallback handler) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. String route The route to match URL paths against. Boolean isBaseRoute true if route is a base route; false if route is a terminal (non-base) route. SyncRouteHandlerCallback handler A callback used to handle matching contexts. Returns Type Description RoutingModule this with the handler added. WithHandlersFrom(RoutingModule, Object) Adds handlers, associating them with HTTP method / route pairs by means of RouteAttribute attributes. See AddFrom(Object) for further information. Declaration public static RoutingModule WithHandlersFrom(this RoutingModule this, object target) Parameters Type Name Description RoutingModule this The RoutingModule on which this method is called. Object target Where to look for compatible handlers. Returns Type Description RoutingModule this with handlers added. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Routing.SyncRouteHandlerCallback.html": {
    "href": "api/EmbedIO.Routing.SyncRouteHandlerCallback.html",
    "title": "Delegate SyncRouteHandlerCallback | EmbedIO",
    "keywords": "Delegate SyncRouteHandlerCallback Base class for callbacks used to handle routed requests synchronously. Namespace : EmbedIO.Routing Syntax public delegate void SyncRouteHandlerCallback(IHttpContext context, RouteMatch route); Parameters Type Name Description IHttpContext context An IHttpContext interface representing the context of the request. RouteMatch route The matched route. See Also RouteMatch Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.BanInfo.html": {
    "href": "api/EmbedIO.Security.BanInfo.html",
    "title": "Class BanInfo | EmbedIO",
    "keywords": "Class BanInfo Contains information about the ban of an IP address. Inheritance Object BanInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Security Syntax public class BanInfo Properties ExpiresAt Gets or sets the expiration time of the ban. Declaration public long ExpiresAt { get; set; } Property Value Type Description Int64 IPAddress Gets or sets the banned IP address. Declaration public IPAddress IPAddress { get; set; } Property Value Type Description IPAddress IsExplicit Gets or sets a value indicating whether this instance was explicitly banned. Declaration public bool IsExplicit { get; set; } Property Value Type Description Boolean Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.html": {
    "href": "api/EmbedIO.Security.html",
    "title": "Namespace EmbedIO.Security | EmbedIO",
    "keywords": "Namespace EmbedIO.Security Classes BanInfo Contains information about the ban of an IP address. IPBanningConfiguration Represents a configuration object for IPBanningModule . IPBanningModule A module to ban clients by IP address, based on TCP requests-per-second or RegEx matches on log messages. IPBanningModuleExtensions Provides extension methods for IPBanningModule and derived classes. IPBanningRegexCriterion Represents a log message regex matching criterion for IPBanningModule . IPBanningRequestsCriterion Represents a maximun requests per second criterion for IPBanningModule . Interfaces IIPBanningCriterion Represents a criterion for IPBanningModule . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IIPBanningCriterion.html": {
    "href": "api/EmbedIO.Security.IIPBanningCriterion.html",
    "title": "Interface IIPBanningCriterion | EmbedIO",
    "keywords": "Interface IIPBanningCriterion Represents a criterion for IPBanningModule . Namespace : EmbedIO.Security Syntax public interface IIPBanningCriterion : IDisposable Methods ClearIPAddress(IPAddress) Clears the data generated by an IP address. Declaration void ClearIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. PurgeData() Purges the data of the Criterion. Declaration void PurgeData() ValidateIPAddress(IPAddress) Validates the IP address should be banned or not. Declaration Task<bool> ValidateIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. Returns Type Description Task < Boolean > true if the IP Address should be banned, otherwise false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IPBanningConfiguration.html": {
    "href": "api/EmbedIO.Security.IPBanningConfiguration.html",
    "title": "Class IPBanningConfiguration | EmbedIO",
    "keywords": "Class IPBanningConfiguration Represents a configuration object for IPBanningModule . Inheritance Object IPBanningConfiguration Implements IDisposable Namespace : EmbedIO.Security Syntax public class IPBanningConfiguration : ConfiguredObject, IDisposable Properties BlackList Gets the black list. Declaration public List<BanInfo> BlackList { get; } Property Value Type Description List < BanInfo > The black list. Methods CheckClient(IPAddress) Checks the client. Declaration public Task CheckClient(IPAddress clientAddress) Parameters Type Name Description IPAddress clientAddress The client address. Returns Type Description Task A representing the asynchronous operation. Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the IPBanningConfiguration class. Declaration protected void Finalize() Purge() Purges this instance. Declaration public void Purge() ShouldContinue(IPAddress) Check if a Criterion should continue testing an IP Address. Declaration public bool ShouldContinue(IPAddress address) Parameters Type Name Description IPAddress address The address. Returns Type Description Boolean true if the Criterion should continue, otherwise false . Implements IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IPBanningModule.html": {
    "href": "api/EmbedIO.Security.IPBanningModule.html",
    "title": "Class IPBanningModule | EmbedIO",
    "keywords": "Class IPBanningModule A module to ban clients by IP address, based on TCP requests-per-second or RegEx matches on log messages. Inheritance Object WebModuleBase IPBanningModule Implements IWebModuleImpl IWebModule IDisposable Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.Security Syntax public class IPBanningModule : WebModuleBase, IWebModuleImpl, IWebModule, IDisposable Constructors IPBanningModule(String, Nullable<IEnumerable<String>>, Int32) Initializes a new instance of the IPBanningModule class. Declaration public IPBanningModule(string baseRoute = \"/\", IEnumerable<string>? whitelist = default(IEnumerable<string>? ), int banMinutes = 30) Parameters Type Name Description String baseRoute The base route. Nullable < IEnumerable < String >> whitelist A collection of valid IPs that never will be banned. Int32 banMinutes Minutes that an IP will remain banned. Fields DefaultBanMinutes The default ban minutes. Declaration public const int DefaultBanMinutes = 30 Field Value Type Description Int32 Properties ClientAddress Gets the client address. Declaration public IPAddress? ClientAddress { get; } Property Value Type Description Nullable < IPAddress > The client address. IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Finalize() Finalizes an instance of the IPBanningModule class. Declaration protected void Finalize() GetBannedIPs(String) Gets the list of current banned IPs. Declaration public static IEnumerable<BanInfo> GetBannedIPs(string baseRoute = \"/\") Parameters Type Name Description String baseRoute The base route. Returns Type Description IEnumerable < BanInfo > A collection of BanInfo in the blacklist. OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) OnStart(CancellationToken) Called when a module is started, immediately before locking the module's configuration. Declaration protected override void OnStart(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Overrides WebModuleBase.OnStart(CancellationToken) RegisterCriterion(IIPBanningCriterion) Registers the criterion. Declaration public void RegisterCriterion(IIPBanningCriterion criterion) Parameters Type Name Description IIPBanningCriterion criterion The criterion. TryBanIP(IPAddress, DateTime, String, Boolean) Tries to ban an IP explicitly. Declaration public static bool TryBanIP(IPAddress address, DateTime banUntil, string baseRoute = \"/\", bool isExplicit = true) Parameters Type Name Description IPAddress address The IP address to ban. DateTime banUntil A specifying the expiration time of the ban. String baseRoute The base route. Boolean isExplicit true if the IP was explicitly banned. Returns Type Description Boolean true if the IP was added to the blacklist; otherwise, false . TryBanIP(IPAddress, Int32, String, Boolean) Tries to ban an IP explicitly. Declaration public static bool TryBanIP(IPAddress address, int banMinutes, string baseRoute = \"/\", bool isExplicit = true) Parameters Type Name Description IPAddress address The IP address to ban. Int32 banMinutes Minutes that the IP will remain banned. String baseRoute The base route. Boolean isExplicit true if the IP was explicitly banned. Returns Type Description Boolean true if the IP was added to the blacklist; otherwise, false . TryBanIP(IPAddress, TimeSpan, String, Boolean) Tries to ban an IP explicitly. Declaration public static bool TryBanIP(IPAddress address, TimeSpan banDuration, string baseRoute = \"/\", bool isExplicit = true) Parameters Type Name Description IPAddress address The IP address to ban. TimeSpan banDuration A specifying the duration that the IP will remain banned. String baseRoute The base route. Boolean isExplicit true if the IP was explicitly banned. Returns Type Description Boolean true if the IP was added to the blacklist; otherwise, false . TryUnbanIP(IPAddress, String) Tries to unban an IP explicitly. Declaration public static bool TryUnbanIP(IPAddress address, string baseRoute = \"/\") Parameters Type Name Description IPAddress address The IP address. String baseRoute The base route. Returns Type Description Boolean true if the IP was removed from the blacklist; otherwise, false . Implements IWebModuleImpl IWebModule IDisposable See Also WebModuleBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IPBanningModuleExtensions.html": {
    "href": "api/EmbedIO.Security.IPBanningModuleExtensions.html",
    "title": "Class IPBanningModuleExtensions | EmbedIO",
    "keywords": "Class IPBanningModuleExtensions Provides extension methods for IPBanningModule and derived classes. Inheritance Object IPBanningModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Security Syntax public static class IPBanningModuleExtensions Methods WithMaxRequestsPerSecond<TModule>(TModule, Int32) Sets a maximum amount of requests per second as a criterion for banning IP addresses. Declaration public static TModule WithMaxRequestsPerSecond<TModule>(this TModule this, int maxRequests = 50) where TModule : IPBanningModule Parameters Type Name Description TModule this The module on which this method is called. Int32 maxRequests The maximum requests per second. Returns Type Description TModule this with a maximum requests per second configured. Type Parameters Name Description TModule The type of the module. WithRegexRules<TModule>(TModule, Int32, Int32, String[]) Add a collection of Regex to match the log messages against as a criterion for banning IP addresses. Declaration public static TModule WithRegexRules<TModule>(this TModule this, int maxMatchCount, int secondsMatchingPeriod, params string[] value) where TModule : IPBanningModule Parameters Type Name Description TModule this The module on which this method is called. Int32 maxMatchCount The maximum match count. Int32 secondsMatchingPeriod The seconds matching period. String [] value A collection of regex to match log messages against. Returns Type Description TModule this with a fail regex criterion configured. Type Parameters Name Description TModule The type of the module. WithRegexRules<TModule>(TModule, String[]) Add a collection of Regex to match the log messages against as a criterion for banning IP addresses. Declaration public static TModule WithRegexRules<TModule>(this TModule this, params string[] value) where TModule : IPBanningModule Parameters Type Name Description TModule this The module on which this method is called. String [] value A collection of regex to match log messages against. Returns Type Description TModule this with a fail regex criterion configured. Type Parameters Name Description TModule The type of the module. WithWhitelist<TModule>(TModule, String[]) Adds a collection of valid IPs that never will be banned. Declaration public static TModule WithWhitelist<TModule>(this TModule this, params string[] value) where TModule : IPBanningModule Parameters Type Name Description TModule this The module on which this method is called. String [] value A collection of valid IPs that never will be banned. Returns Type Description TModule this with its whitelist configured. Type Parameters Name Description TModule The type of the module. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IPBanningRegexCriterion.html": {
    "href": "api/EmbedIO.Security.IPBanningRegexCriterion.html",
    "title": "Class IPBanningRegexCriterion | EmbedIO",
    "keywords": "Class IPBanningRegexCriterion Represents a log message regex matching criterion for IPBanningModule . Inheritance Object IPBanningRegexCriterion Implements IIPBanningCriterion IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Security Syntax public class IPBanningRegexCriterion : IIPBanningCriterion, IDisposable Constructors IPBanningRegexCriterion(IPBanningModule, IEnumerable<String>, Int32, Int32) Initializes a new instance of the IPBanningRegexCriterion class. Declaration public IPBanningRegexCriterion(IPBanningModule parent, IEnumerable<string> rules, int maxMatchCount = 10, int secondsMatchingPeriod = 60) Parameters Type Name Description IPBanningModule parent The parent. IEnumerable < String > rules The rules. Int32 maxMatchCount The maximum match count. Int32 secondsMatchingPeriod The seconds matching period. Fields DefaultMaxMatchCount The default maximum match count per period. Declaration public const int DefaultMaxMatchCount = 10 Field Value Type Description Int32 DefaultSecondsMatchingPeriod The default matching period. Declaration public const int DefaultSecondsMatchingPeriod = 60 Field Value Type Description Int32 Methods ClearIPAddress(IPAddress) Clears the data generated by an IP address. Declaration public void ClearIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Finalizes an instance of the IPBanningRegexCriterion class. Declaration protected void Finalize() PurgeData() Purges the data of the Criterion. Declaration public void PurgeData() ValidateIPAddress(IPAddress) Validates the IP address should be banned or not. Declaration public Task<bool> ValidateIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. Returns Type Description Task < Boolean > true if the IP Address should be banned, otherwise false . Implements IIPBanningCriterion IDisposable See Also IIPBanningCriterion Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Security.IPBanningRequestsCriterion.html": {
    "href": "api/EmbedIO.Security.IPBanningRequestsCriterion.html",
    "title": "Class IPBanningRequestsCriterion | EmbedIO",
    "keywords": "Class IPBanningRequestsCriterion Represents a maximun requests per second criterion for IPBanningModule . Inheritance Object IPBanningRequestsCriterion Implements IIPBanningCriterion IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Security Syntax public class IPBanningRequestsCriterion : IIPBanningCriterion, IDisposable Fields DefaultMaxRequestsPerSecond The default maximum request per second. Declaration public const int DefaultMaxRequestsPerSecond = 50 Field Value Type Description Int32 Methods ClearIPAddress(IPAddress) Clears the data generated by an IP address. Declaration public void ClearIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Finalize() Finalizes an instance of the IPBanningRequestsCriterion class. Declaration protected void Finalize() PurgeData() Purges the data of the Criterion. Declaration public void PurgeData() ValidateIPAddress(IPAddress) Validates the IP address should be banned or not. Declaration public Task<bool> ValidateIPAddress(IPAddress address) Parameters Type Name Description IPAddress address The address. Returns Type Description Task < Boolean > true if the IP Address should be banned, otherwise false . Implements IIPBanningCriterion IDisposable See Also IIPBanningCriterion Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.html": {
    "href": "api/EmbedIO.Sessions.html",
    "title": "Namespace EmbedIO.Sessions | EmbedIO",
    "keywords": "Namespace EmbedIO.Sessions Classes LocalSessionManager A simple session manager to handle in-memory sessions. Not for intensive use or for distributed applications. Session Provides useful constants related to session management. SessionExtensions Provides extension methods for types implementing ISession . SessionProxy Provides the same interface as a session object, plus a basic interface to a session manager. Interfaces ISession Represents a session. ISessionManager Represents a session manager, which is in charge of managing session objects and their association to HTTP contexts. ISessionProxy Represents a session proxy, i.e. an object that provides the same interface as a session object, plus a basic interface to a session manager. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.ISession.html": {
    "href": "api/EmbedIO.Sessions.ISession.html",
    "title": "Interface ISession | EmbedIO",
    "keywords": "Interface ISession Represents a session. Namespace : EmbedIO.Sessions Syntax public interface ISession Properties Count Gets the number of key/value pairs contained in a session. Declaration int Count { get; } Property Value Type Description Int32 The number of key/value pairs contained in the object that implements ISession . Duration Gets the time interval, starting from LastActivity , after which the session expires. Declaration TimeSpan Duration { get; } Property Value Type Description TimeSpan The expiration time. Id A unique identifier for the session. Declaration string Id { get; } Property Value Type Description String The unique identifier for this session. See Also IdComparison IdComparer IsEmpty Gets a value that indicates whether a session is empty. Declaration bool IsEmpty { get; } Property Value Type Description Boolean true if the object that implements ISession is empty, i.e. contains no key / value pairs; otherwise, false . Item[String] Gets or sets the value associated with the specified key. Note that a session does not store null values; therefore, setting this property to null has the same effect as removing key from the dictionary. Declaration object this[string key] { get; set; } Parameters Type Name Description String key The key of the value to get or set. Property Value Type Description Object The value associated with the specified key, if key is found in the dictionary; otherwise, null . LastActivity Gets the UTC date and time of last activity on the session. Declaration DateTime LastActivity { get; } Property Value Type Description DateTime The UTC date and time of last activity on the session. Methods Clear() Removes all keys and values from a session. Declaration void Clear() ContainsKey(String) Determines whether a session contains an element with the specified key. Declaration bool ContainsKey(string key) Parameters Type Name Description String key The key to locate in the object that implements ISession . Returns Type Description Boolean true if the object that implements ISession contains an element with the key; otherwise, false . TakeSnapshot() Takes and returns a snapshot of the contents of a session at the time of calling. Declaration IReadOnlyList<KeyValuePair<string, object>> TakeSnapshot() Returns Type Description IReadOnlyList < KeyValuePair < String , Object >> An IReadOnlyList<KeyValuePair<string,object>> interface containing an immutable copy of the session data as it was at the time of calling this method. Remarks The objects contained in the session data are copied by reference, not cloned; therefore you should be aware that their state may change even after the snapshot is taken. TryGetValue(String, out Object) Gets the value associated with the specified key. Declaration bool TryGetValue(string key, out object value) Parameters Type Name Description String key The key whose value to get. Object value When this method returns, the value associated with the specified key , if the key is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the object that implements ISession contains an element with the specified key; otherwise, false . TryRemove(String, out Object) Attempts to remove and return the value that has the specified key from a session. Declaration bool TryRemove(string key, out object value) Parameters Type Name Description String key The key of the element to remove and return. Object value When this method returns, the value removed from the object that implements ISession , if the key is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the value was removed successfully; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.ISessionManager.html": {
    "href": "api/EmbedIO.Sessions.ISessionManager.html",
    "title": "Interface ISessionManager | EmbedIO",
    "keywords": "Interface ISessionManager Represents a session manager, which is in charge of managing session objects and their association to HTTP contexts. Namespace : EmbedIO.Sessions Syntax public interface ISessionManager Methods Create(IHttpContext) Returns the session associated with an IHttpContext . If a session ID can be retrieved for the context and stored session data are available, the returned ISession will contain those data; otherwise, a new session is created and its ID is stored in the response to be retrieved by subsequent requests. Declaration ISession Create(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context. Returns Type Description ISession An ISession interface. Delete(IHttpContext) Deletes the session (if any) associated with the specified context. Declaration void Delete(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context. See Also Id OnContextClose(IHttpContext) Called by a session proxy when a session has been obtained for an IHttpContext and the context is closed, even if the session was subsequently deleted. This method can be used to save session data to a storage medium. Declaration void OnContextClose(IHttpContext context) Parameters Type Name Description IHttpContext context The IHttpContext for which a session was obtained. Start(CancellationToken) Signals a session manager that the web server is starting. Declaration void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token used to stop the web server. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.ISessionProxy.html": {
    "href": "api/EmbedIO.Sessions.ISessionProxy.html",
    "title": "Interface ISessionProxy | EmbedIO",
    "keywords": "Interface ISessionProxy Represents a session proxy, i.e. an object that provides the same interface as a session object, plus a basic interface to a session manager. Inherited Members ISession.Id ISession.Duration ISession.LastActivity ISession.Count ISession.IsEmpty ISession.Item[String] ISession.Clear() ISession.ContainsKey(String) ISession.TryGetValue(String, Object) ISession.TryRemove(String, Object) ISession.TakeSnapshot() Namespace : EmbedIO.Sessions Syntax public interface ISessionProxy : ISession Remarks A session proxy can be used just as if it were a session object. A session is automatically created wherever its data are accessed. Properties Exists Gets a value indicating whether a session exists for the current context. Declaration bool Exists { get; } Property Value Type Description Boolean true if a session exists; otherwise, false . Methods Delete() Deletes the session for the current context. Declaration void Delete() Regenerate() Deletes the session for the current context and creates a new one. Declaration void Regenerate() See Also ISession Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.LocalSessionManager.html": {
    "href": "api/EmbedIO.Sessions.LocalSessionManager.html",
    "title": "Class LocalSessionManager | EmbedIO",
    "keywords": "Class LocalSessionManager A simple session manager to handle in-memory sessions. Not for intensive use or for distributed applications. Inheritance Object LocalSessionManager Implements ISessionManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Sessions Syntax public class LocalSessionManager : ISessionManager Constructors LocalSessionManager() Initializes a new instance of the LocalSessionManager class with default values for all properties. Declaration public LocalSessionManager() See Also DefaultSessionDuration DefaultPurgeInterval DefaultCookieName DefaultCookiePath DefaultCookieDuration DefaultCookieHttpOnly Fields DefaultCookieDuration The default duration for session cookies, i.e. . Declaration public static readonly TimeSpan DefaultCookieDuration Field Value Type Description TimeSpan DefaultCookieHttpOnly The default HTTP-only flag for session cookies, i.e. true . Declaration public const bool DefaultCookieHttpOnly = true Field Value Type Description Boolean DefaultCookieName The default name for session cookies, i.e. \"__session\" . Declaration public const string DefaultCookieName = \"__session\" Field Value Type Description String DefaultCookiePath The default path for session cookies, i.e. \"/\" . Declaration public const string DefaultCookiePath = \"/\" Field Value Type Description String DefaultPurgeInterval The default interval between automatic purges of expired and empty sessions, i.e. 30 seconds. Declaration public static readonly TimeSpan DefaultPurgeInterval Field Value Type Description TimeSpan DefaultSessionDuration The default duration for sessions, i.e. 30 minutes. Declaration public static readonly TimeSpan DefaultSessionDuration Field Value Type Description TimeSpan Properties CookieDuration Gets or sets the duration of session cookies. Declaration public TimeSpan CookieDuration { get; set; } Property Value Type Description TimeSpan See Also DefaultCookieDuration CookieHttpOnly Gets or sets a value indicating whether session cookies are hidden from Javascript code running on a user agent. Declaration public bool CookieHttpOnly { get; set; } Property Value Type Description Boolean See Also DefaultCookieHttpOnly CookieName Gets or sets the name for session cookies. Declaration public string CookieName { get; set; } Property Value Type Description String See Also DefaultCookieName CookiePath Gets or sets the path for session cookies. Declaration public string CookiePath { get; set; } Property Value Type Description String See Also DefaultCookiePath PurgeInterval Gets or sets the interval between purges of expired sessions. Declaration public TimeSpan PurgeInterval { get; set; } Property Value Type Description TimeSpan See Also DefaultPurgeInterval SessionDuration Gets or sets the duration of newly-created sessions. Declaration public TimeSpan SessionDuration { get; set; } Property Value Type Description TimeSpan See Also DefaultSessionDuration Methods Create(IHttpContext) Returns the session associated with an IHttpContext . If a session ID can be retrieved for the context and stored session data are available, the returned ISession will contain those data; otherwise, a new session is created and its ID is stored in the response to be retrieved by subsequent requests. Declaration public ISession Create(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context. Returns Type Description ISession An ISession interface. Delete(IHttpContext) Deletes the session (if any) associated with the specified context. Declaration public void Delete(IHttpContext context) Parameters Type Name Description IHttpContext context The HTTP context. See Also Id OnContextClose(IHttpContext) Called by a session proxy when a session has been obtained for an IHttpContext and the context is closed, even if the session was subsequently deleted. This method can be used to save session data to a storage medium. Declaration public void OnContextClose(IHttpContext context) Parameters Type Name Description IHttpContext context The IHttpContext for which a session was obtained. Start(CancellationToken) Signals a session manager that the web server is starting. Declaration public void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token used to stop the web server. Implements ISessionManager Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.Session.html": {
    "href": "api/EmbedIO.Sessions.Session.html",
    "title": "Class Session | EmbedIO",
    "keywords": "Class Session Provides useful constants related to session management. Inheritance Object Session Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Sessions Syntax public static class Session Fields IdComparer The equality comparer used for session IDs. Corresponds to . Declaration public static readonly IEqualityComparer<string> IdComparer Field Value Type Description IEqualityComparer < String > IdComparison The used to disambiguate session IDs. Corresponds to . Declaration public const StringComparison IdComparison = null Field Value Type Description StringComparison KeyComparer The equality comparer used for session keys. Corresponds to . Declaration public static readonly IEqualityComparer<string> KeyComparer Field Value Type Description IEqualityComparer < String > KeyComparison The used to disambiguate session keys. Corresponds to . Declaration public const StringComparison KeyComparison = null Field Value Type Description StringComparison Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.SessionExtensions.html": {
    "href": "api/EmbedIO.Sessions.SessionExtensions.html",
    "title": "Class SessionExtensions | EmbedIO",
    "keywords": "Class SessionExtensions Provides extension methods for types implementing ISession . Inheritance Object SessionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Sessions Syntax public static class SessionExtensions Methods GetOrDefault<T>(ISession, String) Gets the value associated with the specified key. Declaration public static T GetOrDefault<T>(this ISession this, string key) Parameters Type Name Description ISession this The ISession on which this method is called. String key The key whose value to get from the session. Returns Type Description T The value associated with the specified key, if the key is found and the associated value is of type T ; otherwise, the default value for T . Type Parameters Name Description T The desired type of the value. GetOrDefault<T>(ISession, String, T) Gets the value associated with the specified key. Declaration public static T GetOrDefault<T>(this ISession this, string key, T defaultValue) Parameters Type Name Description ISession this The ISession on which this method is called. String key The key whose value to get from the session. T defaultValue The default value to return if the key is not found or its associated value is not of type T . Returns Type Description T The value associated with the specified key, if the key is found and the associated value is of type T ; otherwise, defaultValue . Type Parameters Name Description T The desired type of the value. TryGet<T>(ISession, String, out T) Gets the value associated with the specified key. Declaration public static bool TryGet<T>(this ISession this, string key, out T value) Parameters Type Name Description ISession this The ISession on which this method is called. String key The key whose value to get from the session. T value When this method returns, the value associated with the specified key, if the key is found and the associated value is of type T ; otherwise, the default value for T . This parameter is passed uninitialized. Returns Type Description Boolean true if the key is found and the associated value is of type T ; otherwise, false . Type Parameters Name Description T The desired type of the value. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Sessions.SessionProxy.html": {
    "href": "api/EmbedIO.Sessions.SessionProxy.html",
    "title": "Class SessionProxy | EmbedIO",
    "keywords": "Class SessionProxy Provides the same interface as a session object, plus a basic interface to a session manager. Inheritance Object SessionProxy Implements ISessionProxy ISession Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Sessions Syntax public sealed class SessionProxy : ISessionProxy, ISession Remarks A session proxy can be used just as if it were a session object. A session is automatically created wherever its data are accessed. Fields None A \"dummy\" ISessionProxy interface that will always behave as if no session manager has been defined. Useful to initialize non-nullable fields or properties of type ISessionProxy . Declaration public static readonly ISessionProxy None Field Value Type Description ISessionProxy Properties Count Gets the number of key/value pairs contained in a session. Declaration public int Count { get; } Property Value Type Description Int32 The number of key/value pairs contained in the object that implements ISession . Duration Gets the time interval, starting from LastActivity , after which the session expires. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan The expiration time. Exists Gets a value indicating whether a session exists for the current context. Declaration public bool Exists { get; } Property Value Type Description Boolean true if a session exists; otherwise, false . Id A unique identifier for the session. Declaration public string Id { get; } Property Value Type Description String The unique identifier for this session. See Also IdComparison IdComparer IsEmpty Gets a value that indicates whether a session is empty. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean true if the object that implements ISession is empty, i.e. contains no key / value pairs; otherwise, false . Item[String] Gets or sets the value associated with the specified key. Note that a session does not store null values; therefore, setting this property to null has the same effect as removing key from the dictionary. Declaration public object this[string key] { get; set; } Parameters Type Name Description String key The key of the value to get or set. Property Value Type Description Object The value associated with the specified key, if key is found in the dictionary; otherwise, null . LastActivity Gets the UTC date and time of last activity on the session. Declaration public DateTime LastActivity { get; } Property Value Type Description DateTime The UTC date and time of last activity on the session. Methods Clear() Removes all keys and values from a session. Declaration public void Clear() ContainsKey(String) Determines whether a session contains an element with the specified key. Declaration public bool ContainsKey(string key) Parameters Type Name Description String key The key to locate in the object that implements ISession . Returns Type Description Boolean true if the object that implements ISession contains an element with the key; otherwise, false . Delete() Deletes the session for the current context. Declaration public void Delete() Regenerate() Deletes the session for the current context and creates a new one. Declaration public void Regenerate() TakeSnapshot() Takes and returns a snapshot of the contents of a session at the time of calling. Declaration public IReadOnlyList<KeyValuePair<string, object>> TakeSnapshot() Returns Type Description IReadOnlyList < KeyValuePair < String , Object >> An IReadOnlyList<KeyValuePair<string,object>> interface containing an immutable copy of the session data as it was at the time of calling this method. Remarks The objects contained in the session data are copied by reference, not cloned; therefore you should be aware that their state may change even after the snapshot is taken. TryGetValue(String, out Object) Gets the value associated with the specified key. Declaration public bool TryGetValue(string key, out object value) Parameters Type Name Description String key The key whose value to get. Object value When this method returns, the value associated with the specified key , if the key is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the object that implements ISession contains an element with the specified key; otherwise, false . TryRemove(String, out Object) Attempts to remove and return the value that has the specified key from a session. Declaration public bool TryRemove(string key, out object value) Parameters Type Name Description String key The key of the element to remove and return. Object value When this method returns, the value removed from the object that implements ISession , if the key is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the value was removed successfully; otherwise, false . Implements ISessionProxy ISession See Also ISessionProxy Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.ComponentCollection-1.html": {
    "href": "api/EmbedIO.Utilities.ComponentCollection-1.html",
    "title": "Class ComponentCollection<T> | EmbedIO",
    "keywords": "Class ComponentCollection<T> Implements a collection of components. Each component in the collection may be given a unique name for later retrieval. Inheritance Object ComponentCollection<T> DisposableComponentCollection<T> Implements IComponentCollection <T> IReadOnlyList <T> Namespace : EmbedIO.Utilities Syntax public class ComponentCollection<T> : ConfiguredObject, IComponentCollection<T>, IReadOnlyList<T> Type Parameters Name Description T The type of components in the collection. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T Item[String] Gets the component with the specified name. Declaration public T this[string key] { get; } Parameters Type Name Description String key Property Value Type Description T The component. Named Gets an interface representing the named components. Declaration public IReadOnlyDictionary<string, T> Named { get; } Property Value Type Description IReadOnlyDictionary < String , T> The named components. WithSafeNames Gets an interface representing all components associated with safe names. The safe name of a component is never null . If a component's unique name if null , its safe name will be some non- null string somehow identifying it. Note that safe names are not necessarily unique. Declaration public IReadOnlyList<(string SafeName, T Component)> WithSafeNames { get; } Property Value Type Description IReadOnlyList < ValueTuple < String , T>> A list of s, each containing a safe name and a component. Methods Add(String, T) Adds a component to the collection, giving it the specified name if it is not null . Declaration public void Add(string name, T component) Parameters Type Name Description String name The name given to the module, or null . T component The component. GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Lock() Locks the collection, preventing further additions. Declaration public void Lock() Implements IComponentCollection<T> IReadOnlyList<> See Also IComponentCollection <T> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.ComponentCollectionExtensions.html": {
    "href": "api/EmbedIO.Utilities.ComponentCollectionExtensions.html",
    "title": "Class ComponentCollectionExtensions | EmbedIO",
    "keywords": "Class ComponentCollectionExtensions Provides extension methods for types implementing IComponentCollection<T> . Inheritance Object ComponentCollectionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class ComponentCollectionExtensions Methods Add<T>(IComponentCollection<T>, T) Adds the specified component to a collection, without giving it a name. Declaration public static void Add<T>(this IComponentCollection<T> this, T component) Parameters Type Name Description IComponentCollection <T> this The IComponentCollection<T> on which this method is called. T component The component to add. Type Parameters Name Description T The type of components in the collection. See Also Add ( String , T) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.ConfigurationLockSource.html": {
    "href": "api/EmbedIO.Utilities.ConfigurationLockSource.html",
    "title": "Class ConfigurationLockSource | EmbedIO",
    "keywords": "Class ConfigurationLockSource Signals to associated instances of LockToken that an object's configuration is locked. Inheritance Object LockTokenSource ConfigurationLockSource Inherited Members LockTokenSource.IsLocked LockTokenSource.Token LockTokenSource.Lock() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public class ConfigurationLockSource : LockTokenSource Constructors ConfigurationLockSource(String) Initializes a new instance of the ConfigurationLockSource class. The Message property of exceptions thrown by the ThrowIfLocked() method of tokens associated with this instance will include the specified description, in the following fashion: \"The configuration of {ownerDescription} is locked and cannot be further changed.\" . Declaration public ConfigurationLockSource(string ownerDescription) Parameters Type Name Description String ownerDescription A brief description of the object owning the configuration. ConfigurationLockSource(Type) Initializes a new instance of the ConfigurationLockSource class. The Message property of exceptions thrown by the ThrowIfLocked() method of tokens associated with this instance will mention the type of the object whose configuration is locked, including namespaces. Declaration public ConfigurationLockSource(Type ownerType) Parameters Type Name Description Type ownerType The type of the object owning the configuration. See Also LockTokenSource LockToken Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.DisposableComponentCollection-1.html": {
    "href": "api/EmbedIO.Utilities.DisposableComponentCollection-1.html",
    "title": "Class DisposableComponentCollection<T> | EmbedIO",
    "keywords": "Class DisposableComponentCollection<T> Implements a collection of components that automatically disposes each component implementing . Each component in the collection may be given a unique name for later retrieval. Inheritance Object ComponentCollection <T> DisposableComponentCollection<T> Implements IComponentCollection <T> IReadOnlyList <T> IDisposable Inherited Members ComponentCollection<T>.Count ComponentCollection<T>.Named ComponentCollection<T>.WithSafeNames ComponentCollection<T>.Item[Int32] ComponentCollection<T>.Item[String] ComponentCollection<T>.GetEnumerator() ComponentCollection<T>.Add(String, T) ComponentCollection<T>.Lock() Namespace : EmbedIO.Utilities Syntax public class DisposableComponentCollection<T> : ComponentCollection<T>, IComponentCollection<T>, IReadOnlyList<T>, IDisposable Type Parameters Name Description T The type of components in the collection. Methods Dispose() Releases unmanaged and - optionally - managed resources. Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; true to release only unmanaged resources. Finalize() Finalizes an instance of the DisposableComponentCollection<T> class. Declaration protected void Finalize() Implements IComponentCollection<T> IReadOnlyList<> IDisposable See Also ComponentCollection <T> IComponentCollection <T> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.html": {
    "href": "api/EmbedIO.Utilities.html",
    "title": "Namespace EmbedIO.Utilities | EmbedIO",
    "keywords": "Namespace EmbedIO.Utilities Classes ComponentCollection<T> Implements a collection of components. Each component in the collection may be given a unique name for later retrieval. ComponentCollectionExtensions Provides extension methods for types implementing IComponentCollection<T> . ConfigurationLockSource Signals to associated instances of LockToken that an object's configuration is locked. DisposableComponentCollection<T> Implements a collection of components that automatically disposes each component implementing . Each component in the collection may be given a unique name for later retrieval. HttpDate Provides standard methods to parse and format s according to various RFCs. IPParser Provides standard methods to parse IP address strings. LockedException The exception that is thrown when a LockToken has been locked. LockTokenSource Signals to associated instances of LockToken that some data is locked. MimeTypeProviderStack Manages a stack of MIME type providers. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. NameValueCollectionExtensions Provides extension methods for . QValueList Represents a list of names with associated quality values extracted from an HTTP header, e.g. gzip; q=0.9, deflate . See RFC7231, section 5.3 . This class ignores and discards extensions ( accept-ext in RFC7231 terminology). If a name has one or more parameters (e.g. text/html;level=1 ) it is not further parsed: parameters will appear as part of the name. QValueListExtensions Provides extension methods for QValueList . StringExtensions Provides extension methods for String . UniqueIdGenerator Generates locally unique string IDs, mainly for logging purposes. UrlEncodedDataParser Parses URL queries or URL-encoded HTML forms. UrlPath Provides utility methods to work with URL paths. Validate Provides validation methods for method arguments. ValidatedNotNullAttribute Indicates to static code analyzers that a parameter is guaranteed not to be null after a method returns. The presence of this attribute on a method parameter also relaxes null-validation requirements, thus suppressing the CA1062 warning on the parameter. Structs LockToken Propagates notification that some data has been locked and can no longer be modified. Interfaces IComponentCollection<T> Represents a collection of components. Each component in the collection may be given a unique name for later retrieval. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.HttpDate.html": {
    "href": "api/EmbedIO.Utilities.HttpDate.html",
    "title": "Class HttpDate | EmbedIO",
    "keywords": "Class HttpDate Provides standard methods to parse and format s according to various RFCs. Inheritance Object HttpDate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class HttpDate Methods Format(DateTime) Formats the specified according to RFC1123 . Declaration public static string Format(DateTime dateTime) Parameters Type Name Description DateTime dateTime The to format. Returns Type Description String A string containing the formatted dateTime . Format(DateTimeOffset) Formats the specified according to RFC1123 . Declaration public static string Format(DateTimeOffset dateTimeOffset) Parameters Type Name Description DateTimeOffset dateTimeOffset The to format. Returns Type Description String A string containing the formatted dateTimeOffset . TryParse(String, out DateTimeOffset) Attempts to parse a string containing a date and time, and possibly a time zone offset, in one of the formats specified in RFC850 , RFC1123 , and RFC5322 , or ANSI C's asctime() https://linux.die.net/man/3/asctime format. Declaration public static bool TryParse(string str, out DateTimeOffset result) Parameters Type Name Description String str The string to parse. DateTimeOffset result When this method returns true , a representing the parsed date, time, and time zone offset. This parameter is passed uninitialized. Returns Type Description Boolean true if str was successfully parsed; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.IComponentCollection-1.html": {
    "href": "api/EmbedIO.Utilities.IComponentCollection-1.html",
    "title": "Interface IComponentCollection<T> | EmbedIO",
    "keywords": "Interface IComponentCollection<T> Represents a collection of components. Each component in the collection may be given a unique name for later retrieval. Namespace : EmbedIO.Utilities Syntax public interface IComponentCollection<T> : IReadOnlyList<T> Type Parameters Name Description T The type of components in the collection. Properties Item[String] Gets the component with the specified name. Declaration T this[string name] { get; } Parameters Type Name Description String name The name. Property Value Type Description T The component. Named Gets an interface representing the named components. Declaration IReadOnlyDictionary<string, T> Named { get; } Property Value Type Description IReadOnlyDictionary < String , T> The named components. WithSafeNames Gets an interface representing all components associated with safe names. The safe name of a component is never null . If a component's unique name if null , its safe name will be some non- null string somehow identifying it. Note that safe names are not necessarily unique. Declaration IReadOnlyList<(string SafeName, T Component)> WithSafeNames { get; } Property Value Type Description IReadOnlyList < ValueTuple < String , T>> A list of s, each containing a safe name and a component. Methods Add(String, T) Adds a component to the collection, giving it the specified name if it is not null . Declaration void Add(string name, T component) Parameters Type Name Description String name The name given to the module, or null . T component The component. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.IPParser.html": {
    "href": "api/EmbedIO.Utilities.IPParser.html",
    "title": "Class IPParser | EmbedIO",
    "keywords": "Class IPParser Provides standard methods to parse IP address strings. Inheritance Object IPParser Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class IPParser Methods IsCidrNotation(String) Determines whether the IP-range string is in CIDR notation. Declaration public static bool IsCidrNotation(string range) Parameters Type Name Description String range The IP-range string. Returns Type Description Boolean true if the IP-range string is CIDR notation; otherwise, false . IsSimpleIPRange(String) Determines whether the IP-range string is in simple IP range notation. Declaration public static bool IsSimpleIPRange(string range) Parameters Type Name Description String range The IP-range string. Returns Type Description Boolean true if the IP-range string is in simple IP range notation; otherwise, false . ParseAsync(String) Parses the specified IP address. Declaration public static Task<IEnumerable<IPAddress>> ParseAsync(string address) Parameters Type Name Description String address The IP address. Returns Type Description Task < IEnumerable < IPAddress >> A collection of parsed correctly from address . ParseCidrNotation(String) Parse IP-range string in CIDR notation. For example \"12.15.0.0/16\". Declaration public static IEnumerable<IPAddress> ParseCidrNotation(string range) Parameters Type Name Description String range The IP-range string. Returns Type Description IEnumerable < IPAddress > A collection of parsed correctly from range . TryParseSimpleIPRange(String) Tries to parse IP-range string \"12.15-16.1-30.10-255\" Declaration public static IEnumerable<IPAddress> TryParseSimpleIPRange(string range) Parameters Type Name Description String range The IP-range string. Returns Type Description IEnumerable < IPAddress > A collection of parsed correctly from range . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.LockedException.html": {
    "href": "api/EmbedIO.Utilities.LockedException.html",
    "title": "Class LockedException | EmbedIO",
    "keywords": "Class LockedException The exception that is thrown when a LockToken has been locked. Inheritance Object LockedException Namespace : EmbedIO.Utilities Syntax public class LockedException : InvalidOperationException Constructors LockedException() Initializes a new instance of the LockedException class. Declaration public LockedException() LockedException(LockToken) Initializes a new instance of the LockedException class. Declaration public LockedException(LockToken token) Parameters Type Name Description LockToken token A LockToken associated with the exception. LockedException(SerializationInfo, StreamingContext) Initializes a new instance of the LockedException class. Declaration protected LockedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. LockedException(String) Initializes a new instance of the LockedException class. Declaration public LockedException(string message) Parameters Type Name Description String message The message that describes the error. LockedException(String, LockToken) Initializes a new instance of the LockedException class. Declaration public LockedException(string message, LockToken token) Parameters Type Name Description String message The message that describes the error. LockToken token A LockToken associated with the exception. LockedException(String, Nullable<Exception>) Initializes a new instance of the LockedException class. Declaration public LockedException(string message, Exception? innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Nullable < Exception > innerException The exception that is the cause of the current exception. If this parameter is not null , the current exception is raised in a catch block that handles the inner exception. LockedException(String, Nullable<Exception>, LockToken) Initializes a new instance of the LockedException class. Declaration public LockedException(string message, Exception? innerException, LockToken token) Parameters Type Name Description String message The error message that explains the reason for the exception. Nullable < Exception > innerException The exception that is the cause of the current exception. If this parameter is not null , the current exception is raised in a catch block that handles the inner exception. LockToken token A LockToken associated with the exception. Properties Token Gets a LockToken associated with the locked configuration. Declaration public LockToken Token { get; } Property Value Type Description LockToken Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.LockToken.html": {
    "href": "api/EmbedIO.Utilities.LockToken.html",
    "title": "Struct LockToken | EmbedIO",
    "keywords": "Struct LockToken Propagates notification that some data has been locked and can no longer be modified. Implements IEquatable < LockToken > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : EmbedIO.Utilities Syntax public struct LockToken : IEquatable<LockToken> Remarks A LockToken is usually created through the Token property of an instance of LockTokenSource . Once locked, a token will never transition to a non-locked state. The special token named None , equal to langword_csharp_default (LockToken) , is the only token that can never be locked. All members of this langword_csharp_struct are thread-safe and may be used concurrently from multiple threads. Properties IsLocked Gets whether this token is locked. Declaration public bool IsLocked { get; } Property Value Type Description Boolean None Gets an empty LockToken , i.e. a token that has no source and will never be locked. The value of this property is equal to langword_csharp_default (LockToken) . Declaration public static LockToken None { get; } Property Value Type Description LockToken Methods Equals(LockToken) Determines whether the current LockToken instance is equal to the specified token. Declaration public bool Equals(LockToken other) Parameters Type Name Description LockToken other The other LockToken to compare with this instance. Returns Type Description Boolean true if the instances are equal; otherwise, false . See the Remarks section for more information. Remarks Two lock tokens are equal if any one of the following conditions is true: they are associated with the same LockTokenSource ; the value of both tokens is None . Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ThrowIfLocked() Throws a LockedException if this token is locked. Declaration public void ThrowIfLocked() Exceptions Type Condition LockedException The token is locked. Operators Equality(LockToken, LockToken) Determines whether two LockToken instances are equal. Declaration public static bool operator ==(LockToken a, LockToken b) Parameters Type Name Description LockToken a The first instance. LockToken b The second instance. Returns Type Description Boolean true if the instances are equal; otherwise, false . For the definition of equality, see the Equals(LockToken) method. See Also Inequality(LockToken, LockToken) Inequality(LockToken, LockToken) Determines whether two LockToken instances are not equal. Declaration public static bool operator !=(LockToken a, LockToken b) Parameters Type Name Description LockToken a The first instance. LockToken b The second instance. Returns Type Description Boolean true if the instances are not equal; otherwise, false . For the definition of equality, see the Equals(LockToken) method. See Also Equality(LockToken, LockToken) Implements IEquatable<> See Also LockTokenSource Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.LockTokenSource.html": {
    "href": "api/EmbedIO.Utilities.LockTokenSource.html",
    "title": "Class LockTokenSource | EmbedIO",
    "keywords": "Class LockTokenSource Signals to associated instances of LockToken that some data is locked. Inheritance Object LockTokenSource ConfigurationLockSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public class LockTokenSource Remarks LockTokenSource is used to instantiate a LockToken (via the source's Token property) that can be handed to owned objects that wish to be notified of data locking. All members of this class are thread-safe and may be used concurrently from multiple threads. Constructors LockTokenSource(String) Initializes a new instance of the LockTokenSource class. The Message property of exceptions thrown will include the specified description, in the following fashion: \"The configuration of {ownerDescription} is locked and cannot be further changed.\" . Declaration public LockTokenSource(string exceptionMessage) Parameters Type Name Description String exceptionMessage The message to set on instances of LockedException thrown by the ThrowIfLocked() method of tokens associated with this instance. Properties IsLocked Gets whether this LockTokenSource has been locked. Declaration public bool IsLocked { get; } Property Value Type Description Boolean Token Gets a LockToken associated with this LockTokenSource . Declaration public LockToken Token { get; } Property Value Type Description LockToken Methods Lock() Communicates that data is locked. Declaration public void Lock() See Also LockToken Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.MimeTypeProviderStack.html": {
    "href": "api/EmbedIO.Utilities.MimeTypeProviderStack.html",
    "title": "Class MimeTypeProviderStack | EmbedIO",
    "keywords": "Class MimeTypeProviderStack Manages a stack of MIME type providers. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Inheritance Object MimeTypeProviderStack Implements IMimeTypeProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public sealed class MimeTypeProviderStack : IMimeTypeProvider Methods GetMimeType(String) Gets the MIME type associated to a file extension. Declaration public string GetMimeType(string extension) Parameters Type Name Description String extension The file extension for which a corresponding MIME type is wanted. Returns Type Description String The MIME type corresponding to extension , if one is found; otherwise, null . Pop() Removes the most recently added MIME type provider from the stack. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration public void Pop() Push(IMimeTypeProvider) Pushes the specified MIME type provider on the stack. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration public void Push(IMimeTypeProvider provider) Parameters Type Name Description IMimeTypeProvider provider The IMimeTypeProvider interface to push on the stack. TryDetermineCompression(String, out Boolean) Attempts to determine whether compression should be preferred when negotiating content encoding for a response with the specified content type. Declaration public bool TryDetermineCompression(string mimeType, out bool preferCompression) Parameters Type Name Description String mimeType The MIME type to check. Boolean preferCompression When this method returns true , a value indicating whether compression should be preferred. This parameter is passed uninitialized. Returns Type Description Boolean true if a value is found for mimeType ; otherwise, false . Implements IMimeTypeProvider See Also IMimeTypeProvider Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.NameValueCollectionExtensions.html": {
    "href": "api/EmbedIO.Utilities.NameValueCollectionExtensions.html",
    "title": "Class NameValueCollectionExtensions | EmbedIO",
    "keywords": "Class NameValueCollectionExtensions Provides extension methods for . Inheritance Object NameValueCollectionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class NameValueCollectionExtensions Methods Contains(NameValueCollection, String, String) Determines whether a contains one or more values for the specified name , at least one of which is equal to the specified value . Value comparisons are carried out using the comparison type. Declaration public static bool Contains(this NameValueCollection this, string name, string value) Parameters Type Name Description NameValueCollection this The on which this method is called. String name The name to look for. String value The value to look for. Returns Type Description Boolean true if at least one of the values for name in the collection is equal to value ; otherwise, false . Remarks White space is trimmed from the start and end of each value before comparison. See Also Contains(NameValueCollection, String, String, StringComparison) Contains(NameValueCollection, String, String, StringComparison) Determines whether a contains one or more values for the specified name , at least one of which is equal to the specified value . Value comparisons are carried out using the specified comparisonType . Declaration public static bool Contains(this NameValueCollection this, string name, string value, StringComparison comparisonType) Parameters Type Name Description NameValueCollection this The on which this method is called. String name The name to look for. String value The value to look for. StringComparison comparisonType One of the enumeration values that specifies how the strings will be compared. Returns Type Description Boolean true if at least one of the values for name in the collection is equal to value ; otherwise, false . Remarks White space is trimmed from the start and end of each value before comparison. See Also Contains(NameValueCollection, String, String) ContainsKey(NameValueCollection, String) Determines whether a contains one or more values for the specified key . Declaration public static bool ContainsKey(this NameValueCollection this, string key) Parameters Type Name Description NameValueCollection this The on which this method is called. String key The key to look for. Returns Type Description Boolean true if at least one value for key is present in the collection; otherwise, false . ToArrayDictionary(NameValueCollection) Converts a to a dictionary of arrays of strings. Declaration public static Dictionary<string, string[]> ToArrayDictionary(this NameValueCollection this) Parameters Type Name Description NameValueCollection this The on which this method is called. Returns Type Description Dictionary < String , String []> A associating the collection's keys with arrays of their values. ToDictionary(NameValueCollection) Converts a to a dictionary of objects. Values in the returned dictionary will wither be strings, or arrays of strings, depending on the presence of multiple values for the same key in the collection. Declaration public static Dictionary<string, object> ToDictionary(this NameValueCollection this) Parameters Type Name Description NameValueCollection this The on which this method is called. Returns Type Description Dictionary < String , Object > A associating the collection's keys with their values. ToStringDictionary(NameValueCollection) Converts a to a dictionary of strings. Declaration public static Dictionary<string, string> ToStringDictionary(this NameValueCollection this) Parameters Type Name Description NameValueCollection this The on which this method is called. Returns Type Description Dictionary < String , String > A associating the collection's keys with their values (or comma-separated lists in case of multiple values). Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.QValueList.html": {
    "href": "api/EmbedIO.Utilities.QValueList.html",
    "title": "Class QValueList | EmbedIO",
    "keywords": "Class QValueList Represents a list of names with associated quality values extracted from an HTTP header, e.g. gzip; q=0.9, deflate . See RFC7231, section 5.3 . This class ignores and discards extensions ( accept-ext in RFC7231 terminology). If a name has one or more parameters (e.g. text/html;level=1 ) it is not further parsed: parameters will appear as part of the name. Inheritance Object QValueList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public sealed class QValueList Constructors QValueList(Boolean, IEnumerable<String>) Initializes a new instance of the QValueList class by parsing comma-separated request header values. Declaration public QValueList(bool useWildcard, IEnumerable<string> headerValues) Parameters Type Name Description Boolean useWildcard If set to true , a value of * will be treated as signifying \"anything\". IEnumerable < String > headerValues An enumeration of header values. Note that each element of the enumeration may in turn be a comma-separated list. See Also UseWildcard QValueList(Boolean, String) Initializes a new instance of the QValueList class by parsing comma-separated request header values. Declaration public QValueList(bool useWildcard, string headerValues) Parameters Type Name Description Boolean useWildcard If set to true , a value of * will be treated as signifying \"anything\". String headerValues A list of comma-separated header values. See Also UseWildcard QValueList(Boolean, String[]) Initializes a new instance of the QValueList class by parsing comma-separated request header values. Declaration public QValueList(bool useWildcard, params string[] headerValues) Parameters Type Name Description Boolean useWildcard If set to true , a value of * will be treated as signifying \"anything\". String [] headerValues An array of header values. Note that each element of the array may in turn be a comma-separated list. See Also UseWildcard Fields Wildcard A value signifying \"anything will do\" in request headers. For example, a request header of Accept-Encoding: *;q=0.8, gzip means \"I prefer GZip compression; if it is not available, any other compression (including no compression at all) is OK for me\". Declaration public const string Wildcard = \"*\" Field Value Type Description String Properties QValues Gets a dictionary associating values with their relative weight (an integer ranging from 0 to 1000) and their position in the list of header values from which this instance has been constructed. Declaration public IReadOnlyDictionary<string, (int Weight, int Ordinal)> QValues { get; } Property Value Type Description IReadOnlyDictionary < String , ValueTuple < Int32 , Int32 >> Remarks This property does not usually need to be used directly; use the IsCandidate(String) , FindPreferred(IEnumerable<String>) , FindPreferredIndex(IEnumerable<String>) , and FindPreferredIndex(String[]) methods instead. See Also IsCandidate(String) FindPreferred(IEnumerable<String>) FindPreferredIndex(IEnumerable<String>) FindPreferredIndex(String[]) UseWildcard Gets a value indicating whether * is treated as a special value with the meaning of \"anything\". Declaration public bool UseWildcard { get; } Property Value Type Description Boolean Methods FindPreferred(IEnumerable<String>) Finds the value preferred by the client among an enumeration of values. Declaration public string FindPreferred(IEnumerable<string> values) Parameters Type Name Description IEnumerable < String > values The values. Returns Type Description String The value preferred by the client, or null if none of the provided values is accepted. FindPreferredIndex(IEnumerable<String>) Finds the index of the value preferred by the client in a list of values. Declaration public int FindPreferredIndex(IEnumerable<string> values) Parameters Type Name Description IEnumerable < String > values The values. Returns Type Description Int32 The index of the value preferred by the client, or -1 if none of the values in values is accepted. FindPreferredIndex(String[]) Finds the index of the value preferred by the client in an array of values. Declaration public int FindPreferredIndex(params string[] values) Parameters Type Name Description String [] values The values. Returns Type Description Int32 The index of the value preferred by the client, or -1 if none of the values in values is accepted. IsCandidate(String) Determines whether the specified value is a possible candidate. Declaration public bool IsCandidate(string value) Parameters Type Name Description String value The value. Returns Type Description Boolean true if value is a candidate; otherwise, false . TryGetWeight(String, out Int32) Attempts to determine whether the weight of a possible candidate. Declaration public bool TryGetWeight(string value, out int weight) Parameters Type Name Description String value The value whose weight is to be determined. Int32 weight When this method returns true , the weight of the candidate. Returns Type Description Boolean true if value is a candidate; otherwise, false . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.QValueListExtensions.html": {
    "href": "api/EmbedIO.Utilities.QValueListExtensions.html",
    "title": "Class QValueListExtensions | EmbedIO",
    "keywords": "Class QValueListExtensions Provides extension methods for QValueList . Inheritance Object QValueListExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class QValueListExtensions Methods TryNegotiateContentEncoding(QValueList, Boolean, out CompressionMethod, out String) Attempts to proactively negotiate a compression method for a response, based on the contents of a QValueList . Declaration public static bool TryNegotiateContentEncoding(this QValueList this, bool preferCompression, out CompressionMethod compressionMethod, out string compressionMethodName) Parameters Type Name Description QValueList this The QValueList on which this method is called. Boolean preferCompression true if sending compressed data is preferred over sending non-compressed data; otherwise, false . CompressionMethod compressionMethod When this method returns, the compression method to use for the response, if content negotiation is successful. This parameter is passed uninitialized. String compressionMethodName When this method returns, the name of the compression method, if content negotiation is successful. This parameter is passed uninitialized. Returns Type Description Boolean true if content negotiation is successful; otherwise, false . Remarks If this is empty, this method always returns true , setting compressionMethod to None and compressionMethodName to None . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.StringExtensions.html": {
    "href": "api/EmbedIO.Utilities.StringExtensions.html",
    "title": "Class StringExtensions | EmbedIO",
    "keywords": "Class StringExtensions Provides extension methods for String . Inheritance Object StringExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class StringExtensions Methods NullIfEmpty(String) Ensures that a String is never empty, by transforming empty strings into null . Declaration public static string NullIfEmpty(this string this) Parameters Type Name Description String this The String on which this method is called. Returns Type Description String If this is the empty string, null ; otherwise, this.. SplitByAny(String, Char[]) Splits a string into substrings based on the specified delimiters . The returned array includes empty array elements if two or more consecutive delimiters are found in this . Declaration public static string[] SplitByAny(this string this, params char[] delimiters) Parameters Type Name Description String this The String on which this method is called. Char [] delimiters An array of Char s to use as delimiters. Returns Type Description String [] An array whose elements contain the substrings in this that are delimited by one or more characters in delimiters . SplitByComma(String) Splits a string into substrings, using the comma ( , ) character as a delimiter. The returned array includes empty array elements if two or more commas are found in this . Declaration public static string[] SplitByComma(this string this) Parameters Type Name Description String this The String on which this method is called. Returns Type Description String [] An array whose elements contain the substrings in this that are delimited by commas. See Also SplitByComma(String, StringSplitOptions) SplitByComma(String, StringSplitOptions) Splits a string into substrings, using the comma ( , ) character as a delimiter. You can specify whether the substrings include empty array elements. Declaration public static string[] SplitByComma(this string this, StringSplitOptions options) Parameters Type Name Description String this The String on which this method is called. StringSplitOptions options to omit empty array elements from the array returned; or to include empty array elements in the array returned. Returns Type Description String [] An array whose elements contain the substrings in this that are delimited by commas. For more information, see the Remarks section of the method. See Also SplitByComma(String) TrimmedSubstring(String, Int32) Retrieves a substring from this instance, with leading and trailing white-space characters removed. The substring starts at a specified character position and continues to the end of the string. Declaration public static string TrimmedSubstring(this string this, int startIndex) Parameters Type Name Description String this The String on which this method is called. Int32 startIndex The zero-based starting character position of the substring to retrieve. Returns Type Description String A string that is equivalent to the substring that begins at startIndex in this , minus any leading and/or trailing white-space characters. TrimmedSubstring(String, Int32, Int32) Retrieves a substring from this instance, with leading and trailing white-space characters removed. The substring starts at a specified character position and has a specified length. Declaration public static string TrimmedSubstring(this string this, int startIndex, int length) Parameters Type Name Description String this The String on which this method is called. Int32 startIndex The zero-based starting character position of the substring to retrieve. Int32 length The length of the substring to retrieve, including leading and/or trailing white-space characters. Returns Type Description String A string that is equivalent to the substring of length length that begins at startIndex in this , minus any leading and/or trailing white-space characters. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.UniqueIdGenerator.html": {
    "href": "api/EmbedIO.Utilities.UniqueIdGenerator.html",
    "title": "Class UniqueIdGenerator | EmbedIO",
    "keywords": "Class UniqueIdGenerator Generates locally unique string IDs, mainly for logging purposes. Inheritance Object UniqueIdGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class UniqueIdGenerator Methods GetNext() Generates and returns a unique ID. Declaration public static string GetNext() Returns Type Description String The generated ID. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.UrlEncodedDataParser.html": {
    "href": "api/EmbedIO.Utilities.UrlEncodedDataParser.html",
    "title": "Class UrlEncodedDataParser | EmbedIO",
    "keywords": "Class UrlEncodedDataParser Parses URL queries or URL-encoded HTML forms. Inheritance Object UrlEncodedDataParser Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class UrlEncodedDataParser Methods Parse(String, Boolean, Boolean) Parses a URL query or URL-encoded HTML form. Unlike , the returned will have bracketed indexes stripped away; for example, a[0]=1&a[1]=2 will yield the same result as a=1&a=2 , i.e. a with one key ( a ) associated with two values ( 1 and 2 ). Declaration public static NameValueCollection Parse(string source, bool groupFlags, bool mutableResult = true) Parameters Type Name Description String source The string to parse. Boolean groupFlags If this parameter is true , tokens not followed by an equal sign (e.g. this in a=1&this&b=2 ) will be grouped as values of a null key. This is the same behavior as the QueryString and properties. If this parameter is false , tokens not followed by an equal sign (e.g. this in a=1&this&b=2 ) will be considered keys with an empty value. This is the same behavior as the GetRequestQueryData(IHttpContext) extension method. Boolean mutableResult true (the default) to return a mutable (non-read-only) collection; false to return a read-only collection. Returns Type Description NameValueCollection A containing the parsed data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.UrlPath.html": {
    "href": "api/EmbedIO.Utilities.UrlPath.html",
    "title": "Class UrlPath | EmbedIO",
    "keywords": "Class UrlPath Provides utility methods to work with URL paths. Inheritance Object UrlPath Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class UrlPath Fields Root The root URL path value, i.e. \"/\" . Declaration public const string Root = \"/\" Field Value Type Description String Methods HasPrefix(String, String) Determines whether the specified URL path is prefixed by the specified base URL path. Declaration public static bool HasPrefix(string path, string basePath) Parameters Type Name Description String path The URL path. String basePath The base URL path. Returns Type Description Boolean true if path is prefixed by basePath ; otherwise, false . Remarks This method returns true even if the two URL paths are equivalent, for example if both are \"/\" , or if path is \"/download\" and basePath is \"/download/\" . If you are sure that both path and basePath are valid and normalized, for example because you have called UrlPath(String, String, Boolean) , then you may call UnsafeHasPrefix(String, String) instead of this method. UnsafeHasPrefix(String, String) is slightly faster because it skips validity checks. See Also UnsafeHasPrefix(String, String) Normalize(String, Boolean) StripPrefix(String, String) UrlPath(String, String, Boolean) IsValid(String) Determines whether a string is a valid URL path. Declaration public static bool IsValid(string path) Parameters Type Name Description String path The URL path. Returns Type Description Boolean true if the specified URL path is valid; otherwise, false . Remarks For a string to be a valid URL path, it must not be null , must not be empty, and must start with a slash ( / ) character. To ensure that a method parameter is a valid URL path, use UrlPath(String, String, Boolean) . See Also Normalize(String, Boolean) UnsafeNormalize(String, Boolean) UrlPath(String, String, Boolean) Normalize(String, Boolean) Normalizes the specified URL path. Declaration public static string Normalize(string path, bool isBasePath) Parameters Type Name Description String path The URL path. Boolean isBasePath if set to true , treat the URL path as a base path, i.e. ensure it ends with a slash ( / ) character; otherwise, ensure that it does NOT end with a slash character. Returns Type Description String The normalized path. Remarks A normalized URL path is one where each run of two or more slash ( / ) characters has been replaced with a single slash character. This method does NOT try to decode URL-encoded characters. If you are sure that path is a valid URL path, for example because you have called IsValid(String) and it returned true , then you may call UnsafeNormalize(String, Boolean) instead of this method. UnsafeNormalize(String, Boolean) is slightly faster because it skips the initial validity check. There is no need to call this method for a method parameter for which you have already called UrlPath(String, String, Boolean) . See Also UnsafeNormalize(String, Boolean) IsValid(String) UrlPath(String, String, Boolean) Split(String) Splits the specified URL path into segments. Declaration public static IEnumerable<string> Split(string path) Parameters Type Name Description String path The URL path. Returns Type Description IEnumerable < String > An enumeration of path segments. Remarks A root URL path ( / ) will result in an empty enumeration. The returned enumeration will be the same whether path is a base URL path or not. If you are sure that path is valid and normalized, for example because you have called UrlPath(String, String, Boolean) , then you may call UnsafeSplit(String) instead of this method. UnsafeSplit(String) is slightly faster because it skips validity checks. See Also UnsafeSplit(String) Normalize(String, Boolean) UrlPath(String, String, Boolean) StripPrefix(String, String) Strips a base URL path fom a URL path, obtaining a relative path. Declaration public static string StripPrefix(string path, string basePath) Parameters Type Name Description String path The URL path. String basePath The base URL path. Returns Type Description String The relative path, or null if path is not prefixed by basePath . Remarks The returned relative path is NOT prefixed by a slash ( / ) character. If path and basePath are equivalent, for example if both are \"/\" , or if path is \"/download\" and basePath is \"/download/\" , this method returns an empty string. If you are sure that both path and basePath are valid and normalized, for example because you have called UrlPath(String, String, Boolean) , then you may call UnsafeStripPrefix(String, String) instead of this method. UnsafeStripPrefix(String, String) is slightly faster because it skips validity checks. See Also UnsafeStripPrefix(String, String) Normalize(String, Boolean) HasPrefix(String, String) UrlPath(String, String, Boolean) UnsafeHasPrefix(String, String) Determines whether the specified URL path is prefixed by the specified base URL path, assuming both paths are valid and normalized. Declaration public static bool UnsafeHasPrefix(string path, string basePath) Parameters Type Name Description String path The URL path. String basePath The base URL path. Returns Type Description Boolean true if path is prefixed by basePath ; otherwise, false . Remarks Unless both path and basePath are valid, normalized URL paths, the behavior of this method is unspecified. You should call this method only after calling either Normalize(String, Boolean) or UrlPath(String, String, Boolean) to check and normalize both parameters. If you are not sure about the validity and/or normalization of parameters, call HasPrefix(String, String) instead of this method. This method returns true even if the two URL paths are equivalent, for example if both are \"/\" , or if path is \"/download\" and basePath is \"/download/\" . See Also HasPrefix(String, String) Normalize(String, Boolean) StripPrefix(String, String) UrlPath(String, String, Boolean) UnsafeNormalize(String, Boolean) Normalizes the specified URL path, assuming that it is valid. Declaration public static string UnsafeNormalize(string path, bool isBasePath) Parameters Type Name Description String path The URL path. Boolean isBasePath if set to true , treat the URL path as a base path, i.e. ensure it ends with a slash ( / ) character; otherwise, ensure that it does NOT end with a slash character. Returns Type Description String The normalized path. Remarks A normalized URL path is one where each run of two or more slash ( / ) characters has been replaced with a single slash character. This method does NOT try to decode URL-encoded characters. If path is not valid, the behavior of this method is unspecified. You should call this method only after IsValid(String) has returned true for the same path . You should call Normalize(String, Boolean) instead of this method if you are not sure that path is valid. There is no need to call this method for a method parameter for which you have already called UrlPath(String, String, Boolean) . See Also Normalize(String, Boolean) IsValid(String) UrlPath(String, String, Boolean) UnsafeSplit(String) Splits the specified URL path into segments, assuming it is valid and normalized. Declaration public static IEnumerable<string> UnsafeSplit(string path) Parameters Type Name Description String path The URL path. Returns Type Description IEnumerable < String > An enumeration of path segments. Remarks Unless path is a valid, normalized URL path, the behavior of this method is unspecified. You should call this method only after calling either Normalize(String, Boolean) or UrlPath(String, String, Boolean) to check and normalize both parameters. If you are not sure about the validity and/or normalization of path , call StripPrefix(String, String) instead of this method. A root URL path ( / ) will result in an empty enumeration. The returned enumeration will be the same whether path is a base URL path or not. See Also Split(String) Normalize(String, Boolean) UrlPath(String, String, Boolean) UnsafeStripPrefix(String, String) Strips a base URL path fom a URL path, obtaining a relative path, assuming both paths are valid and normalized. Declaration public static string UnsafeStripPrefix(string path, string basePath) Parameters Type Name Description String path The URL path. String basePath The base URL path. Returns Type Description String The relative path, or null if path is not prefixed by basePath . Remarks Unless both path and basePath are valid, normalized URL paths, the behavior of this method is unspecified. You should call this method only after calling either Normalize(String, Boolean) or UrlPath(String, String, Boolean) to check and normalize both parameters. If you are not sure about the validity and/or normalization of parameters, call StripPrefix(String, String) instead of this method. The returned relative path is NOT prefixed by a slash ( / ) character. If path and basePath are equivalent, for example if both are \"/\" , or if path is \"/download\" and basePath is \"/download/\" , this method returns an empty string. See Also StripPrefix(String, String) Normalize(String, Boolean) HasPrefix(String, String) UrlPath(String, String, Boolean) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.Validate.html": {
    "href": "api/EmbedIO.Utilities.Validate.html",
    "title": "Class Validate | EmbedIO",
    "keywords": "Class Validate Provides validation methods for method arguments. Inheritance Object Validate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.Utilities Syntax public static class Validate Methods HttpHeaderName(String, String) Ensures that a langword_csharp_string argument is valid as an HTTP header name as defined by RFC7230, Section 3.2 . The rules for valid HTTP header names are defined by RFC7230 to be the same as for RFC2616 tokens; for further information, please see the documentation for the Rfc2616Token(String, String, String) method. Declaration public static string HttpHeaderName(string argumentName, string value) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Returns Type Description String value , if it is a valid HTTP header name. HttpHeaderValue(String, String) Ensures that a langword_csharp_string argument is valid as an HTTP header value as defined by RFC7230, Section 3.2 . Only visible ASCII visible characters, plus space and horizontal tab, are allowed. null is allowed, but it is turned into the empty string. Obsolete line folding (see Section 3.2.4 ) is NOT allowed, even if it is still allowed by Microsoft's . Declaration public static string HttpHeaderValue(string argumentName, string value) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Returns Type Description String value , if it is a valid HTTP header value, with spaces and horizontal tabs trimmed on both ends.. LocalPath(String, String, Boolean) Ensures that the value of an argument is a valid local path and, optionally, gets the corresponding full path. Declaration public static string LocalPath(string argumentName, string value, bool getFullPath) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Boolean getFullPath true to get the full path, false to leave the path as is.. Returns Type Description String The local path, or the full path if getFullPath is true . MimeType(String, String, Boolean) Ensures that a langword_csharp_string argument is valid as MIME type or media range as defined by RFC7231, Section 5,3.2 . Declaration public static string MimeType(string argumentName, string value, bool acceptMediaRange) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Boolean acceptMediaRange If true , media ranges (i.e. strings of the form / and type/* ) are considered valid; otherwise, they are rejected as invalid. Returns Type Description String value , if it is a valid MIME type or media range. NotNull<T>(String, T) Ensures that an argument is not null . Declaration public static T NotNull<T>(string argumentName, T value) where T : class Parameters Type Name Description String argumentName The name of the argument to validate. T value The value to validate. Returns Type Description T value if not null . Type Parameters Name Description T The type of the argument to validate. NotNullOrEmpty(String, String) Ensures that a langword_csharp_string argument is neither null nor the empty string. Declaration public static string NotNullOrEmpty(string argumentName, string value) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Returns Type Description String value if neither null nor the empty string. Rfc2616Token(String, String, String) Ensures that a langword_csharp_string argument is valid as a token as defined by RFC2616, Section 2.2 . RFC2616 tokens are used, for example, as: cookie names, as stated in RFC6265, Section 4.1.1 ; WebSocket protocol names, as stated in RFC6455, Section 4.3 . Only a restricted set of characters are allowed in tokens, including: upper- and lower-case letters of the English alphabet; decimal digits; the following non-alphanumeric characters: ! , # , $ , % , & , ' , * , + , - , . , ^ , _ , ` , | , ~ . Declaration public static string Rfc2616Token(string argumentName, string value, string entity = \"Token\") Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. String entity What is being validated. This string is put at the start of the exception message when validation fails. Default is \"Token\" , as in \"Token contains one or more invalid characters.\" Returns Type Description String value , if it is a valid token. Route(String, String, Boolean) Ensures that the value of an argument is a valid route. Declaration public static string Route(string argumentName, string value, bool isBaseRoute) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Boolean isBaseRoute true if the argument must be a base route; false if the argument must be a non-base route. Returns Type Description String value , if it is a valid route. See Also IsValid(String, Boolean) Url(String, String, Uri, Boolean) Ensures that a valid URL, either absolute or relative to the given baseUri , can be constructed from a langword_csharp_string argument and returns the absolute URL obtained by combining baseUri and value . Declaration public static string Url(string argumentName, string value, Uri baseUri, bool enforceHttp = false) Parameters Type Name Description String argumentName Name of the argument. String value The value. Uri baseUri The base URI for relative URLs. Boolean enforceHttp Ensure that the scheme of the resulting URL is either http or https . Returns Type Description String The string representation of the constructed URL. See Also Url(String, String, UriKind, Boolean) Url(String, String, UriKind, Boolean) Ensures that a valid URL can be constructed from a langword_csharp_string argument. Declaration public static string Url(string argumentName, string value, UriKind uriKind = null, bool enforceHttp = false) Parameters Type Name Description String argumentName Name of the argument. String value The value. UriKind uriKind Specifies whether value is a relative URL, absolute URL, or is indeterminate. Boolean enforceHttp Ensure that, if value is an absolute URL, its scheme is either http or https . Returns Type Description String The string representation of the constructed URL. See Also Url(String, String, Uri, Boolean) UrlPath(String, String, Boolean) Ensures that the value of an argument is a valid URL path and normalizes it. Declaration public static string UrlPath(string argumentName, string value, bool isBasePath) Parameters Type Name Description String argumentName The name of the argument to validate. String value The value to validate. Boolean isBasePath If set to true true , the returned path is ensured to end in a slash ( / ) character; otherwise, the returned path is ensured to not end in a slash character unless it is \"/\" . Returns Type Description String The normalized URL path. See Also Normalize(String, Boolean) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.Utilities.ValidatedNotNullAttribute.html": {
    "href": "api/EmbedIO.Utilities.ValidatedNotNullAttribute.html",
    "title": "Class ValidatedNotNullAttribute | EmbedIO",
    "keywords": "Class ValidatedNotNullAttribute Indicates to static code analyzers that a parameter is guaranteed not to be null after a method returns. The presence of this attribute on a method parameter also relaxes null-validation requirements, thus suppressing the CA1062 warning on the parameter. Inheritance Object ValidatedNotNullAttribute Namespace : EmbedIO.Utilities Syntax public sealed class ValidatedNotNullAttribute : Attribute Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.FormDataAttribute.html": {
    "href": "api/EmbedIO.WebApi.FormDataAttribute.html",
    "title": "Class FormDataAttribute | EmbedIO",
    "keywords": "Class FormDataAttribute Specifies that a parameter of a controller method will receive a of HTML form data, obtained by deserializing a request body with a content type of application/x-www-form-urlencoded . The received collection will be read-only. This class cannot be inherited. Inheritance Object FormDataAttribute Implements INonNullRequestDataAttribute < WebApiController , NameValueCollection > Namespace : EmbedIO.WebApi Syntax public sealed class FormDataAttribute : Attribute, INonNullRequestDataAttribute<WebApiController, NameValueCollection> Methods GetRequestDataAsync(WebApiController, String) Asynchronously obtains data from a controller's context. Declaration public Task<NameValueCollection> GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName The name of the parameter that has to receive the data. Returns Type Description Task < NameValueCollection > a whose result will be the data to pass as a parameter to a controller method. Implements INonNullRequestDataAttribute<TController, TData> See Also INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.FormFieldAttribute.html": {
    "href": "api/EmbedIO.WebApi.FormFieldAttribute.html",
    "title": "Class FormFieldAttribute | EmbedIO",
    "keywords": "Class FormFieldAttribute Specifies that a parameter of a controller method will receive the value(s) of a field in a HTML form, obtained by deserializing a request body with a content type of application/x-www-form-urlencoded . The parameter carrying this attribute can be either a simple type or a one-dimension array. If multiple values are present for the field, a non-array parameter will receive the last specified value, while an array parameter will receive an array of field values converted to the element type of the parameter. If a single value is present for the field, a non-array parameter will receive the value converted to the type of the parameter, while an array parameter will receive an array of length 1, containing the value converted to the element type of the parameter If no values are present for the field and the BadRequestIfMissing property is true , a 400 Bad Request response will be sent to the client, with a message specifying the name of the missing field. If no values are present for the field and the BadRequestIfMissing property is false , a non-array parameter will receive the default value for its type, while an array parameter will receive an array of length 0. This class cannot be inherited. Inheritance Object FormFieldAttribute Implements IRequestDataAttribute < WebApiController , String > INonNullRequestDataAttribute < WebApiController , String []> IRequestDataAttribute < WebApiController > Namespace : EmbedIO.WebApi Syntax public sealed class FormFieldAttribute : Attribute, IRequestDataAttribute<WebApiController, string>, INonNullRequestDataAttribute<WebApiController, string[]>, IRequestDataAttribute<WebApiController> Constructors FormFieldAttribute() Initializes a new instance of the FormFieldAttribute class. The name of the form field to extract will be equal to the name of the parameter carrying this attribute. Declaration public FormFieldAttribute() FormFieldAttribute(Boolean) Initializes a new instance of the FormFieldAttribute class. The name of the form field to extract will be equal to the name of the parameter carrying this attribute. Declaration public FormFieldAttribute(bool badRequestIfMissing) Parameters Type Name Description Boolean badRequestIfMissing If set to true , a 400 Bad Request response will be sent to the client if no values are found for the field; if set to false , a default value will be assumed. FormFieldAttribute(String) Initializes a new instance of the FormFieldAttribute class. Declaration public FormFieldAttribute(string fieldName) Parameters Type Name Description String fieldName The name of the form field to extract. FormFieldAttribute(String, Boolean) Initializes a new instance of the FormFieldAttribute class. Declaration public FormFieldAttribute(string fieldName, bool badRequestIfMissing) Parameters Type Name Description String fieldName The name of the form field to extract. Boolean badRequestIfMissing If set to true , a 400 Bad Request response will be sent to the client if no values are found for the field; if set to false , a default value will be assumed. Properties BadRequestIfMissing Gets or sets a value indicating whether to send a 400 Bad Request response to the client if the submitted form contains no values for the field. If this property is true and the submitted form contains no values for the field, the 400 Bad Request response sent to the client will contain a reference to the missing field. If this property is false and the submitted form contains no values for the field, the default value for the parameter (or a zero-length array if the parameter is of an array type) will be passed to the controller method. Declaration public bool BadRequestIfMissing { get; } Property Value Type Description Boolean FieldName Gets the name of the form field that this attribute will extract, or null if the name of the parameter carrying this attribute is to be used as field name. Declaration public string FieldName { get; } Property Value Type Description String Explicit Interface Implementations INonNullRequestDataAttribute<WebApiController, String[]>.GetRequestDataAsync(WebApiController, String) Declaration Task<string[]> INonNullRequestDataAttribute<WebApiController, string[]>.GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName Returns Type Description Task < String []> IRequestDataAttribute<WebApiController, String>.GetRequestDataAsync(WebApiController, String) Declaration Task<string> IRequestDataAttribute<WebApiController, string>.GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName Returns Type Description Task < String > IRequestDataAttribute<WebApiController>.GetRequestDataAsync(WebApiController, Type, String) Declaration Task<object> IRequestDataAttribute<WebApiController>.GetRequestDataAsync(WebApiController controller, Type type, string parameterName) Parameters Type Name Description WebApiController controller Type type String parameterName Returns Type Description Task < Object > Implements IRequestDataAttribute<TController, TData> INonNullRequestDataAttribute<TController, TData> IRequestDataAttribute<TController> See Also IRequestDataAttribute <TController> IRequestDataAttribute <TController, TData> INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.html": {
    "href": "api/EmbedIO.WebApi.html",
    "title": "Namespace EmbedIO.WebApi | EmbedIO",
    "keywords": "Namespace EmbedIO.WebApi Classes FormDataAttribute Specifies that a parameter of a controller method will receive a of HTML form data, obtained by deserializing a request body with a content type of application/x-www-form-urlencoded . The received collection will be read-only. This class cannot be inherited. FormFieldAttribute Specifies that a parameter of a controller method will receive the value(s) of a field in a HTML form, obtained by deserializing a request body with a content type of application/x-www-form-urlencoded . The parameter carrying this attribute can be either a simple type or a one-dimension array. If multiple values are present for the field, a non-array parameter will receive the last specified value, while an array parameter will receive an array of field values converted to the element type of the parameter. If a single value is present for the field, a non-array parameter will receive the value converted to the type of the parameter, while an array parameter will receive an array of length 1, containing the value converted to the element type of the parameter If no values are present for the field and the BadRequestIfMissing property is true , a 400 Bad Request response will be sent to the client, with a message specifying the name of the missing field. If no values are present for the field and the BadRequestIfMissing property is false , a non-array parameter will receive the default value for its type, while an array parameter will receive an array of length 0. This class cannot be inherited. JsonDataAttribute Specifies that a parameter of a controller method will receive an object obtained by deserializing the request body as JSON. The received object will be null only if the deserialized object is null . If the request body is not valid JSON, or if it cannot be deserialized to the type of the parameter, a 400 Bad Request response will be sent to the client. This class cannot be inherited. QueryDataAttribute Specifies that a parameter of a controller method will receive a of HTML form data, obtained by deserializing a request URL query. The received collection will be read-only. This class cannot be inherited. QueryFieldAttribute Specifies that a parameter of a controller method will receive the value of a field, obtained by deserializing a request URL query. The parameter carrying this attribute can be either a simple type or a one-dimension array. If multiple values are present for the field, a non-array parameter will receive the last specified value, while an array parameter will receive an array of field values converted to the element type of the parameter. If a single value is present for the field, a non-array parameter will receive the value converted to the type of the parameter, while an array parameter will receive an array of length 1, containing the value converted to the element type of the parameter If no values are present for the field and the BadRequestIfMissing property is true , a 400 Bad Request response will be sent to the client, with a message specifying the name of the missing field. If no values are present for the field and the BadRequestIfMissing property is false , a non-array parameter will receive the default value for its type, while an array parameter will receive an array of length 0. This class cannot be inherited. WebApiController Inherit from this class and define your own Web API methods You must RegisterController in the Web API Module to make it active. WebApiModule A module using class methods as handlers. Public instance methods that match the WebServerModule.ResponseHandler signature, and have the WebApi handler attribute will be used to respond to web server requests. WebApiModuleBase A module using objects derived from WebApiController as collections of handler methods. WebApiModuleExtensions Provides extension methods for WebApiModule . Interfaces INonNullRequestDataAttribute<TController, TData> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. The difference between this interface and IRequestDataAttribute<TController, TData> is that attributes implementing this interface never retrieve null values. IRequestDataAttribute<TController> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. IRequestDataAttribute<TController, TData> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. The difference between this interface and INonNullRequestDataAttribute<TController, TData> is that attributes implementing this interface can retrieve null values. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.INonNullRequestDataAttribute-2.html": {
    "href": "api/EmbedIO.WebApi.INonNullRequestDataAttribute-2.html",
    "title": "Interface INonNullRequestDataAttribute<TController, TData> | EmbedIO",
    "keywords": "Interface INonNullRequestDataAttribute<TController, TData> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. The difference between this interface and IRequestDataAttribute<TController, TData> is that attributes implementing this interface never retrieve null values. Namespace : EmbedIO.WebApi Syntax public interface INonNullRequestDataAttribute<in TController, TData> where TController : WebApiController where TData : class Type Parameters Name Description TController The type of the controller. TData The type of the data. Methods GetRequestDataAsync(TController, String) Asynchronously obtains data from a controller's context. Declaration Task<TData> GetRequestDataAsync(TController controller, string parameterName) Parameters Type Name Description TController controller The controller. String parameterName The name of the parameter that has to receive the data. Returns Type Description Task <TData> a whose result will be the data to pass as a parameter to a controller method. See Also IRequestDataAttribute <TController> IRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.IRequestDataAttribute-1.html": {
    "href": "api/EmbedIO.WebApi.IRequestDataAttribute-1.html",
    "title": "Interface IRequestDataAttribute<TController> | EmbedIO",
    "keywords": "Interface IRequestDataAttribute<TController> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. Namespace : EmbedIO.WebApi Syntax public interface IRequestDataAttribute<in TController> where TController : WebApiController Type Parameters Name Description TController The type of the controller. Methods GetRequestDataAsync(TController, Type, String) Asynchronously obtains data from a controller's context. Declaration Task<object> GetRequestDataAsync(TController controller, Type type, string parameterName) Parameters Type Name Description TController controller The controller. Type type The type of the parameter that has to receive the data. String parameterName The name of the parameter that has to receive the data. Returns Type Description Task < Object > a whose result will be the data to pass as a parameter to a controller method. See Also IRequestDataAttribute <TController, TData> INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.IRequestDataAttribute-2.html": {
    "href": "api/EmbedIO.WebApi.IRequestDataAttribute-2.html",
    "title": "Interface IRequestDataAttribute<TController, TData> | EmbedIO",
    "keywords": "Interface IRequestDataAttribute<TController, TData> Represents an attribute, applied to a parameter of a web API controller method, that causes the parameter to be passed deserialized data from a request. The difference between this interface and INonNullRequestDataAttribute<TController, TData> is that attributes implementing this interface can retrieve null values. Namespace : EmbedIO.WebApi Syntax public interface IRequestDataAttribute<in TController, TData> where TController : WebApiController where TData : class Type Parameters Name Description TController The type of the controller. TData The type of the data. Methods GetRequestDataAsync(TController, String) Asynchronously obtains data from a controller's context. Declaration Task<TData> GetRequestDataAsync(TController controller, string parameterName) Parameters Type Name Description TController controller The controller. String parameterName The name of the parameter that has to receive the data. Returns Type Description Task <TData> a whose result will be the data to pass as a parameter to a controller method. See Also IRequestDataAttribute <TController> INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.JsonDataAttribute.html": {
    "href": "api/EmbedIO.WebApi.JsonDataAttribute.html",
    "title": "Class JsonDataAttribute | EmbedIO",
    "keywords": "Class JsonDataAttribute Specifies that a parameter of a controller method will receive an object obtained by deserializing the request body as JSON. The received object will be null only if the deserialized object is null . If the request body is not valid JSON, or if it cannot be deserialized to the type of the parameter, a 400 Bad Request response will be sent to the client. This class cannot be inherited. Inheritance Object JsonDataAttribute Implements IRequestDataAttribute < WebApiController > Namespace : EmbedIO.WebApi Syntax public class JsonDataAttribute : Attribute, IRequestDataAttribute<WebApiController> Methods GetRequestDataAsync(WebApiController, Type, String) Asynchronously obtains data from a controller's context. Declaration public Task<object> GetRequestDataAsync(WebApiController controller, Type type, string parameterName) Parameters Type Name Description WebApiController controller Type type The type of the parameter that has to receive the data. String parameterName The name of the parameter that has to receive the data. Returns Type Description Task < Object > a whose result will be the data to pass as a parameter to a controller method. Implements IRequestDataAttribute<TController> See Also IRequestDataAttribute <TController> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.QueryDataAttribute.html": {
    "href": "api/EmbedIO.WebApi.QueryDataAttribute.html",
    "title": "Class QueryDataAttribute | EmbedIO",
    "keywords": "Class QueryDataAttribute Specifies that a parameter of a controller method will receive a of HTML form data, obtained by deserializing a request URL query. The received collection will be read-only. This class cannot be inherited. Inheritance Object QueryDataAttribute Implements INonNullRequestDataAttribute < WebApiController , NameValueCollection > Namespace : EmbedIO.WebApi Syntax public sealed class QueryDataAttribute : Attribute, INonNullRequestDataAttribute<WebApiController, NameValueCollection> Methods GetRequestDataAsync(WebApiController, String) Asynchronously obtains data from a controller's context. Declaration public Task<NameValueCollection> GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName The name of the parameter that has to receive the data. Returns Type Description Task < NameValueCollection > a whose result will be the data to pass as a parameter to a controller method. Implements INonNullRequestDataAttribute<TController, TData> See Also INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.QueryFieldAttribute.html": {
    "href": "api/EmbedIO.WebApi.QueryFieldAttribute.html",
    "title": "Class QueryFieldAttribute | EmbedIO",
    "keywords": "Class QueryFieldAttribute Specifies that a parameter of a controller method will receive the value of a field, obtained by deserializing a request URL query. The parameter carrying this attribute can be either a simple type or a one-dimension array. If multiple values are present for the field, a non-array parameter will receive the last specified value, while an array parameter will receive an array of field values converted to the element type of the parameter. If a single value is present for the field, a non-array parameter will receive the value converted to the type of the parameter, while an array parameter will receive an array of length 1, containing the value converted to the element type of the parameter If no values are present for the field and the BadRequestIfMissing property is true , a 400 Bad Request response will be sent to the client, with a message specifying the name of the missing field. If no values are present for the field and the BadRequestIfMissing property is false , a non-array parameter will receive the default value for its type, while an array parameter will receive an array of length 0. This class cannot be inherited. Inheritance Object QueryFieldAttribute Implements IRequestDataAttribute < WebApiController , String > INonNullRequestDataAttribute < WebApiController , String []> IRequestDataAttribute < WebApiController > Namespace : EmbedIO.WebApi Syntax public sealed class QueryFieldAttribute : Attribute, IRequestDataAttribute<WebApiController, string>, INonNullRequestDataAttribute<WebApiController, string[]>, IRequestDataAttribute<WebApiController> Constructors QueryFieldAttribute() Initializes a new instance of the QueryFieldAttribute class. The name of the query field to extract will be equal to the name of the parameter carrying this attribute. Declaration public QueryFieldAttribute() QueryFieldAttribute(Boolean) Initializes a new instance of the QueryFieldAttribute class. The name of the query field to extract will be equal to the name of the parameter carrying this attribute. Declaration public QueryFieldAttribute(bool badRequestIfMissing) Parameters Type Name Description Boolean badRequestIfMissing If set to true , a 400 Bad Request response will be sent to the client if no values are found for the field; if set to false , a default value will be assumed. QueryFieldAttribute(String) Initializes a new instance of the QueryFieldAttribute class. Declaration public QueryFieldAttribute(string fieldName) Parameters Type Name Description String fieldName The name of the query field to extract. QueryFieldAttribute(String, Boolean) Initializes a new instance of the QueryFieldAttribute class. Declaration public QueryFieldAttribute(string fieldName, bool badRequestIfMissing) Parameters Type Name Description String fieldName The name of the query field to extract. Boolean badRequestIfMissing If set to true , a 400 Bad Request response will be sent to the client if no values are found for the field; if set to false , a default value will be assumed. Properties BadRequestIfMissing Gets or sets a value indicating whether to send a 400 Bad Request response to the client if the URL query contains no values for the field. If this property is true and the URL query contains no values for the field, the 400 Bad Request response sent to the client will contain a reference to the missing field. If this property is false and the URL query contains no values for the field, the default value for the parameter (or a zero-length array if the parameter is of an array type) will be passed to the controller method. Declaration public bool BadRequestIfMissing { get; } Property Value Type Description Boolean FieldName Gets the name of the query field that this attribute will extract, or null if the name of the parameter carrying this attribute is to be used as field name. Declaration public string FieldName { get; } Property Value Type Description String Explicit Interface Implementations INonNullRequestDataAttribute<WebApiController, String[]>.GetRequestDataAsync(WebApiController, String) Declaration Task<string[]> INonNullRequestDataAttribute<WebApiController, string[]>.GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName Returns Type Description Task < String []> IRequestDataAttribute<WebApiController, String>.GetRequestDataAsync(WebApiController, String) Declaration Task<string> IRequestDataAttribute<WebApiController, string>.GetRequestDataAsync(WebApiController controller, string parameterName) Parameters Type Name Description WebApiController controller String parameterName Returns Type Description Task < String > IRequestDataAttribute<WebApiController>.GetRequestDataAsync(WebApiController, Type, String) Declaration Task<object> IRequestDataAttribute<WebApiController>.GetRequestDataAsync(WebApiController controller, Type type, string parameterName) Parameters Type Name Description WebApiController controller Type type String parameterName Returns Type Description Task < Object > Implements IRequestDataAttribute<TController, TData> INonNullRequestDataAttribute<TController, TData> IRequestDataAttribute<TController> See Also IRequestDataAttribute <TController> IRequestDataAttribute <TController, TData> INonNullRequestDataAttribute <TController, TData> Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.WebApiController.html": {
    "href": "api/EmbedIO.WebApi.WebApiController.html",
    "title": "Class WebApiController | EmbedIO",
    "keywords": "Class WebApiController Inherit from this class and define your own Web API methods You must RegisterController in the Web API Module to make it active. Inheritance Object WebApiController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.WebApi Syntax public abstract class WebApiController Properties CancellationToken Gets the CancellationToken used to cancel processing of the request. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken HttpContext Gets the HTTP context. This property is automatically initialized upon controller creation. Declaration public IHttpContext HttpContext { get; } Property Value Type Description IHttpContext Request Gets the HTTP request. Declaration public IHttpRequest Request { get; } Property Value Type Description IHttpRequest Response Gets the HTTP response object. Declaration public IHttpResponse Response { get; } Property Value Type Description IHttpResponse Route Gets the resolved route. This property is automatically initialized upon controller creation. Declaration public RouteMatch Route { get; } Property Value Type Description RouteMatch Session Gets the session proxy associated with the HTTP context. Declaration public ISessionProxy Session { get; } Property Value Type Description ISessionProxy User Gets the user. Declaration public IPrincipal? User { get; } Property Value Type Description Nullable < IPrincipal > Methods OnBeforeHandler() Called before a handler to perform common operations. The default behavior is to set response headers in order to prevent caching of the response. Declaration protected virtual void OnBeforeHandler() PreProcessRequest() This method is meant to be called internally by EmbedIO. Derived classes can override the OnBeforeHandler() method to perform common operations before any handler gets called. Declaration public void PreProcessRequest() See Also OnBeforeHandler() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.WebApiModule.html": {
    "href": "api/EmbedIO.WebApi.WebApiModule.html",
    "title": "Class WebApiModule | EmbedIO",
    "keywords": "Class WebApiModule A module using class methods as handlers. Public instance methods that match the WebServerModule.ResponseHandler signature, and have the WebApi handler attribute will be used to respond to web server requests. Inheritance Object WebApiModuleBase WebApiModule Inherited Members WebApiModuleBase.Serializer WebApiModuleBase.ControllerCount WebApiModuleBase.RegisterControllerType<TController>() WebApiModuleBase.RegisterControllerType<TController>(Func<TController>) WebApiModuleBase.RegisterControllerType(Type) WebApiModuleBase.RegisterControllerType(Type, Func<WebApiController>) Namespace : EmbedIO.WebApi Syntax public class WebApiModule : WebApiModuleBase Constructors WebApiModule(String) Initializes a new instance of the WebApiModule class, using the default response serializer. Declaration public WebApiModule(string baseRoute) Parameters Type Name Description String baseRoute The base URL path served by this module. See Also BaseRoute WebApiModule(String, ResponseSerializerCallback) Initializes a new instance of the WebApiModule class, using the specified response serializer. Declaration public WebApiModule(string baseRoute, ResponseSerializerCallback serializer) Parameters Type Name Description String baseRoute The base URL path served by this module. ResponseSerializerCallback serializer A ResponseSerializerCallback used to serialize the result of controller methods returning langword_csharp_object or Task<object> . See Also BaseRoute Methods RegisterController(Type) Registers a controller type using a constructor. See RegisterControllerType(Type) for further information. Declaration public void RegisterController(Type controllerType) Parameters Type Name Description Type controllerType The type of the controller. See Also RegisterController(Type, Func<WebApiController>) RegisterController<TController>() RegisterControllerType ( Type ) RegisterController(Type, Func<WebApiController>) Registers a controller type using a factory method. See RegisterControllerType(Type, Func<WebApiController>) for further information. Declaration public void RegisterController(Type controllerType, Func<WebApiController> factory) Parameters Type Name Description Type controllerType The type of the controller. Func < WebApiController > factory The factory method used to construct instances of controllerType . See Also RegisterController(Type) RegisterController<TController>(Func<TController>) RegisterControllerType ( Type , Func < WebApiController >) RegisterController<TController>() Registers a controller type using a constructor. See RegisterControllerType<TController>() for further information. Declaration public void RegisterController<TController>() where TController : WebApiController, new() Type Parameters Name Description TController The type of the controller. See Also RegisterController<TController>(Func<TController>) RegisterController(Type) RegisterControllerType<TController> () RegisterController<TController>(Func<TController>) Registers a controller type using a factory method. See RegisterControllerType<TController>(Func<TController>) for further information. Declaration public void RegisterController<TController>(Func<TController> factory) where TController : WebApiController Parameters Type Name Description Func <TController> factory The factory method used to construct instances of TController . Type Parameters Name Description TController The type of the controller. See Also RegisterController<TController>() RegisterController(Type, Func<WebApiController>) RegisterControllerType<TController> ( Func <TController>) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.WebApiModuleBase.html": {
    "href": "api/EmbedIO.WebApi.WebApiModuleBase.html",
    "title": "Class WebApiModuleBase | EmbedIO",
    "keywords": "Class WebApiModuleBase A module using objects derived from WebApiController as collections of handler methods. Inheritance Object WebApiModuleBase WebApiModule Namespace : EmbedIO.WebApi Syntax public abstract class WebApiModuleBase : RoutingModuleBase Constructors WebApiModuleBase(String) Initializes a new instance of the WebApiModuleBase class, using the default response serializer. Declaration protected WebApiModuleBase(string baseRoute) Parameters Type Name Description String baseRoute The base route served by this module. See Also BaseRoute WebApiModuleBase(String, ResponseSerializerCallback) Initializes a new instance of the WebApiModuleBase class, using the specified response serializer. Declaration protected WebApiModuleBase(string baseRoute, ResponseSerializerCallback serializer) Parameters Type Name Description String baseRoute The base route served by this module. ResponseSerializerCallback serializer A ResponseSerializerCallback used to serialize the result of controller methods returning langword_csharp_object or Task<object> . See Also BaseRoute Properties ControllerCount Gets the number of controller types registered in this module. Declaration public int ControllerCount { get; } Property Value Type Description Int32 Serializer A ResponseSerializerCallback used to serialize the result of controller methods returning values. Declaration public ResponseSerializerCallback Serializer { get; } Property Value Type Description ResponseSerializerCallback Methods RegisterControllerType(Type) Registers a controller type using a constructor. In order for registration to be successful, the specified controllerType : must be a subclass of WebApiController ; must not be an abstract class; must not be a generic type definition; must have a public parameterless constructor. Declaration protected void RegisterControllerType(Type controllerType) Parameters Type Name Description Type controllerType The type of the controller. Remarks A new instance of controllerType will be created for each request to handle, and dereferenced immediately afterwards, to be collected during next garbage collection cycle. controllerType is not required to be thread-safe, as it will be constructed and used in the same synchronization context. However, since request handling is asynchronous, the actual execution thread may vary during execution. Care must be exercised when using thread-sensitive resources or thread-static data. If controllerType implements , its Dispose method will be called when it has finished handling a request. See Also RegisterControllerType(Type, Func<WebApiController>) RegisterControllerType<TController>() RegisterControllerType(Type, Func<WebApiController>) Registers a controller type using a factory method. In order for registration to be successful: controllerType must be a subclass of WebApiController ; controllerType must not be a generic type definition; factory 's return type must be either controllerType or a subclass of controllerType . Declaration protected void RegisterControllerType(Type controllerType, Func<WebApiController> factory) Parameters Type Name Description Type controllerType The type of the controller. Func < WebApiController > factory The factory method used to construct instances of controllerType . Remarks factory will be called once for each request to handle in order to obtain an instance of controllerType . The returned instance will be dereferenced immediately after handling the request. controllerType is not required to be thread-safe, as it will be constructed and used in the same synchronization context. However, since request handling is asynchronous, the actual execution thread may vary during execution. Care must be exercised when using thread-sensitive resources or thread-static data. If controllerType implements , its Dispose method will be called when it has finished handling a request. In this case it is recommended that factory return a newly-constructed instance of controllerType at each invocation. If controllerType does not implement , factory may employ techniques such as instance pooling to avoid the overhead of constructing a new instance of controllerType at each invocation. If so, resources such as file handles, database connections, etc. should be freed before returning from each handler method to avoid starvation . See Also RegisterControllerType(Type) RegisterControllerType<TController>(Func<TController>) RegisterControllerType<TController>() Registers a controller type using a constructor. In order for registration to be successful, the specified controller type: must be a subclass of WebApiController ; must not be an abstract class; must not be a generic type definition; must have a public parameterless constructor. Declaration protected void RegisterControllerType<TController>() where TController : WebApiController, new() Type Parameters Name Description TController The type of the controller. Remarks A new instance of TController will be created for each request to handle, and dereferenced immediately afterwards, to be collected during next garbage collection cycle. TController is not required to be thread-safe, as it will be constructed and used in the same synchronization context. However, since request handling is asynchronous, the actual execution thread may vary during execution. Care must be exercised when using thread-sensitive resources or thread-static data. If TController implements , its Dispose method will be called when it has finished handling a request. See Also RegisterControllerType<TController>(Func<TController>) RegisterControllerType(Type) RegisterControllerType<TController>(Func<TController>) Registers a controller type using a factory method. In order for registration to be successful: TController must be a subclass of WebApiController ; TController must not be a generic type definition; factory 's return type must be either TController or a subclass of TController . Declaration protected void RegisterControllerType<TController>(Func<TController> factory) where TController : WebApiController Parameters Type Name Description Func <TController> factory The factory method used to construct instances of TController . Type Parameters Name Description TController The type of the controller. Remarks factory will be called once for each request to handle in order to obtain an instance of TController . The returned instance will be dereferenced immediately after handling the request. TController is not required to be thread-safe, as it will be constructed and used in the same synchronization context. However, since request handling is asynchronous, the actual execution thread may vary during execution. Care must be exercised when using thread-sensitive resources or thread-static data. If TController implements , its Dispose method will be called when it has finished handling a request. In this case it is recommended that factory return a newly-constructed instance of TController at each invocation. If TController does not implement , factory may employ techniques such as instance pooling to avoid the overhead of constructing a new instance of TController at each invocation. If so, resources such as file handles, database connections, etc. should be freed before returning from each handler method to avoid starvation . See Also RegisterControllerType<TController>() RegisterControllerType(Type, Func<WebApiController>) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebApi.WebApiModuleExtensions.html": {
    "href": "api/EmbedIO.WebApi.WebApiModuleExtensions.html",
    "title": "Class WebApiModuleExtensions | EmbedIO",
    "keywords": "Class WebApiModuleExtensions Provides extension methods for WebApiModule . Inheritance Object WebApiModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO.WebApi Syntax public static class WebApiModuleExtensions Methods WithController(WebApiModule, Type) Registers a controller type using a constructor. See RegisterControllerType(Type) for further information. Declaration public static WebApiModule WithController(this WebApiModule this, Type controllerType) Parameters Type Name Description WebApiModule this The WebApiModule on which this method is called. Type controllerType The type of the controller. Returns Type Description WebApiModule this with the controller type registered. See Also WithController(WebApiModule, Type, Func<WebApiController>) WithController<TController>(WebApiModule) RegisterControllerType ( Type ) WithController(WebApiModule, Type, Func<WebApiController>) Registers a controller type using a factory method. See RegisterControllerType(Type, Func<WebApiController>) for further information. Declaration public static WebApiModule WithController(this WebApiModule this, Type controllerType, Func<WebApiController> factory) Parameters Type Name Description WebApiModule this The WebApiModule on which this method is called. Type controllerType The type of the controller. Func < WebApiController > factory The factory method used to construct instances of controllerType . Returns Type Description WebApiModule this with the controller type registered. See Also WithController(WebApiModule, Type) WithController<TController>(WebApiModule, Func<TController>) RegisterControllerType ( Type , Func < WebApiController >) WithController<TController>(WebApiModule) Registers a controller type using a constructor. See RegisterControllerType<TController>() for further information. Declaration public static WebApiModule WithController<TController>(this WebApiModule this) where TController : WebApiController, new() Parameters Type Name Description WebApiModule this The WebApiModule on which this method is called. Returns Type Description WebApiModule this with the controller type registered. Type Parameters Name Description TController The type of the controller. See Also WithController<TController>(WebApiModule, Func<TController>) WithController(WebApiModule, Type) RegisterControllerType<TController> () WithController<TController>(WebApiModule, Func<TController>) Registers a controller type using a factory method. See RegisterControllerType<TController>(Func<TController>) for further information. Declaration public static WebApiModule WithController<TController>(this WebApiModule this, Func<TController> factory) where TController : WebApiController Parameters Type Name Description WebApiModule this The WebApiModule on which this method is called. Func <TController> factory The factory method used to construct instances of TController . Returns Type Description WebApiModule this with the controller type registered. Type Parameters Name Description TController The type of the controller. See Also WithController<TController>(WebApiModule) WithController(WebApiModule, Type, Func<WebApiController>) RegisterControllerType<TController> ( Func <TController>) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebModuleBase.html": {
    "href": "api/EmbedIO.WebModuleBase.html",
    "title": "Class WebModuleBase | EmbedIO",
    "keywords": "Class WebModuleBase Base class to define web modules. Although it is not required that a module inherits from this class, it provides some useful features: validation and immutability of the BaseRoute property, which are of paramount importance for the correct functioning of a web server; support for configuration locking upon web server startup (see the property and the method); a basic implementation of the Start(CancellationToken) method for modules that do not need to do anything upon web server startup; implementation of the OnUnhandledException callback property. Inheritance Object WebModuleBase ActionModule RedirectModule AuthenticationModuleBase CorsModule FileModule ModuleGroup RoutingModuleBase IPBanningModule WebSocketModule Implements IWebModuleImpl IWebModule Namespace : EmbedIO Syntax public abstract class WebModuleBase : ConfiguredObject, IWebModuleImpl, IWebModule Constructors WebModuleBase(String) Initializes a new instance of the WebModuleBase class. Declaration protected WebModuleBase(string baseRoute) Parameters Type Name Description String baseRoute The base route served by this module. See Also BaseRoute Properties BaseRoute Gets the base route of a module. Declaration public string BaseRoute { get; } Property Value Type Description String The base route. Remarks A base route is either \"/\" (the root path), or a prefix starting and ending with a '/' character. Container Gets the container of this module. Declaration public IWebModuleContainer Container { get; } Property Value Type Description IWebModuleContainer See Also IWebModuleContainer IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public abstract bool IsFinalHandler { get; } Property Value Type Description Boolean Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () LogSource Gets a string to use as a source for log messages. Declaration protected string LogSource { get; } Property Value Type Description String OnHttpException Gets or sets a callback that is called every time a HTTP exception is thrown during the processing of a request. If this property is null (the default), the exception will be handled by the web server, or by the containing ModuleGroup . Declaration public HttpExceptionHandlerCallback OnHttpException { get; set; } Property Value Type Description HttpExceptionHandlerCallback See Also HttpExceptionHandler OnUnhandledException Gets or sets a callback that is called every time an unhandled exception occurs during the processing of a request. If this property is null (the default), the exception will be handled by the web server, or by the containing ModuleGroup . Declaration public ExceptionHandlerCallback OnUnhandledException { get; set; } Property Value Type Description ExceptionHandlerCallback See Also ExceptionHandler Methods HandleRequestAsync(IHttpContext) Handles a request from a client. Declaration public Task HandleRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. MatchUrlPath(String) Matches the specified URL path against a module's BaseRoute , extracting values for the route's parameters and a sub-path. Declaration public RouteMatch MatchUrlPath(string path) Parameters Type Name Description String path The URL path to match. Returns Type Description RouteMatch If the match is successful, a object; otherwise, null . OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected abstract Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. OnStart(CancellationToken) Called when a module is started, immediately before locking the module's configuration. Declaration protected virtual void OnStart(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. SetContainer(IWebModuleContainer) Sets the container of this module. This API supports the EmbedIO infrastructure; it is not intended to be used directly from your code. Declaration protected void SetContainer(IWebModuleContainer value) Parameters Type Name Description IWebModuleContainer value The container to associate this module with. See Also Container IWebModuleContainer Start(CancellationToken) Signals a module that the web server is starting. Declaration public void Start(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Remarks The module's configuration is locked before returning from this method. Explicit Interface Implementations IWebModuleImpl.SetContainer(IWebModuleContainer) Sets the container of this module. This API supports the EmbedIO infrastructure; it is not intended to be used directly from your code. Declaration void IWebModuleImpl.SetContainer(IWebModuleContainer value) Parameters Type Name Description IWebModuleContainer value The container to associate this module with. See Also Container IWebModuleContainer Implements IWebModuleImpl IWebModule Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebModuleContainer.html": {
    "href": "api/EmbedIO.WebModuleContainer.html",
    "title": "Class WebModuleContainer | EmbedIO",
    "keywords": "Class WebModuleContainer Provides useful constants for dealing with module containers. Inheritance Object WebModuleContainer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebModuleContainer Fields None An IWebModuleContainer interface that does not and cannot contain any module. This field is useful to initialize non-nullable fields or properties of type IWebModuleContainer . Declaration public static readonly IWebModuleContainer None Field Value Type Description IWebModuleContainer Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebModuleContainerExtensions.html": {
    "href": "api/EmbedIO.WebModuleContainerExtensions.html",
    "title": "Class WebModuleContainerExtensions | EmbedIO",
    "keywords": "Class WebModuleContainerExtensions Contains extension methods for types implementing IWebModuleContainer . Inheritance Object WebModuleContainerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebModuleContainerExtensions Methods OnAny<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all requests and adds it to a module container. Declaration public static TContainer OnAny<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnAny<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnAny<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnDelete<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all DELETE requests and adds it to a module container. Declaration public static TContainer OnDelete<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnDelete<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all DELETE requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnDelete<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnGet<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all GET requests and adds it to a module container. Declaration public static TContainer OnGet<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnGet<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all GET requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnGet<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnHead<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all HEAD requests and adds it to a module container. Declaration public static TContainer OnHead<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnHead<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all HEAD requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnHead<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnOptions<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all OPTIONS requests and adds it to a module container. Declaration public static TContainer OnOptions<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnOptions<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all OPTIONS requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnOptions<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPatch<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all PATCH requests and adds it to a module container. Declaration public static TContainer OnPatch<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPatch<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all PATCH requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnPatch<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPost<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all POST requests and adds it to a module container. Declaration public static TContainer OnPost<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPost<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all POST requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnPost<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPut<TContainer>(TContainer, RequestHandlerCallback) Creates an instance of that intercepts all PUT requests and adds it to a module container. Declaration public static TContainer OnPut<TContainer>(this TContainer this, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules OnPut<TContainer>(TContainer, String, RequestHandlerCallback) Creates an instance of that intercepts all PUT requests under the specified baseRoute and adds it to a module container. Declaration public static TContainer OnPut<TContainer>(this TContainer this, string baseRoute, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithAction<TContainer>(TContainer, HttpVerb, RequestHandlerCallback) Creates an instance of with a base URL path of \"/\" and adds it to a module container. Declaration public static TContainer WithAction<TContainer>(this TContainer this, HttpVerb verb, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. HttpVerb verb The HTTP verb that will be served by handler . RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithAction<TContainer>(TContainer, String, HttpVerb, RequestHandlerCallback) Creates an instance of and adds it to a module container. Declaration public static TContainer WithAction<TContainer>(this TContainer this, string baseRoute, HttpVerb verb, RequestHandlerCallback handler) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. HttpVerb verb The HTTP verb that will be served by handler . RequestHandlerCallback handler The callback used to handle requests. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithCors<TContainer>(TContainer, String, String, String) Creates an instance of and adds it to a module container. Declaration public static TContainer WithCors<TContainer>(this TContainer this, string origins = null, string headers = null, string methods = null) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String origins The valid origins. Default is \"*\" , meaning all origins. String headers The valid headers. Default is \"*\" , meaning all headers. String methods The valid method. Default is \"*\" , meaning all methods. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. WithCors<TContainer>(TContainer, String, String, String, String) Creates an instance of and adds it to a module container. Declaration public static TContainer WithCors<TContainer>(this TContainer this, string baseRoute, string origins, string headers, string methods) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. String origins The valid origins. Default is \"*\" , meaning all origins. String headers The valid headers. Default is \"*\" , meaning all headers. String methods The valid method. Default is \"*\" , meaning all methods. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. WithEmbeddedResources<TContainer>(TContainer, String, Assembly, String, Nullable<Action<FileModule>>) Creates an instance of , uses it to initialize a , and adds the latter to a module container. Declaration public static TContainer WithEmbeddedResources<TContainer>(this TContainer this, string baseRoute, Assembly assembly, string pathPrefix, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. Assembly assembly The assembly where served files are contained as embedded resources. String pathPrefix A string to prepend to provider-specific paths to form the name of a manifest resource in assembly . Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithEmbeddedResources<TContainer>(TContainer, String, String, Assembly, String, Nullable<Action<FileModule>>) Creates an instance of , uses it to initialize a , and adds the latter to a module container, giving it the specified name if not null . Declaration public static TContainer WithEmbeddedResources<TContainer>(this TContainer this, string name, string baseRoute, Assembly assembly, string pathPrefix, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. Assembly assembly The assembly where served files are contained as embedded resources. String pathPrefix A string to prepend to provider-specific paths to form the name of a manifest resource in assembly . Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithIPBanning<TContainer>(TContainer, Nullable<Action<IPBanningModule>>, Nullable<IEnumerable<String>>, Int32) Creates an instance of and adds it to a module container. Declaration public static TContainer WithIPBanning<TContainer>(this TContainer this, Action<IPBanningModule>? configure, IEnumerable<string>? whiteList = default(IEnumerable<string>? ), int banMinutes = default(int)) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. Nullable < Action < IPBanningModule >> configure The configure. Nullable < IEnumerable < String >> whiteList A collection of valid IPs that never will be banned. Int32 banMinutes Minutes that an IP will remain banned. Returns Type Description TContainer this with an added. Type Parameters Name Description TContainer The type of the module container. WithIPBanning<TContainer>(TContainer, Nullable<IEnumerable<String>>, Int32) Creates an instance of and adds it to a module container. Declaration public static TContainer WithIPBanning<TContainer>(this TContainer this, IEnumerable<string>? whiteList = default(IEnumerable<string>? ), int banMinutes = default(int)) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. Nullable < IEnumerable < String >> whiteList A collection of valid IPs that never will be banned. Int32 banMinutes Minutes that an IP will remain banned. Returns Type Description TContainer this with an added. Type Parameters Name Description TContainer The type of the module container. WithModule<TContainer>(TContainer, IWebModule) Adds the specified module to a module container, without giving it a name. Declaration public static TContainer WithModule<TContainer>(this TContainer this, IWebModule module) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. IWebModule module The module. Returns Type Description TContainer this with module added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithModule<TContainer>(TContainer, String, IWebModule) Adds the specified module to a module container, giving it the specified name if not null . Declaration public static TContainer WithModule<TContainer>(this TContainer this, string name, IWebModule module) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. IWebModule module The module. Returns Type Description TContainer this with module added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithModule<TContainer, TWebModule>(TContainer, TWebModule, Nullable<Action<TWebModule>>) Adds the specified module to a module container, without giving it a name. Declaration public static TContainer WithModule<TContainer, TWebModule>(this TContainer this, TWebModule module, Action<TWebModule>? configure) where TContainer : class, IWebModuleContainer where TWebModule : IWebModule Parameters Type Name Description TContainer this The TContainer on which this method is called. TWebModule module The module. Nullable < Action <TWebModule>> configure A callback used to configure the module . Returns Type Description TContainer this with module added. Type Parameters Name Description TContainer The type of the module container. TWebModule The type of the module . See Also Modules WithModule<TContainer, TWebModule>(TContainer, String, TWebModule, Nullable<Action<TWebModule>>) Adds the specified module to a module container, giving it the specified name if not null . Declaration public static TContainer WithModule<TContainer, TWebModule>(this TContainer this, string name, TWebModule module, Action<TWebModule>? configure) where TContainer : class, IWebModuleContainer where TWebModule : IWebModule Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. TWebModule module The module. Nullable < Action <TWebModule>> configure A callback used to configure the module . Returns Type Description TContainer this with module added. Type Parameters Name Description TContainer The type of the module container. TWebModule The type of the module . See Also Modules WithRouting<TContainer>(TContainer, String, Action<RoutingModule>) Creates an instance of and adds it to a module container. Declaration public static TContainer WithRouting<TContainer>(this TContainer this, string baseRoute, Action<RoutingModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. Action < RoutingModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithRouting<TContainer>(TContainer, String, String, Action<RoutingModule>) Creates an instance of and adds it to a module container, giving it the specified name if not null . Declaration public static TContainer WithRouting<TContainer>(this TContainer this, string name, string baseRoute, Action<RoutingModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. Action < RoutingModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithStaticFolder<TContainer>(TContainer, String, String, Boolean, Nullable<Action<FileModule>>) Creates an instance of , uses it to initialize a , and adds the latter to a module container. Declaration public static TContainer WithStaticFolder<TContainer>(this TContainer this, string baseRoute, string fileSystemPath, bool isImmutable, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. String fileSystemPath The path of the directory to serve. Boolean isImmutable true if files and directories in fileSystemPath are not expected to change during a web server's lifetime; false otherwise. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithStaticFolder<TContainer>(TContainer, String, String, String, Boolean, Nullable<Action<FileModule>>) Creates an instance of , uses it to initialize a , and adds the latter to a module container, giving it the specified name if not null . Declaration public static TContainer WithStaticFolder<TContainer>(this TContainer this, string name, string baseRoute, string fileSystemPath, bool isImmutable, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. String fileSystemPath The path of the directory to serve. Boolean isImmutable true if files and directories in fileSystemPath are not expected to change during a web server's lifetime; false otherwise. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. Remarks OSX doesn't support , the parameter isImmutable will be always true . See Also Modules WithWebApi<TContainer>(TContainer, String, Action<WebApiModule>) Creates an instance of using the default response serializer and adds it to a module container without giving it a name. Declaration public static TContainer WithWebApi<TContainer>(this TContainer this, string baseRoute, Action<WebApiModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. Action < WebApiModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithWebApi<TContainer>(TContainer, String, ResponseSerializerCallback, Action<WebApiModule>) Creates an instance of using the specified response serializer and adds it to a module container without giving it a name. Declaration public static TContainer WithWebApi<TContainer>(this TContainer this, string baseRoute, ResponseSerializerCallback serializer, Action<WebApiModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. ResponseSerializerCallback serializer A ResponseSerializerCallback used to serialize the result of controller methods returning langword_csharp_object or Task<object> . Action < WebApiModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithWebApi<TContainer>(TContainer, String, String, Action<WebApiModule>) Creates an instance of using the default response serializer and adds it to a module container, giving it the specified name if not null Declaration public static TContainer WithWebApi<TContainer>(this TContainer this, string name, string baseRoute, Action<WebApiModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. Action < WebApiModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithWebApi<TContainer>(TContainer, String, String, ResponseSerializerCallback, Action<WebApiModule>) Creates an instance of , using the specified response serializer and adds it to a module container, giving it the specified name if not null Declaration public static TContainer WithWebApi<TContainer>(this TContainer this, string name, string baseRoute, ResponseSerializerCallback serializer, Action<WebApiModule> configure) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. ResponseSerializerCallback serializer A ResponseSerializerCallback used to serialize the result of controller methods returning langword_csharp_object or Task<object> . Action < WebApiModule > configure A callback used to configure the newly-created . Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithZipFile<TContainer>(TContainer, String, String, Nullable<Action<FileModule>>) Creates an instance of using a file-system path, uses it to initialize a , and adds the latter to a module container. Declaration public static TContainer WithZipFile<TContainer>(this TContainer this, string baseRoute, string zipFilePath, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. String zipFilePath The local path of the Zip file. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithZipFile<TContainer>(TContainer, String, String, String, Nullable<Action<FileModule>>) Creates an instance of using a file-system path, uses it to initialize a , and adds the latter to a module container, giving it the specified name if not null . Declaration public static TContainer WithZipFile<TContainer>(this TContainer this, string name, string baseRoute, string zipFilePath, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. String zipFilePath The zip file-system path. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithZipFileStream<TContainer>(TContainer, String, Stream, Nullable<Action<FileModule>>) Creates an instance of using a zip file as stream, uses it to initialize a , and adds the latter to a module container. Declaration public static TContainer WithZipFileStream<TContainer>(this TContainer this, string baseRoute, Stream zipFileStream, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String baseRoute The base route of the module. Stream zipFileStream The zip file as stream. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules WithZipFileStream<TContainer>(TContainer, String, String, Stream, Nullable<Action<FileModule>>) Creates an instance of using a zip file as stream, uses it to initialize a , and adds the latter to a module container, giving it the specified name if not null . Declaration public static TContainer WithZipFileStream<TContainer>(this TContainer this, string name, string baseRoute, Stream zipFileStream, Action<FileModule>? configure = default(Action<FileModule>? )) where TContainer : class, IWebModuleContainer Parameters Type Name Description TContainer this The TContainer on which this method is called. String name The name. String baseRoute The base route of the module. Stream zipFileStream The zip file as stream. Nullable < Action < FileModule >> configure A callback used to configure the module. Returns Type Description TContainer this with a added. Type Parameters Name Description TContainer The type of the module container. See Also Modules Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebModuleExtensions.html": {
    "href": "api/EmbedIO.WebModuleExtensions.html",
    "title": "Class WebModuleExtensions | EmbedIO",
    "keywords": "Class WebModuleExtensions Provides extension methods for types implementing IWebModule . Inheritance Object WebModuleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebModuleExtensions Methods GetImplementation(IWebModule) Gets the underlying IWebModuleImpl interface of an IWebModule . This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to fulfill very specific needs in the development of plug-ins (modules, etc.) for EmbedIO. Declaration public static IWebModuleImpl GetImplementation(this IWebModule this) Parameters Type Name Description IWebModule this The IWebModule interface on which this method is called. Returns Type Description IWebModuleImpl The underlying IWebModuleImpl interface representing the web module implementation. HandleHttpException<TWebModule>(TWebModule, HttpExceptionHandlerCallback) Sets the HTTP exception handler on an IWebModule . Declaration public static TWebModule HandleHttpException<TWebModule>(this TWebModule this, HttpExceptionHandlerCallback handler) where TWebModule : IWebModule Parameters Type Name Description TWebModule this The TWebModule on which this method is called. HttpExceptionHandlerCallback handler The HTTP exception handler. Returns Type Description TWebModule this with the OnHttpException property set to handler . Type Parameters Name Description TWebModule The type of the web server. See Also OnHttpException HttpExceptionHandler HandleUnhandledException<TWebModule>(TWebModule, ExceptionHandlerCallback) Sets the unhandled exception handler on an IWebModule . Declaration public static TWebModule HandleUnhandledException<TWebModule>(this TWebModule this, ExceptionHandlerCallback handler) where TWebModule : IWebModule Parameters Type Name Description TWebModule this The TWebModule on which this method is called. ExceptionHandlerCallback handler The unhandled exception handler. Returns Type Description TWebModule this with the OnUnhandledException property set to handler . Type Parameters Name Description TWebModule The type of the web server. See Also OnUnhandledException ExceptionHandler Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServer.html": {
    "href": "api/EmbedIO.WebServer.html",
    "title": "Class WebServer | EmbedIO",
    "keywords": "Class WebServer EmbedIO's web server. This is the default implementation of IWebServer . This class also contains some useful constants related to EmbedIO's internal working. Inheritance Object WebServerBase < WebServerOptions > WebServer Implements IWebServer IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider IHttpContextHandler Inherited Members WebServerBase<WebServerOptions>.StateChanged WebServerBase<WebServerOptions>.Modules WebServerBase<WebServerOptions>.SharedItems WebServerBase<WebServerOptions>.Options WebServerBase<WebServerOptions>.OnUnhandledException WebServerBase<WebServerOptions>.OnHttpException WebServerBase<WebServerOptions>.SessionManager WebServerBase<WebServerOptions>.State WebServerBase<WebServerOptions>.LogSource WebServerBase<WebServerOptions>.HandleContextAsync(IHttpContextImpl) WebServerBase<WebServerOptions>.GetMimeType(String) WebServerBase<WebServerOptions>.TryDetermineCompression(String, Boolean) WebServerBase<WebServerOptions>.AddCustomMimeType(String, String) WebServerBase<WebServerOptions>.PreferCompression(String, Boolean) WebServerBase<WebServerOptions>.RunAsync(CancellationToken) WebServerBase<WebServerOptions>.Dispose() WebServerBase<WebServerOptions>.DoHandleContextAsync(IHttpContextImpl) WebServerBase<WebServerOptions>.OnBeforeLockConfiguration() Namespace : EmbedIO Syntax public class WebServer : WebServerBase<WebServerOptions>, IWebServer, IDisposable, IWebModuleContainer, IMimeTypeCustomizer, IMimeTypeProvider, IHttpContextHandler Constructors WebServer() Initializes a new instance of the WebServer class, that will respond on HTTP port 80 on all network interfaces. Declaration public WebServer() WebServer(Action<WebServerOptions>) Initializes a new instance of the WebServer class. Declaration public WebServer(Action<WebServerOptions> configure) Parameters Type Name Description Action < WebServerOptions > configure A callback that will be used to configure the server's options. WebServer(HttpListenerMode, String[]) Initializes a new instance of the WebServer class. Declaration public WebServer(HttpListenerMode mode, params string[] urlPrefixes) Parameters Type Name Description HttpListenerMode mode The type of HTTP listener to configure. String [] urlPrefixes The URL prefixes to configure. WebServer(HttpListenerMode, X509Certificate2, String[]) Initializes a new instance of the WebServer class. Declaration public WebServer(HttpListenerMode mode, X509Certificate2 certificate, params string[] urlPrefixes) Parameters Type Name Description HttpListenerMode mode The type of HTTP listener to configure. X509Certificate2 certificate The X.509 certificate to use for SSL connections. String [] urlPrefixes The URL prefixes to configure. WebServer(WebServerOptions) Initializes a new instance of the WebServer class. Declaration public WebServer(WebServerOptions options) Parameters Type Name Description WebServerOptions options A WebServerOptions object used to configure this instance. WebServer(Int32) Initializes a new instance of the WebServer class, that will respond on the specified HTTP port on all network interfaces. Declaration public WebServer(int port) Parameters Type Name Description Int32 port The port. WebServer(String[]) Initializes a new instance of the WebServer class with the specified URL prefixes. Declaration public WebServer(params string[] urlPrefixes) Parameters Type Name Description String [] urlPrefixes The URL prefixes to configure. Fields Signature The signature string included in Server response headers. Declaration public static readonly string Signature Field Value Type Description String StreamCopyBufferSize The size, in bytes,of buffers used to transfer contents between streams. The value of this constant is the same as the default used by the method. For the reasons why this value was chosen, see .NET Framework reference source . Declaration public const int StreamCopyBufferSize = 81920 Field Value Type Description Int32 Properties IsIPv4Supported Gets whether IPv4 is supported on the machine. Declaration public static bool IsIPv4Supported { get; } Property Value Type Description Boolean IsIPv6Supported Gets whether IPv6 is supported on the machine. Declaration public static bool IsIPv6Supported { get; } Property Value Type Description Boolean Listener Gets the underlying HTTP listener. Declaration public IHttpListener Listener { get; } Property Value Type Description IHttpListener Methods Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides EmbedIO.WebServerBase<EmbedIO.WebServerOptions>.Dispose(System.Boolean) OnFatalException() Called when an exception is caught in the web server's request processing loop. This method should tell the server socket to stop accepting further requests. Declaration protected override void OnFatalException() Overrides EmbedIO.WebServerBase<EmbedIO.WebServerOptions>.OnFatalException() Prepare(CancellationToken) Prepares a web server for running. Declaration protected override void Prepare(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Overrides EmbedIO.WebServerBase<EmbedIO.WebServerOptions>.Prepare(CancellationToken) ProcessRequestsAsync(CancellationToken) Asynchronously receives requests and processes them. Declaration protected override Task ProcessRequestsAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Returns Type Description Task A representing the ongoing operation. Overrides EmbedIO.WebServerBase<EmbedIO.WebServerOptions>.ProcessRequestsAsync(CancellationToken) Implements IWebServer IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider IHttpContextHandler Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerBase-1.html": {
    "href": "api/EmbedIO.WebServerBase-1.html",
    "title": "Class WebServerBase<TOptions> | EmbedIO",
    "keywords": "Class WebServerBase<TOptions> Base class for IWebServer implementations. Inheritance Object WebServerBase<TOptions> WebServer Implements IWebServer IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider IHttpContextHandler Namespace : EmbedIO Syntax public abstract class WebServerBase<TOptions> : ConfiguredObject, IWebServer, IDisposable, IWebModuleContainer, IMimeTypeCustomizer, IMimeTypeProvider, IHttpContextHandler where TOptions : WebServerOptionsBase, new() Type Parameters Name Description TOptions The type of the options object used to configure an instance. Constructors WebServerBase() Initializes a new instance of the WebServerBase<TOptions> class. Declaration protected WebServerBase() WebServerBase(TOptions) Initializes a new instance of the WebServerBase<TOptions> class. Declaration protected WebServerBase(TOptions options) Parameters Type Name Description TOptions options A TOptions instance that will be used to configure the server. WebServerBase(Action<TOptions>) Initializes a new instance of the WebServerBase<TOptions> class. Declaration protected WebServerBase(Action<TOptions> configure) Parameters Type Name Description Action <TOptions> configure A callback that will be used to configure the server's options. Properties LogSource Gets a string to use as a source for log messages. Declaration protected string LogSource { get; } Property Value Type Description String Modules Gets the modules. Declaration public IComponentCollection<IWebModule> Modules { get; } Property Value Type Description IComponentCollection < IWebModule > The modules. OnHttpException Gets or sets a callback that is called every time a HTTP exception is thrown during the processing of a request. This property can never be null . Declaration public HttpExceptionHandlerCallback OnHttpException { get; set; } Property Value Type Description HttpExceptionHandlerCallback Remarks The default value for this property is Default . See Also HttpExceptionHandler OnUnhandledException Gets or sets a callback that is called every time an unhandled exception occurs during the processing of a request. This property can never be null . If it is still Declaration public ExceptionHandlerCallback OnUnhandledException { get; set; } Property Value Type Description ExceptionHandlerCallback Remarks The default value for this property is Default . See Also ExceptionHandler Options Gets the options object used to configure this instance. Declaration public TOptions Options { get; } Property Value Type Description TOptions SessionManager Gets or sets the registered session ID manager, if any. A session ID manager is an implementation of . Note that this property can only be set before starting the web server. Declaration public ISessionManager? SessionManager { get; set; } Property Value Type Description Nullable < ISessionManager > The session manager, or null if no session manager is present. SharedItems Gets a dictionary of data shared among the modules in a container. This API mainly supports the EmbedIO infrastructure; it is not intended to be used directly from your code, unless to address specific needs in module development. Declaration public ConcurrentDictionary<object, object> SharedItems { get; } Property Value Type Description ConcurrentDictionary < Object , Object > State Gets the state of the web server. Declaration public WebServerState State { get; } Property Value Type Description WebServerState The state. See Also WebServerState Methods AddCustomMimeType(String, String) Adds a custom association between a file extension and a MIME type. Declaration public void AddCustomMimeType(string extension, string mimeType) Parameters Type Name Description String extension The file extension to associate to mimeType . String mimeType The MIME type to associate to extension . Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. DoHandleContextAsync(IHttpContextImpl) Asynchronously handles a received request. Declaration protected Task DoHandleContextAsync(IHttpContextImpl context) Parameters Type Name Description IHttpContextImpl context The context of the request. Returns Type Description Task A representing the ongoing operation. Finalize() Finalizes an instance of the WebServerBase<TOptions> class. Declaration protected void Finalize() GetMimeType(String) Gets the MIME type associated to a file extension. Declaration public string GetMimeType(string extension) Parameters Type Name Description String extension The file extension for which a corresponding MIME type is wanted. Returns Type Description String The MIME type corresponding to extension , if one is found; otherwise, null . HandleContextAsync(IHttpContextImpl) Asynchronously handles a HTTP context, generating a suitable response for an incoming request. This API supports the EmbedIO infrastructure and is not intended to be used directly from your code. Declaration public Task HandleContextAsync(IHttpContextImpl context) Parameters Type Name Description IHttpContextImpl context The HTTP context. Returns Type Description Task A representing the ongoing operation. OnBeforeLockConfiguration() Declaration protected override void OnBeforeLockConfiguration() OnFatalException() Called when an exception is caught in the web server's request processing loop. This method should tell the server socket to stop accepting further requests. Declaration protected abstract void OnFatalException() PreferCompression(String, Boolean) Indicates whether to prefer compression when negotiating content encoding for a response with the specified content type, or whose content type is in the specified media range. Declaration public void PreferCompression(string mimeType, bool preferCompression) Parameters Type Name Description String mimeType The MIME type or media range. Boolean preferCompression true to prefer compression; otherwise, false . Prepare(CancellationToken) Prepares a web server for running. Declaration protected virtual void Prepare(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. ProcessRequestsAsync(CancellationToken) Asynchronously receives requests and processes them. Declaration protected abstract Task ProcessRequestsAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Returns Type Description Task A representing the ongoing operation. RunAsync(CancellationToken) Starts the listener and the registered modules. Declaration public Task RunAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token; when cancelled, the server cancels all pending requests and stops. Returns Type Description Task Returns the task that the HTTP listener is running inside of, so that it can be waited upon after it's been canceled. TryDetermineCompression(String, out Boolean) Attempts to determine whether compression should be preferred when negotiating content encoding for a response with the specified content type. Declaration public bool TryDetermineCompression(string mimeType, out bool preferCompression) Parameters Type Name Description String mimeType The MIME type to check. Boolean preferCompression When this method returns true , a value indicating whether compression should be preferred. This parameter is passed uninitialized. Returns Type Description Boolean true if a value is found for mimeType ; otherwise, false . Events StateChanged Declaration public event EventHandler<WebServerStateChangedEventArgs>? StateChanged Event Type Type Description Nullable < EventHandler < WebServerStateChangedEventArgs >> Implements IWebServer IDisposable IWebModuleContainer IMimeTypeCustomizer IMimeTypeProvider IHttpContextHandler See Also IHttpContextHandler IWebServer Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerExtensions.html": {
    "href": "api/EmbedIO.WebServerExtensions.html",
    "title": "Class WebServerExtensions | EmbedIO",
    "keywords": "Class WebServerExtensions Provides extension methods for types implementing IWebServer . Inheritance Object WebServerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebServerExtensions Methods HandleHttpException<TWebServer>(TWebServer, HttpExceptionHandlerCallback) Sets the HTTP exception handler on an IWebServer . Declaration public static TWebServer HandleHttpException<TWebServer>(this TWebServer this, HttpExceptionHandlerCallback handler) where TWebServer : IWebServer Parameters Type Name Description TWebServer this The TWebServer on which this method is called. HttpExceptionHandlerCallback handler The HTTP exception handler. Returns Type Description TWebServer this with the OnHttpException property set to handler . Type Parameters Name Description TWebServer The type of the web server. See Also OnHttpException HttpExceptionHandler HandleUnhandledException<TWebServer>(TWebServer, ExceptionHandlerCallback) Sets the unhandled exception handler on an IWebServer . Declaration public static TWebServer HandleUnhandledException<TWebServer>(this TWebServer this, ExceptionHandlerCallback handler) where TWebServer : IWebServer Parameters Type Name Description TWebServer this The TWebServer on which this method is called. ExceptionHandlerCallback handler The unhandled exception handler. Returns Type Description TWebServer this with the OnUnhandledException property set to handler . Type Parameters Name Description TWebServer The type of the web server. See Also OnUnhandledException ExceptionHandler Start(IWebServer, CancellationToken) Starts a web server by calling RunAsync(CancellationToken) in another thread. Declaration public static void Start(this IWebServer this, CancellationToken cancellationToken = null) Parameters Type Name Description IWebServer this The IWebServer on which this method is called. CancellationToken cancellationToken A used to stop the web server. WithLocalSessionManager<TWebServer>(TWebServer, Nullable<Action<LocalSessionManager>>) Creates a with all properties set to their default values and sets it as session manager on an IWebServer . Declaration public static TWebServer WithLocalSessionManager<TWebServer>(this TWebServer this, Action<LocalSessionManager>? configure = default(Action<LocalSessionManager>? )) where TWebServer : IWebServer Parameters Type Name Description TWebServer this The IWebServer on which this method is called. Nullable < Action < LocalSessionManager >> configure A callback used to configure the session manager. Returns Type Description TWebServer this with the session manager set. Type Parameters Name Description TWebServer The type of the web server. WithSessionManager<TWebServer>(TWebServer, ISessionManager) Sets the session manager on an IWebServer . Declaration public static TWebServer WithSessionManager<TWebServer>(this TWebServer this, ISessionManager sessionManager) where TWebServer : IWebServer Parameters Type Name Description TWebServer this The IWebServer on which this method is called. ISessionManager sessionManager The session manager. Returns Type Description TWebServer this with the session manager set. Type Parameters Name Description TWebServer The type of the web server. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerOptions.html": {
    "href": "api/EmbedIO.WebServerOptions.html",
    "title": "Class WebServerOptions | EmbedIO",
    "keywords": "Class WebServerOptions Contains options for configuring an instance of WebServer . Inheritance Object WebServerOptionsBase WebServerOptions Inherited Members WebServerOptionsBase.SupportCompressedRequests WebServerOptionsBase.Lock() Namespace : EmbedIO Syntax public sealed class WebServerOptions : WebServerOptionsBase Properties AutoLoadCertificate Gets or sets a value indicating whether to automatically load the X.509 certificate. Declaration public bool AutoLoadCertificate { get; set; } Property Value Type Description Boolean AutoRegisterCertificate Gets or sets a value indicating whether to automatically bind the X.509 certificate to the port used for HTTPS. Declaration public bool AutoRegisterCertificate { get; set; } Property Value Type Description Boolean Certificate Gets or sets the X.509 certificate to use for SSL connections. Declaration public X509Certificate2? Certificate { get; set; } Property Value Type Description Nullable < X509Certificate2 > CertificateThumbprint Gets or sets the thumbprint of the X.509 certificate to use for SSL connections. Declaration public string CertificateThumbprint { get; set; } Property Value Type Description String Mode Gets or sets the type of HTTP listener. Declaration public HttpListenerMode Mode { get; set; } Property Value Type Description HttpListenerMode See Also HttpListenerMode StoreLocation Gets or sets a value indicating the location of the X.509 certificate store where to load the certificate from. Declaration public StoreLocation StoreLocation { get; set; } Property Value Type Description StoreLocation StoreName Gets or sets a value indicating the X.509 certificate store where to load the certificate from. Declaration public StoreName StoreName { get; set; } Property Value Type Description StoreName UrlPrefixes Gets the URL prefixes. Declaration public IReadOnlyList<string> UrlPrefixes { get; } Property Value Type Description IReadOnlyList < String > Methods AddUrlPrefix(String) Adds a URL prefix. Declaration public void AddUrlPrefix(string prefix) Parameters Type Name Description String prefix The URL prefix. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerOptionsBase.html": {
    "href": "api/EmbedIO.WebServerOptionsBase.html",
    "title": "Class WebServerOptionsBase | EmbedIO",
    "keywords": "Class WebServerOptionsBase Base class for web server options. Inheritance Object WebServerOptionsBase WebServerOptions Namespace : EmbedIO Syntax public abstract class WebServerOptionsBase : ConfiguredObject Properties SupportCompressedRequests Gets or sets a value indicating whether compressed request bodies are supported. The default value is false , because of the security risk posed by decompression bombs . Declaration public bool SupportCompressedRequests { get; set; } Property Value Type Description Boolean Methods Lock() Locks this instance, preventing further configuration. Declaration public void Lock() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerOptionsBaseExtensions.html": {
    "href": "api/EmbedIO.WebServerOptionsBaseExtensions.html",
    "title": "Class WebServerOptionsBaseExtensions | EmbedIO",
    "keywords": "Class WebServerOptionsBaseExtensions Provides extension methods for classes derived from WebServerOptionsBase . Inheritance Object WebServerOptionsBaseExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebServerOptionsBaseExtensions Methods WithSupportCompressedRequests<TOptions>(TOptions, Boolean) Adds a URL prefix. Declaration public static TOptions WithSupportCompressedRequests<TOptions>(this TOptions this, bool value) where TOptions : WebServerOptionsBase Parameters Type Name Description TOptions this The object on which this method is called. Boolean value If true , enable support for compressed request bodies. Returns Type Description TOptions this with its SupportCompressedRequests property set to value . Type Parameters Name Description TOptions The type of the object on which this method is called. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerOptionsExtensions.html": {
    "href": "api/EmbedIO.WebServerOptionsExtensions.html",
    "title": "Class WebServerOptionsExtensions | EmbedIO",
    "keywords": "Class WebServerOptionsExtensions Provides extension methods for WebServerOptions . Inheritance Object WebServerOptionsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : EmbedIO Syntax public static class WebServerOptionsExtensions Methods WithAutoLoadCertificate(WebServerOptions) Instructs a WebServerOptions instance to automatically load the X.509 certificate. Declaration public static WebServerOptions WithAutoLoadCertificate(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its AutoLoadCertificate property set to true . WithAutoLoadCertificate(WebServerOptions, Boolean) Sets a value indicating whether to automatically load the X.509 certificate. Declaration public static WebServerOptions WithAutoLoadCertificate(this WebServerOptions this, bool value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Boolean value If true , automatically load the X.509 certificate. Returns Type Description WebServerOptions this with its AutoLoadCertificate property set to value . WithAutoRegisterCertificate(WebServerOptions) Instructs a WebServerOptions instance to automatically bind the X.509 certificate to the port used for HTTPS. Declaration public static WebServerOptions WithAutoRegisterCertificate(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its AutoRegisterCertificate property set to true . WithAutoRegisterCertificate(WebServerOptions, Boolean) Sets a value indicating whether to automatically bind the X.509 certificate to the port used for HTTPS. Declaration public static WebServerOptions WithAutoRegisterCertificate(this WebServerOptions this, bool value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Boolean value If true , automatically bind the X.509 certificate to the port used for HTTPS. Returns Type Description WebServerOptions this with its AutoRegisterCertificate property set to value . WithCertificate(WebServerOptions, X509Certificate2) Sets the X.509 certificate to use for SSL connections. Declaration public static WebServerOptions WithCertificate(this WebServerOptions this, X509Certificate2 value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. X509Certificate2 value The X.509 certificate to use for SSL connections. Returns Type Description WebServerOptions this with its Certificate property set to value . WithCertificateThumbprint(WebServerOptions, String) Sets the thumbprint of the X.509 certificate to use for SSL connections. Declaration public static WebServerOptions WithCertificateThumbprint(this WebServerOptions this, string value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. String value The thumbprint of the X.509 certificate to use for SSL connections. Returns Type Description WebServerOptions this with its CertificateThumbprint property set to value . WithEmbedIOHttpListener(WebServerOptions) Sets the type of HTTP listener to EmbedIO . Declaration public static WebServerOptions WithEmbedIOHttpListener(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its Mode property set to EmbedIO . WithMicrosoftHttpListener(WebServerOptions) Sets the type of HTTP listener to Microsoft . Declaration public static WebServerOptions WithMicrosoftHttpListener(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its Mode property set to Microsoft . WithMode(WebServerOptions, HttpListenerMode) Sets the type of HTTP listener. Declaration public static WebServerOptions WithMode(this WebServerOptions this, HttpListenerMode value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. HttpListenerMode value The type of HTTP listener. Returns Type Description WebServerOptions this with its Mode property set to value . WithoutAutoLoadCertificate(WebServerOptions) Instructs a WebServerOptions instance to not load the X.509 certificate automatically . Declaration public static WebServerOptions WithoutAutoLoadCertificate(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its AutoLoadCertificate property set to false . WithoutAutoRegisterCertificate(WebServerOptions) Instructs a WebServerOptions instance to not bind the X.509 certificate automatically. Declaration public static WebServerOptions WithoutAutoRegisterCertificate(this WebServerOptions this) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. Returns Type Description WebServerOptions this with its AutoRegisterCertificate property set to false . WithStore(WebServerOptions, StoreName, StoreLocation) Sets the name and location of the X.509 certificate store where to load the certificate from. Declaration public static WebServerOptions WithStore(this WebServerOptions this, StoreName name, StoreLocation location) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. StoreName name One of the constants. StoreLocation location One of the constants. Returns Type Description WebServerOptions this with its StoreName property set to name and its StoreLocation property set to location . WithStoreLocation(WebServerOptions, StoreLocation) Sets a value indicating the location of the X.509 certificate store where to load the certificate from. Declaration public static WebServerOptions WithStoreLocation(this WebServerOptions this, StoreLocation value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. StoreLocation value One of the constants. Returns Type Description WebServerOptions this with its StoreLocation property set to value . WithStoreName(WebServerOptions, StoreName) Sets a value indicating the X.509 certificate store where to load the certificate from. Declaration public static WebServerOptions WithStoreName(this WebServerOptions this, StoreName value) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. StoreName value One of the constants. Returns Type Description WebServerOptions this with its StoreName property set to value . WithUrlPrefix(WebServerOptions, String) Adds a URL prefix. Declaration public static WebServerOptions WithUrlPrefix(this WebServerOptions this, string prefix) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. String prefix The URL prefix. Returns Type Description WebServerOptions this with prefix added. WithUrlPrefixes(WebServerOptions, IEnumerable<String>) Adds zero or more URL prefixes. Declaration public static WebServerOptions WithUrlPrefixes(this WebServerOptions this, IEnumerable<string> urlPrefixes) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. IEnumerable < String > urlPrefixes An enumeration of URL prefixes to add. Returns Type Description WebServerOptions this with every non- null element of urlPrefixes added. WithUrlPrefixes(WebServerOptions, String[]) Adds zero or more URL prefixes. Declaration public static WebServerOptions WithUrlPrefixes(this WebServerOptions this, params string[] urlPrefixes) Parameters Type Name Description WebServerOptions this The WebServerOptions on which this method is called. String [] urlPrefixes An array of URL prefixes to add. Returns Type Description WebServerOptions this with every non- null element of urlPrefixes added. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerState.html": {
    "href": "api/EmbedIO.WebServerState.html",
    "title": "Enum WebServerState | EmbedIO",
    "keywords": "Enum WebServerState Represents the state of a web server. Namespace : EmbedIO Syntax public enum WebServerState Fields Name Description Created The web server has not been started yet. Listening The web server is ready to accept incoming requests. Loading The web server has been started but it is still initializing. Stopped The web server has been stopped. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebServerStateChangedEventArgs.html": {
    "href": "api/EmbedIO.WebServerStateChangedEventArgs.html",
    "title": "Class WebServerStateChangedEventArgs | EmbedIO",
    "keywords": "Class WebServerStateChangedEventArgs Represents event arguments whenever the state of a web server changes. Inheritance Object WebServerStateChangedEventArgs Namespace : EmbedIO Syntax public class WebServerStateChangedEventArgs : EventArgs Constructors WebServerStateChangedEventArgs(WebServerState, WebServerState) Initializes a new instance of the WebServerStateChangedEventArgs class. Declaration public WebServerStateChangedEventArgs(WebServerState oldState, WebServerState newState) Parameters Type Name Description WebServerState oldState The old state. WebServerState newState The new state. Properties NewState Gets the state to which the application service changed. Declaration public WebServerState NewState { get; } Property Value Type Description WebServerState OldState Gets the old state. Declaration public WebServerState OldState { get; } Property Value Type Description WebServerState Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.CloseStatusCode.html": {
    "href": "api/EmbedIO.WebSockets.CloseStatusCode.html",
    "title": "Enum CloseStatusCode | EmbedIO",
    "keywords": "Enum CloseStatusCode Indicates the status code for the WebSocket connection close. Namespace : EmbedIO.WebSockets Syntax public enum CloseStatusCode : ushort Remarks The values of this enumeration are defined in Section 7.4 of RFC 6455. \"Reserved value\" must not be set as a status code in a connection close frame by an endpoint. It's designated for use in applications expecting a status code to indicate that the connection was closed due to the system grounds. Fields Name Description Abnormal Equivalent to close status 1006. Indicates that the connection was closed abnormally. A Reserved value. Away Equivalent to close status 1001. Indicates that an endpoint is going away. InvalidData Equivalent to close status 1007. Indicates that an endpoint is terminating the connection because it has received a message that contains data that isn't consistent with the type of the message. MandatoryExtension Equivalent to close status 1010. Indicates that a client is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the handshake response. Normal Equivalent to close status 1000. Indicates normal close. NoStatus Equivalent to close status 1005. Indicates that no status code was actually present. A Reserved value. PolicyViolation Equivalent to close status 1008. Indicates that an endpoint is terminating the connection because it has received a message that violates its policy. ProtocolError Equivalent to close status 1002. Indicates that an endpoint is terminating the connection due to a protocol error. ServerError Equivalent to close status 1011. Indicates that a server is terminating the connection because it has encountered an unexpected condition that prevented it from fulfilling the request. TlsHandshakeFailure Equivalent to close status 1015. Indicates that the connection was closed due to a failure to perform a TLS handshake. A Reserved value. TooBig Equivalent to close status 1009. Indicates that an endpoint is terminating the connection because it has received a message that is too big to process. Undefined Equivalent to close status 1004. Still undefined. A Reserved value. UnsupportedData Equivalent to close status 1003. Indicates that an endpoint is terminating the connection because it has received a type of data that it cannot accept. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.html": {
    "href": "api/EmbedIO.WebSockets.html",
    "title": "Namespace EmbedIO.WebSockets | EmbedIO",
    "keywords": "Namespace EmbedIO.WebSockets Classes WebSocketException The exception that is thrown when a WebSocket gets a fatal error. WebSocketModule A base class for modules that handle WebSocket connections. Interfaces IWebSocket Interface to create a WebSocket implementation. IWebSocketContext Represents the context of a WebSocket connection. IWebSocketReceiveResult Interface for WebSocket Receive Result object. Enums CloseStatusCode Indicates the status code for the WebSocket connection close. Opcode Indicates the WebSocket frame type. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.IWebSocket.html": {
    "href": "api/EmbedIO.WebSockets.IWebSocket.html",
    "title": "Interface IWebSocket | EmbedIO",
    "keywords": "Interface IWebSocket Interface to create a WebSocket implementation. Namespace : EmbedIO.WebSockets Syntax public interface IWebSocket : IDisposable Properties State Gets the state. Declaration WebSocketState State { get; } Property Value Type Description WebSocketState The state. Methods CloseAsync(CancellationToken) Closes the web socket asynchronously. Declaration Task CloseAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task object representing the asynchronous operation. CloseAsync(CloseStatusCode, String, CancellationToken) Closes the web socket asynchronously. Declaration Task CloseAsync(CloseStatusCode code, string comment = null, CancellationToken cancellationToken = null) Parameters Type Name Description CloseStatusCode code The code. String comment The comment. CancellationToken cancellationToken The cancellation token. Returns Type Description Task The task object representing the asynchronous operation. SendAsync(Byte[], Boolean, CancellationToken) Sends the buffer to the web socket asynchronously. Declaration Task SendAsync(byte[] buffer, bool isText, CancellationToken cancellationToken = null) Parameters Type Name Description Byte [] buffer The buffer. Boolean isText if set to true [is text]. CancellationToken cancellationToken The cancellation token. Returns Type Description Task A task that represents the asynchronous of send data using websocket. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.IWebSocketContext.html": {
    "href": "api/EmbedIO.WebSockets.IWebSocketContext.html",
    "title": "Interface IWebSocketContext | EmbedIO",
    "keywords": "Interface IWebSocketContext Represents the context of a WebSocket connection. Namespace : EmbedIO.WebSockets Syntax public interface IWebSocketContext Properties AcceptedProtocol The accepted subprotocol. Declaration string AcceptedProtocol { get; } Property Value Type Description String CancellationToken Gets the CancellationToken used to cancel operations. Declaration CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Cookies The cookies that were passed to the server during the opening handshake. Declaration ICookieCollection Cookies { get; } Property Value Type Description ICookieCollection Headers The HTTP headers that were sent to the server during the opening handshake. Declaration NameValueCollection Headers { get; } Property Value Type Description NameValueCollection HttpContextId Gets the unique identifier of the opening handshake HTTP context. Declaration string HttpContextId { get; } Property Value Type Description String Id Gets a unique identifier for a WebSocket context. Declaration string Id { get; } Property Value Type Description String IsAuthenticated Whether the WebSocket client is authenticated. Declaration bool IsAuthenticated { get; } Property Value Type Description Boolean IsLocal Whether the WebSocket client connected from the local machine. Declaration bool IsLocal { get; } Property Value Type Description Boolean IsSecureConnection Whether the WebSocket connection is secured using Secure Sockets Layer (SSL). Declaration bool IsSecureConnection { get; } Property Value Type Description Boolean Items Gets the dictionary of data associated with the opening handshake HTTP context. Declaration IDictionary<object, object> Items { get; } Property Value Type Description IDictionary < Object , Object > LocalEndPoint Gets the server IP address and port number to which the opening handshake request is directed. Declaration IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint Origin The value of the Origin HTTP header included in the opening handshake. Declaration string Origin { get; } Property Value Type Description String RemoteEndPoint Gets the client IP address and port number from which the opening handshake request originated. Declaration IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint RequestedProtocols The list of subprotocols requested by the WebSocket client. Declaration IEnumerable<string> RequestedProtocols { get; } Property Value Type Description IEnumerable < String > RequestUri The URI requested by the WebSocket client. Declaration Uri RequestUri { get; } Property Value Type Description Uri Session Gets the session proxy associated with the opening handshake HTTP context. Declaration ISessionProxy Session { get; } Property Value Type Description ISessionProxy User An object used to obtain identity, authentication information, and security roles for the WebSocket client. Declaration IPrincipal User { get; } Property Value Type Description IPrincipal WebSocket The IWebSocket interface used to interact with the WebSocket connection. Declaration IWebSocket WebSocket { get; } Property Value Type Description IWebSocket WebSocketVersion The value of the SecWebSocketKey HTTP header included in the opening handshake. Declaration string WebSocketVersion { get; } Property Value Type Description String Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.IWebSocketReceiveResult.html": {
    "href": "api/EmbedIO.WebSockets.IWebSocketReceiveResult.html",
    "title": "Interface IWebSocketReceiveResult | EmbedIO",
    "keywords": "Interface IWebSocketReceiveResult Interface for WebSocket Receive Result object. Namespace : EmbedIO.WebSockets Syntax public interface IWebSocketReceiveResult Properties Count Gets the count. Declaration int Count { get; } Property Value Type Description Int32 The count. EndOfMessage Gets a value indicating whether [end of message]. Declaration bool EndOfMessage { get; } Property Value Type Description Boolean true if [end of message]; otherwise, false . MessageType Gets the type of the message. Declaration int MessageType { get; } Property Value Type Description Int32 The type of the message. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.Opcode.html": {
    "href": "api/EmbedIO.WebSockets.Opcode.html",
    "title": "Enum Opcode | EmbedIO",
    "keywords": "Enum Opcode Indicates the WebSocket frame type. Namespace : EmbedIO.WebSockets Syntax public enum Opcode : byte Remarks The values of this enumeration are defined in Section 5.2 of RFC 6455. Fields Name Description Binary Equivalent to numeric value 2. Indicates binary frame. Close Equivalent to numeric value 8. Indicates connection close frame. Cont Equivalent to numeric value 0. Indicates continuation frame. Ping Equivalent to numeric value 9. Indicates ping frame. Pong Equivalent to numeric value 10. Indicates pong frame. Text Equivalent to numeric value 1. Indicates text frame. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.WebSocketException.html": {
    "href": "api/EmbedIO.WebSockets.WebSocketException.html",
    "title": "Class WebSocketException | EmbedIO",
    "keywords": "Class WebSocketException The exception that is thrown when a WebSocket gets a fatal error. Inheritance Object WebSocketException Namespace : EmbedIO.WebSockets Syntax public class WebSocketException : Exception Properties Code Gets the status code indicating the cause of the exception. Declaration public CloseStatusCode Code { get; } Property Value Type Description CloseStatusCode One of the CloseStatusCode enum values, represents the status code indicating the cause of the exception. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/EmbedIO.WebSockets.WebSocketModule.html": {
    "href": "api/EmbedIO.WebSockets.WebSocketModule.html",
    "title": "Class WebSocketModule | EmbedIO",
    "keywords": "Class WebSocketModule A base class for modules that handle WebSocket connections. Inheritance Object WebModuleBase WebSocketModule Implements IWebModuleImpl IWebModule IDisposable Inherited Members WebModuleBase.Container WebModuleBase.IWebModuleImpl.SetContainer(IWebModuleContainer) WebModuleBase.BaseRoute WebModuleBase.OnUnhandledException WebModuleBase.OnHttpException WebModuleBase.LogSource WebModuleBase.Start(CancellationToken) WebModuleBase.MatchUrlPath(String) WebModuleBase.HandleRequestAsync(IHttpContext) WebModuleBase.SetContainer(IWebModuleContainer) Namespace : EmbedIO.WebSockets Syntax public abstract class WebSocketModule : WebModuleBase, IWebModuleImpl, IWebModule, IDisposable Remarks Each WebSocket server has a list of WebSocket subprotocols it can accept. When a client initiates a WebSocket opening handshake: if the list of accepted subprotocols is empty, the connection is accepted only if no SecWebSocketProtocol header is present in the request; if the list of accepted subprotocols is not empty, the connection is accepted only if one or more SecWebSocketProtocol headers are present in the request and one of them specifies one of the subprotocols in the list. The first subprotocol specified by the client that is also present in the module's list is then specified in the handshake response. If a connection is not accepted because of a subprotocol mismatch, a 400 Bad Request response is sent back to the client. The response contains one or more SecWebSocketProtocol headers that specify the list of accepted subprotocols (if any). Constructors WebSocketModule(String, Boolean) Initializes a new instance of the WebSocketModule class. Declaration protected WebSocketModule(string path, bool enableConnectionWatchdog) Parameters Type Name Description String path The URL path of the WebSocket endpoint to serve. Boolean enableConnectionWatchdog If set to true , contexts representing closed connections will automatically be purged from ActiveContexts every 30 seconds.. Properties ActiveContexts Gets a list of IWebSocketContext interfaces representing the currently connected clients. Declaration protected IReadOnlyList<IWebSocketContext> ActiveContexts { get; } Property Value Type Description IReadOnlyList < IWebSocketContext > Encoding Gets the Encoding used by the SendAsync(IWebSocketContext, String) method to send a string. The default is UTF8 per the WebSocket specification. Declaration protected Encoding Encoding { get; set; } Property Value Type Description Encoding IsFinalHandler Gets a value indicating whether processing of a request should stop after a module has handled it. Declaration public override sealed bool IsFinalHandler { get; } Property Value Type Description Boolean Overrides WebModuleBase.IsFinalHandler Remarks If this property is true , a HTTP context's SetHandled() method will be automatically called immediately after after the returned by HandleRequestAsync(IHttpContext) is completed. This will prevent the context from being passed further along to other modules. See Also IsHandled SetHandled () KeepAliveInterval Gets or sets the keep-alive interval for the WebSocket connection. The default is 30 seconds. Declaration protected TimeSpan KeepAliveInterval { get; set; } Property Value Type Description TimeSpan MaxMessageSize Gets or sets the maximum size of a received message. If a message exceeding the maximum size is received from a client, the connection is closed automatically. The default value is 0, which disables message size checking. Declaration protected int MaxMessageSize { get; set; } Property Value Type Description Int32 Methods AddProtocol(String) Adds a WebSocket subprotocol to the list of protocols supported by a WebSocketModule . Declaration protected void AddProtocol(string protocol) Parameters Type Name Description String protocol The protocol name to add to the list. See Also AddProtocols(IEnumerable<String>) AddProtocols(String[]) AddProtocols(IEnumerable<String>) Adds one or more WebSocket subprotocols to the list of protocols supported by a WebSocketModule . Declaration protected void AddProtocols(IEnumerable<string> protocols) Parameters Type Name Description IEnumerable < String > protocols The protocol names to add to the list. Remarks This method enumerates protocols just once; hence, if an exception is thrown because one of the specified protocols is null or contains invalid characters, any preceding protocol is added to the list of supported protocols. See Also AddProtocol(String) AddProtocols(String[]) AddProtocols(String[]) Adds one or more WebSocket subprotocols to the list of protocols supported by a WebSocketModule . Declaration protected void AddProtocols(params string[] protocols) Parameters Type Name Description String [] protocols The protocol names to add to the list. Remarks This method performs validation checks on all specified protocols before adding them to the list of supported protocols; hence, if an exception is thrown because one of the specified protocols is null or contains invalid characters, none of the specified protocol names are added to the list. See Also AddProtocol(String) AddProtocols(IEnumerable<String>) BroadcastAsync(Byte[]) Broadcasts the specified payload to all connected WebSocket clients. Declaration protected Task BroadcastAsync(byte[] payload) Parameters Type Name Description Byte [] payload The payload. Returns Type Description Task A representing the ongoing operation. BroadcastAsync(Byte[], Func<IWebSocketContext, Boolean>) Broadcasts the specified payload to selected WebSocket clients. Declaration protected Task BroadcastAsync(byte[] payload, Func<IWebSocketContext, bool> selector) Parameters Type Name Description Byte [] payload The payload. Func < IWebSocketContext , Boolean > selector A callback function that must return true for each context to be included in the broadcast. Returns Type Description Task A representing the ongoing operation. BroadcastAsync(String) Broadcasts the specified payload to all connected WebSocket clients. Declaration protected Task BroadcastAsync(string payload) Parameters Type Name Description String payload The payload. Returns Type Description Task A representing the ongoing operation. BroadcastAsync(String, Func<IWebSocketContext, Boolean>) Broadcasts the specified payload to selected WebSocket clients. Declaration protected Task BroadcastAsync(string payload, Func<IWebSocketContext, bool> selector) Parameters Type Name Description String payload The payload. Func < IWebSocketContext , Boolean > selector A callback function that must return true for each context to be included in the broadcast. Returns Type Description Task A representing the ongoing operation. CloseAsync(IWebSocketContext) Closes the specified web socket, removes it and disposes it. Declaration protected Task CloseAsync(IWebSocketContext context) Parameters Type Name Description IWebSocketContext context The web socket. Returns Type Description Task A representing the ongoing operation. Dispose() Declaration public void Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. OnClientConnectedAsync(IWebSocketContext) Called when this WebSocket server accepts a new client. Declaration protected virtual Task OnClientConnectedAsync(IWebSocketContext context) Parameters Type Name Description IWebSocketContext context The context. Returns Type Description Task A representing the ongoing operation. OnClientDisconnectedAsync(IWebSocketContext) Called when the server has removed a connected client for any reason. Declaration protected virtual Task OnClientDisconnectedAsync(IWebSocketContext context) Parameters Type Name Description IWebSocketContext context The context. Returns Type Description Task A representing the ongoing operation. OnFrameReceivedAsync(IWebSocketContext, Byte[], IWebSocketReceiveResult) Called when this WebSocket server receives a message frame regardless if the frame represents the EndOfMessage. Declaration protected virtual Task OnFrameReceivedAsync(IWebSocketContext context, byte[] buffer, IWebSocketReceiveResult result) Parameters Type Name Description IWebSocketContext context The context. Byte [] buffer The buffer. IWebSocketReceiveResult result The result. Returns Type Description Task A representing the ongoing operation. OnMessageReceivedAsync(IWebSocketContext, Byte[], IWebSocketReceiveResult) Called when this WebSocket server receives a full message (EndOfMessage) from a client. Declaration protected abstract Task OnMessageReceivedAsync(IWebSocketContext context, byte[] buffer, IWebSocketReceiveResult result) Parameters Type Name Description IWebSocketContext context The context. Byte [] buffer The buffer. IWebSocketReceiveResult result The result. Returns Type Description Task A representing the ongoing operation. OnRequestAsync(IHttpContext) Called to handle a request from a client. Declaration protected override sealed Task OnRequestAsync(IHttpContext context) Parameters Type Name Description IHttpContext context The context of the request being handled. Returns Type Description Task A representing the ongoing operation. Overrides WebModuleBase.OnRequestAsync(IHttpContext) OnStart(CancellationToken) Called when a module is started, immediately before locking the module's configuration. Declaration protected override void OnStart(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A used to stop the web server. Overrides WebModuleBase.OnStart(CancellationToken) SendAsync(IWebSocketContext, Byte[]) Sends a binary payload. Declaration protected static Task SendAsync(IWebSocketContext context, byte[] payload) Parameters Type Name Description IWebSocketContext context The web socket. Byte [] payload The payload. Returns Type Description Task A representing the ongoing operation. SendAsync(IWebSocketContext, String) Sends a text payload. Declaration protected static Task SendAsync(IWebSocketContext context, string payload) Parameters Type Name Description IWebSocketContext context The web socket. String payload The payload. Returns Type Description Task A representing the ongoing operation. Implements IWebModuleImpl IWebModule IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | EmbedIO",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at geovanni.perez@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing | EmbedIO",
    "keywords": "Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you. Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  "README.html": {
    "href": "README.html",
    "title": "Overview | EmbedIO",
    "keywords": "⭐ Please star this project if you find it useful! This README is for EmbedIO v3.x. Click here if you are still using EmbedIO v2.x. Overview EmbedIO 3.0 - What's new Some usage scenarios Installation Usage WebServer Setup Reading from a POST body as a dictionary (application/x-www-form-urlencoded) Reading from a POST body as a JSON payload (application/json) Reading from a POST body as a FormData (multipart/form-data) Writing a binary stream WebSockets Example Support for SSL Related Projects and Nugets Special Thanks Overview A tiny, cross-platform, module based, MIT-licensed web server for .NET Framework and .NET Core. Written entirely in C#, using our helpful library SWAN Network operations use the async/await pattern: Responses are handled asynchronously Multiple implementations support: EmbedIO can use Microsoft HttpListener or internal Http Listener based on Mono / websocket-sharp projects Cross-platform: tested on multiple OS and runtimes. From Windows .NET Framework to Linux MONO. Extensible: Write your own modules -- For example, video streaming, UPnP, etc. Check out EmbedIO Extras for additional modules Small memory footprint Create REST APIs quickly with the out-of-the-box Web API module Serve static or embedded files with 1 line of code (also out-of-the-box) Handle sessions with the built-in LocalSessionWebModule WebSockets support CORS support. Origin, Header and Method validation with OPTIONS preflight HTTP 206 Partial Content support Support Xamarin Forms And many more options in the same package EmbedIO 3.0 - What's new The major version 3.0 includes a lot of changes in how the webserver process the incoming request and the pipeline of the Web Modules. You can check a complete list of changes and a upgrade guide for v2 users here . Some usage scenarios: Write a cross-platform GUI entirely using React/AngularJS/Vue.js or any Javascript framework Write a game using Babylon.js and make EmbedIO your serve your code and assets Create GUIs for Windows services or Linux daemons Works well with LiteLib - add SQLite support in minutes! Write client applications with real-time communication between them using WebSockets Write internal web server for Xamarin Forms applications Installation: You can start using EmbedIO by just downloading the nuget. Package Manager PM> Install-Package EmbedIO .NET CLI > dotnet add package EmbedIO Usage Working with EmbedIO is pretty simple, check the follow sections to start coding right away. You can find more useful recipes and implementation details in the Cookbook . WebServer Setup Please note the comments are the important part here. More info is available in the samples. namespace Unosquare { using System; using EmbedIO; using EmbedIO.WebApi; class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> static void Main(string[] args) { var url = \"http://localhost:9696/\"; if (args.Length > 0) url = args[0]; // Our web server is disposable. using (var server = CreateWebServer(url)) { // Once we've registered our modules and configured them, we call the RunAsync() method. server.RunAsync(); var browser = new System.Diagnostics.Process() { StartInfo = new System.Diagnostics.ProcessStartInfo(url) { UseShellExecute = true } }; browser.Start(); // Wait for any key to be pressed before disposing of our web server. // In a service, we'd manage the lifecycle of our web server using // something like a BackgroundWorker or a ManualResetEvent. Console.ReadKey(true); } } // Create and configure our web server. private static WebServer CreateWebServer(string url) { var server = new WebServer(o => o .WithUrlPrefix(url) .WithMode(HttpListenerMode.EmbedIO)) // First, we will configure our web server by adding Modules. .WithLocalSessionManager() .WithWebApi(\"/api\", m => m .WithController<PeopleController>()) .WithModule(new WebSocketChatModule(\"/chat\")) .WithModule(new WebSocketTerminalModule(\"/terminal\")) .WithStaticFolder(\"/\", HtmlRootPath, true, m => m .WithContentCaching(UseFileCache)) // Add static files after other modules to avoid conflicts .WithModule(new ActionModule(\"/\", HttpVerbs.Any, ctx => ctx.SendDataAsync(new { Message = \"Error\" }))); // Listen for state changes. server.StateChanged += (s, e) => $\"WebServer New State - {e.NewState}\".Info(); return server; } } } Reading from a POST body as a dictionary (application/x-www-form-urlencoded) For reading a dictionary from an HTTP Request body inside a WebAPI method you can add an argument to your method with the attribute FormData . [Route(HttpVerbs.Post, \"/data\")] public async Task PostData([FormData] NameValueCollection data) { // Perform an operation with the data await SaveData(data); } Reading from a POST body as a JSON payload (application/json) For reading a JSON payload and deserialize it to an object from an HTTP Request body you can use GetRequestDataAsync . This method works directly from IHttpContext and returns an object of the type specified in the generic type. [Route(HttpVerbs.Post, \"/data\")] public async Task PostJsonData() { var data = HttpContext.GetRequestDataAsync<MyData>(); // Perform an operation with the data await SaveData(data); } Reading from a POST body as a FormData (multipart/form-data) EmbedIO doesn't provide the functionality to read from a Multipart FormData stream. But you can check the HttpMultipartParser Nuget and connect the Request input directly to the HttpMultipartParser, very helpful and small library. A sample code using the previous library: [Route(HttpVerbs.Post, \"/upload\")] public async Task UploadFile() { var parser = await MultipartFormDataParser.ParseAsync(Request.InputStream); // Now you can access parser.Files } There is another solution but it requires this Microsoft Nuget . Writing a binary stream You can open the Response Output Stream with the extension OpenResponseStream . [Route(HttpVerbs.Get, \"/binary\")] public async Task GetBinary() { // Call a fictional external source using (var stream = HttpContext.OpenResponseStream()) await stream.WriteAsync(dataBuffer, 0, 0); } WebSockets Example Working with WebSocket is pretty simple, you just need to implement the abstract class WebSocketModule and register the module to your Web server as follow: server..WithModule(new WebSocketChatModule(\"/chat\")); And our web sockets server class looks like: namespace Unosquare { using EmbedIO.WebSockets; /// <summary> /// Defines a very simple chat server. /// </summary> public class WebSocketsChatServer : WebSocketModule { public WebSocketsChatServer(string urlPath) : base(urlPath, true) { // placeholder } /// <inheritdoc /> protected override Task OnMessageReceivedAsync( IWebSocketContext context, byte[] rxBuffer, IWebSocketReceiveResult rxResult) => SendToOthersAsync(context, Encoding.GetString(rxBuffer)); /// <inheritdoc /> protected override Task OnClientConnectedAsync(IWebSocketContext context) => Task.WhenAll( SendAsync(context, \"Welcome to the chat room!\"), SendToOthersAsync(context, \"Someone joined the chat room.\")); /// <inheritdoc /> protected override Task OnClientDisconnectedAsync(IWebSocketContext context) => SendToOthersAsync(context, \"Someone left the chat room.\"); private Task SendToOthersAsync(IWebSocketContext context, string payload) => BroadcastAsync(payload, c => c != context); } } Support for SSL Both HTTP listeners (Microsoft and Unosquare) can open a web server using SSL. This support is for Windows only (for now) and you need to manually register your certificate or use the WebServerOptions class to initialize a new WebServer instance. This section will provide some examples of how to use SSL but first a brief explanation of how SSL works on Windows. For Windows Vista or better, Microsoft provides Network Shell ( netsh ). This command line tool allows to map an IP-port to a certificate, so incoming HTTP request can upgrade the connection to a secure stream using the provided certificate. EmbedIO can read or register certificates to a default store (My/LocalMachine) and use them against a netsh sslcert for binding the first https prefix registered. For Windows XP and Mono, you can use manually the httpcfg for registering the binding. Using a PFX file and AutoRegister option The more practical case to use EmbedIO with SSL is the AutoRegister option. You need to create a WebServerOptions instance with the path to a PFX file and the AutoRegister flag on. This options will try to get or register the certificate to the default certificate store. Then it will use the certificate thumbprint to register with netsh the FIRST https prefix registered on the options. Using AutoLoad option If you already have a certificate on the default certificate store and the binding is also registered in netsh , you can use Autoload flag and optionally provide a certificate thumbprint. If the certificate thumbprint is not provided, EmbedIO will read the data from netsh . After getting successfully the certificate from the store, the raw data is passed to the WebServer. Related Projects and Nugets Name Author Description Butterfly.EmbedIO Fireshark Studios, LLC Implementation of Butterfly.Core.Channel and Butterfly.Core.WebApi using the EmbedIO server embedio-cli Unosquare A dotnet global tool that enables start any web folder or EmbedIO assembly (WebAPI or WebSocket) from command line. EmbedIO.BearerToken Unosquare Allow to authenticate with a Bearer Token. It uses a Token endpoint (at /token path) and with a defined validation delegate create a JsonWebToken. The module can check all incoming requests or a paths EmbedIO.LiteLibWebApi Unosquare Allow to expose a sqlite database as REST api using EmbedIO WebApi and LiteLib libraries EmbedIO.OWIN Unosquare EmbedIO can use the OWIN platform in two different approach: You can use EmbedIO as OWIN server and use all OWIN framework with EmbedIO modules. Microsoft.AspNetCore.Server.EmbedIO Dju EmbedIO web server support for ASP.NET Core, as a drop-in replacement for Kestrel SambaFetcher nddipiazza A .NET tool to connect a web server with Samba Special Thanks To YourKit for supports open source projects with its full-featured .NET Profiler , an amazing tool to profile CPU and Memory!"
  },
  "wiki/_Sidebar.html": {
    "href": "wiki/_Sidebar.html",
    "title": "General | EmbedIO",
    "keywords": "General Upgrade from v2 Cookbook Additional details Exception Handlers Self-signed Certified Partial content and compression"
  },
  "wiki/Cookbook.html": {
    "href": "wiki/Cookbook.html",
    "title": "Cookbook | EmbedIO",
    "keywords": "Cookbook This cookbook includes common tasks and solutions for EmbedIOv3. Example of a GET Request Automatic serialization of results Asynchronous controller methods Route parameters Using parametric routes Optional route parameters URL query parameters Retrieving single parameters Retrieving all parameters as a collection Form values ( application/x-www-form-urlencoded ) Retrieving single values Retrieving all values as a collection Reading a request body as JSON ( application/json ) Custom deserialization of request data (pass anything as a controller method parameter!) Multi-part forms and file uploads ( multipart/form-data ) Writing a custom response body Writing to the response body as a stream Writing to the response body as text Logging (turn off or customize) Setting a custom error page Example of a GET Request Returning a simple value: [Route(HttpVerbs.Get, \"/ping\")] public string TableTennis() { return \"pong\"; } Automatic serialization of results Any returned value will be serialized and sent as response body. The default serialization method uses Swan.Json . Serialization can be customized at module level by setting the Serializer property. Asynchronous controller methods If any asynchronous operations are involved, a Task<TResult> object can be returned: [Route(HttpVerbs.Get, \"/ping\")] public async Task<string> TableTennisAsync() { // You will probably want to do something more useful than this. await Task.Delay(500); return \"pong\"; } Route parameters Using parametric routes Routes can be parametric. Route parameters will be automatically passed as method parameters of the same name. If the type of the parameter is not string or object , the relevant part of the URL will be parsed and a 400 Bad Request response will be sent to the client if parsing is not successful. // hello/paul [Route(HttpVerbs.Get, \"/hello/{name}\")] public string SayHello(string name) { return $\"Hello, {name}\"; } Optional route parameters A route parameters preceded by a question mark is considered optional. // orders/123 -> list of orders for customer id 123 // orders/123/456 -> list of orders for customer id 123 containing item id 456 [Route(HttpVerbs.Get, \"/orders/{customerId}/{?itemId}\")] public async IEnumerable<Order> RetrieveOrderListByCustomer(int customerId, int? itemId) { var orders = itemId.HasValue ? await Database.GetOrdersByCustomerAndItem(customerId, itemId) : await Database.GetOrdersByCustome(customerId); if (orders == null) { throw HttpException.NotFound(\"No orders were found in database.\"); } return orders; } URL query parameters Retrieving single parameters URL query parameters can be retrieved as method parameters using the QueryField attribute . // hello?username=Elvis [Route(HttpVerbs.Get, \"/hello\")] public string Hello([QueryField] string username) { return $\"Hello {username}\"; } Retrieving all parameters as a collection The whole set of query parameters can be retrieved as a method parameter with the QueryData attribute . Note that the parameter must be of type System.Specialized.NameValueCollection . If the request has no query parameters, an empty NameValueCollection will be passed to the method. // hello?foo=bar&anything=at_all [Route(HttpVerbs.Get, \"/hello\")] public async Task<string> Hello([QueryData] NameValueCollection parameters) { var sb = new StringBuilder(); foreach (var key in parameters.AllKeys) { await Task.Yield(); // Easy on the CPU sb.AppendLine($\"Parameter '{key}' is '{parameters[key]}'.\"); } return sb.ToString(); } Query parameters can also be retrieved directly from the HTTP context, using the GetRequestQueryData extension method . // hello?foo=bar&anything=at_all [Route(HttpVerbs.Get, \"/hello\")] public async Task<string> Hello() { var parameters = HttpContext.GetRequestQueryData(); var sb = new StringBuilder(); foreach (var key in parameters.AllKeys) { await Task.Yield(); // Easy on the CPU sb.AppendLine($\"Parameter '{key}' is '{parameters[key]}'.\"); } return sb.ToString(); } Form values ( application/x-www-form-urlencoded ) Retrieving single values Form values can be retrieved as method parameters using the FormField attribute . [Route(HttpVerbs.Post, \"/login\")] public async Task Login([FormField] string user, [FormField(\"pwd\")] string password) { // Note that MyProgram.CheckCredentialsAsync is just an example, not part of EmbedIO. // We'll assume it returns Task<bool>. var location = await MyProgram.CheckCredentialsAsync(user, password) ? \"/home\" : \"/loginFailed\"; throw HttpException.Redirect(location); } Retrieving all values as a collection The whole set of form values can be retrieved as a method parameter with the FormData attribute . Note that the parameter must be of type System.Specialized.NameValueCollection . If the request body contains no form data, an empty NameValueCollection will be passed to the method. [Route(HttpVerbs.Post, \"/login\")] public async Task Login([FormData] NameValueCollection data) { // Note that MyProgram.CheckCredentialsAsync is just an example, not part of EmbedIO. // We'll assume it returns Task<bool>. var location = await MyProgram.CheckCredentialsAsync(data[\"user\"], data[\"pwd\"]) ? \"/home\" : \"/loginFailed\"; throw HttpException.Redirect(location); } Form data can also be retrieved directly from the HTTP context, using the GetRequestFormDataAsync extension method . [Route(HttpVerbs.Post, \"/login\")] public async Task Login() { // Note that MyProgram.CheckCredentialsAsync is just an example, not part of EmbedIO. // We'll assume it returns Task<bool>. var data = await HttpContext.GetRequestFormDataAsync(); var location = await MyProgram.CheckCredentialsAsync(data[\"user\"], data[\"pwd\"]) ? \"/home\" : \"/loginFailed\"; throw HttpException.Redirect(location); } Reading a request body as JSON ( application/json ) A request body, deserialized as JSON, can be retrieved as a method parameter using the JsonData attribute . If the request body cannot be deserialized to the type of the parameter, a 400 Bad Request response will be sent to the client. public class Person { public string Name { get; set; } public int Age { get; set; } } // Request body: { \"Name\": \"John\"; \"Age\": 42 } [Route(HttpVerbs.Post, \"/describe\")] public string DescribePerson([JsonData] Person person) { return $\"{person.Name} is {person.Age} years old.\"; } A deserialized request body can also be retrieved directly from the HTTP context, using the GetRequestDataAsync<TData> extension method . public class Person { public string Name { get; set; } public int Age { get; set; } } // Request body: { \"Name\": \"John\"; \"Age\": 42 } [Route(HttpVerbs.Post, \"/describe\")] public async Task<string> DescribePerson() { var data = await HttpContext.GetRequestDataAsync<Person>(); return $\"{person.Name} is {person.Age} years old.\"; } Custom deserialization of request data (pass anything as a controller method parameter!) The attributes used in the above examples are not based on some internal-use-only black magic. If an attribute that implements one or more of the following interfaces, if placed on a controller method parameter, will be automatically used to retrieve data from a request and inject it into the method call: IRequestDataAttribute<TController> when the code to retrieve data is independent of the type of the parameter; IRequestDataAttribute<TController, TData> when a specific parameter type is required to inject retrieved data; INonNullRequestDataAttribute<TController, TData> same as the previous, to use when the retrieved data can never be null , to keep static analyzers happy. All three interfaces are quite simple, each consisting of just one method. Refer to the linked documentation for more details. You can also have a look at the source code for the following classes to see how simple it is to create your own data-retrieving attributes: JsonDataAttribute (implementing IRequestDataAttribute<TController> ) QueryDataAttribute and FormDataAttribute (implementing IRequestDataAttribute<TController, TData> ) QueryFieldAttribute and FormFieldAttribute (implementing both IRequestDataAttribute<TController> and IRequestDataAttribute<TController, TData> - twice!) Multi-part forms and file uploads ( multipart/form-data ) There is no built-in functionality in EmbedIO to read a multi-part form from a request body. However, you can use the HttpMultipartParser library to do that, as shown below. [Route(HttpVerbs.Post, \"/upload\")] public async Task UploadFile() { var parser = await MultipartFormDataParser.ParseAsync(Request.InputStream); // Now you can access parser.Files // ... } Writing a custom response body Writing to the response body as a stream You can open the response body as a Stream with the OpenResponseStream extension method . [Route(HttpVerbs.Get, \"/binary\")] public async Task GetBinary() { // Call a fictional external source using (var stream = HttpContext.OpenResponseStream()) { await stream.WriteAsync(dataBuffer, 0, 0); } } Writing to the response body as text You can open the response body as a TextWriter with the OpenResponseText extension method . [Route(HttpVerbs.Get, \"/hello\")] public async Task GetBinary() { using (var writer = HttpContext.OpenResponseText()) { await writer.WriteAsync(\"Hello!\"); } } Logging (turn off or customize) If all you want is to turn logging off, do this before initializing your web server: Logger.UnregisterLogger<ConsoleLogger>(); Refer to the documentation for Swan.Logger for more detailed information, including how to log on files. Setting a custom error page HTTP exceptions can be handled both at module level and at web server level. Here's how toset a custom handler for a web server: var server = new WebServer(8877); server.HandleHttpException(async (context, exception) => { context.Response.StatusCode = exception.StatusCode; switch (exception.StatusCode) { case 404: await context.SendStringAsync(\"Your content\", \"text/html\", Encoding.UTF8); break; default: await HttpExceptionHandler.Default(context, exception); break; } });"
  },
  "wiki/Exceptions-handlers.html": {
    "href": "wiki/Exceptions-handlers.html",
    "title": "Exceptions handlers | EmbedIO",
    "keywords": "Exceptions handlers"
  },
  "wiki/Home.html": {
    "href": "wiki/Home.html",
    "title": "| EmbedIO",
    "keywords": "A tiny, cross-platform, module based, MIT-licensed web server. Check EmbedIO web site"
  },
  "wiki/Partial-content-and-compression.html": {
    "href": "wiki/Partial-content-and-compression.html",
    "title": "| EmbedIO",
    "keywords": "As of version 3, FileModule supports the delivery of partial content, i.e. requests containing a Range header are correctly handled. EmbedIO also supports both gzip and deflate compression when requested through Content-Encoding headers. The combination of the two, however, is not supported. When a request contains both Range and Content-Encoding headers, the following will happen: If the client can accept an uncompressed response payload (e.g. the Content-Encoding header also contains identity ), then the Range header is honored: the resulting uncompressed response will contain the requested range. If the client cannot accept an uncompressed response payload, then the Range header is ignored: the response will contain the whole requested resource , compressed with the requested Content-Encoding method. You can verify this behavior by looking at the source for FileModule . There's an interesting discussion on the subject on ruby-forum.com . It's a few years old, talking about Nginx vs. Apache and CURL vs. browsers, but the relevant parts of RFCs have not changed much in the meantime. In short, combining range requests with content compression would mean sending pieces of a gzipped / deflated resource. The client couldn't decompress the resource without first combining all the pieces, because of how compression / decompression algorithms work. Different clients will mess things up in different ways; there seems to be no clear standard about handling compressed 206 Partial Content responses. Therefore it makes no sense to send them. This is usually no big deal, since most files over a few kilobytes are compressed anyway: think ZIP, JPEG, PNG, even OfficeOpenXML and OpenDocument (which are ZIP files under disguise)."
  },
  "wiki/Self-signed-certified-(Windows).html": {
    "href": "wiki/Self-signed-certified-(Windows).html",
    "title": "| EmbedIO",
    "keywords": "Run the following script as Administrato using Powershell: $date_now = Get-Date $extended_date = $date_now.AddYears(3) $cert = New-SelfSignedCertificate -certstorelocation cert:\\localmachine\\my -dnsname unosquare.io -notafter $extended_date Then you can bind the port to the certificate with netsh : # Run the following script as Administrator netsh http add sslcert ipport=0.0.0.0:7876 certhash=767b9a3ad23a0cfc597df8be23d58984503c7ad8 appid={adaa04bb-8b63-4073-a12f-d6f8c0b4383f}"
  },
  "wiki/Upgrade-from-v2.html": {
    "href": "wiki/Upgrade-from-v2.html",
    "title": "Upgrade guide for v2 users | EmbedIO",
    "keywords": "Upgrade guide for v2 users General The assembly name is now EmbedIO.dll (instead of Unosquare.Labs.EmbedIO.dll ). The root namespace is now EmbedIO (instead of Unosquare.Labs.EmbedIO ). Namespaces have been reorganized: instead of a code-type-based approach ( Constants , Modules , etc.) now they follow a more common feature-based approach. For example you will find class WebApiModule , together with its support types, in namespace EmbedIO.WebApi (previously it was in Unosquare.Labs.EmbedIO.Modules ). Immutable configuration Previous versions of EmbedIO allowed you to register and unregister modules, web API controllers, and virtual paths for static files while a web server was running. This had a direct impact on both code complexity and run-time performance. Version 3 has immutable configuration : once a web server is started, its configuration (the set of properties that define the web server's behavior, as well as the list of registered modules) becomes read-only, and so does the configuration of all registered modules, lists of web API controllers, etc. Another consequence of immutable configuration is that it is no longer possible to unregister modules, controllers, and virtual paths: the Unregister**** methods have simply been removed. Immutable configuration has allowed us to simplify code in several places, removing locking mechanisms that had a direct impact on run-time performance. New routing rules Wildcard routing strategy has been removed: routing is Regex-based everywhere. Base routes In previous versions of EmbedIO, every single path or route (web API method routes, virtual paths for static files) was absolute. If you wanted a web API controller method to handle /api/customer/{id} , that's what you specified. If all your API method paths started with /api/ , you had to specify it every time. For every request, the web server had to call into each module until it found one who could handle the requested path. EmbedIO v3.0 introduces the concept of base route . Every module has its own base route, which is tested against the beginning of the requested path; the IHttpContext.RequestedPath property that handlers see is relative to the module's base route. For example, if a WebApiModule has a base route of /api/ (base routes always end with a slash) then a WebApiController method with a [Route(\"/customer/{id}\")] attribute will handle a request for /api/customer/12345 . Base routes enable a web server to more quickly find out which module is \"responsible\" for a given path. If a base path has parameters, you can find their values in the IHttpContext.Route property, which implements IReadOnlyDictionary<string,string> . Fluent initialization A lot of work has been devoted in the development of EmbedIO v3.0 to ensure that a web server can be initialized entirely using \"fluent\" extension methods. This futher reduces the boilerplate code in applications, leaving you with a bare minimum that usually fits in a screenful and lets you see the structure and options of your web server at a glance. You can obtain the most concise code by writing a private method to initialize a web server, using an expression body and lambdas, like this: private WebServer CreateWebServer(int port, Database database) => new WebServer(port) .WithCors() .WithStaticFolder(\"/\", \"C:\\\\www\", true) .WithWebApi(\"/api/\", m => m .WithController(() => new CustomerController(database)) .WithController(() => new InvoiceController(database)))); Fluent extension methods always start with With (or Handle if their purpose is to set a callback method) so Intellisense is your friend. You may also take a look at EmbedIO's source code: all extension methods are in classes whose name ends in Extensions , so they are rather easy to find. HTTP context handlers HTTP context handlers do not return bool any longer; instead, they are void functions ( Sub s, if you speak VB). Whether a HTTP context gets passed along to further modules is decided, by default, on a module-per-module basis, via the IWebModule.IsFinalHandler property; this default may be overridden by a handler, either by calling context.SetHandled() to stop futher processing, or with throw RequestHandler.PassThrough(); to skip the currently executing handler and pass the context along to subsequent modules. Web API Web API is probably the area that has undergone the most changes in EmbedIO v3.0. Writing web API controllers is now easier, there is less boilerplate code to write (if any), but porting controllers from previous versions requires some work. Let's see what has changed. Relative routes First of all, due to base routes, web API controller method routes (which are now specified with a RouteAttribute instead of WebApiHandlerAttribute ) are now relative to the module's base route , as we saw a couple paragraphs above. No construction parameters for controllers WebApiController 's constructor is now parameterless, so there is no need for derived classes to take constructor parameters just to pass them to base() . Your controller constructors will have just the parameters you need (a reference to a database, for example) instead of being compelled to always take an IHttpContext . Of course the HTTP context is still available to controller methods as the HttpContext property, which now gets automatically injected post-construction. No need to return bool Another fundamental change is that web API controller methods do NOT need a bool or Task<bool> return type . When a void controller method returns (or the Task returned by a controller method completes) a default 200 OK response is sent to the client - unless, of course, the method has crafted its own response. A response with a status code different from 200 OK may be generated by throwing a HTTP exception (e.g. throw HttpException.Unauthorized(); , throw HttpException.Redirect(\"/\"); , etc. - find them all here ). When a controller method generates a result, either by returning a value or when a returned Task<> completes, the result gets serialized and sent to the client. You don't need to generate your JSON any longer , just return the result and WebApiModule will take care of serialization. The default serialization callback used by WebApiModule leverages Swan.Json , but it's easy to write a serialization callback: it's just a method that takes an IHttpContext and an object and returns a Task . You can find the method signature defined as ResponseSerializationCallback . For an example of how a web API controller changes when ported from EmbedIO v2.x to v3.0, you can check the PeopleController class from the sample project: here is the 2.x version and here is the 3.0 version . BEWARE: Existing controller methods returning bool will generate JSON responses containing their serialized return value, as JSON is the default response serializer for web API modules. Serving files No more StaticFilesModule and ResourceFilesModule : the new FileModule (in namespace EmbedIO.Files , of course) uses an IFileProvider interface to abstract the file system and provides the same level of functionality (compression, caching, support for range requests) regardless of the underlying storage. File providers are available for static files, embedded resources, and (new!) ZIP files. Fallback and \"quick\" actions FallbackModule functionality has been split between ActionModule and RedirectModule . As you've probably guessed, their namespace is EmbedIO.Actions . Unit testing support Support types for unit testing have been moved to their own assembly EmbedIO.Testing.dll ."
  }
}